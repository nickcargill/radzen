using System;
using System.Data;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Text.Encodings.Web;
using Microsoft.AspNetCore.Components;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Radzen;

using Destination.Data;

namespace Destination
{
    public partial class destinationTestService
    {
        destinationTestContext Context
        {
           get
           {
             return this.context;
           }
        }

        private readonly destinationTestContext context;
        private readonly NavigationManager navigationManager;

        public destinationTestService(destinationTestContext context, NavigationManager navigationManager)
        {
            this.context = context;
            this.navigationManager = navigationManager;
        }

        public void Reset() => Context.ChangeTracker.Entries().Where(e => e.Entity != null).ToList().ForEach(e => e.State = EntityState.Detached);

        public void ApplyQuery<T>(ref IQueryable<T> items, Query query = null)
        {
            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }
        }


        public async Task ExportAffiliateBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatebookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatebookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAffiliateBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatebookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatebookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAffiliateBookingsRead(ref IQueryable<Destination.Models.destinationTest.AffiliateBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AffiliateBooking>> GetAffiliateBookings(Query query = null)
        {
            var items = Context.AffiliateBookings.AsQueryable();

            items = items.Include(i => i.Affiliate);
            items = items.Include(i => i.Booking);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAffiliateBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAffiliateBookingGet(Destination.Models.destinationTest.AffiliateBooking item);
        partial void OnGetAffiliateBookingByAffiliateBookingId(ref IQueryable<Destination.Models.destinationTest.AffiliateBooking> items);


        public async Task<Destination.Models.destinationTest.AffiliateBooking> GetAffiliateBookingByAffiliateBookingId(int affiliatebookingid)
        {
            var items = Context.AffiliateBookings
                              .AsNoTracking()
                              .Where(i => i.AffiliateBookingId == affiliatebookingid);

            items = items.Include(i => i.Affiliate);
            items = items.Include(i => i.Booking);
 
            OnGetAffiliateBookingByAffiliateBookingId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAffiliateBookingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAffiliateBookingCreated(Destination.Models.destinationTest.AffiliateBooking item);
        partial void OnAfterAffiliateBookingCreated(Destination.Models.destinationTest.AffiliateBooking item);

        public async Task<Destination.Models.destinationTest.AffiliateBooking> CreateAffiliateBooking(Destination.Models.destinationTest.AffiliateBooking affiliatebooking)
        {
            OnAffiliateBookingCreated(affiliatebooking);

            var existingItem = Context.AffiliateBookings
                              .Where(i => i.AffiliateBookingId == affiliatebooking.AffiliateBookingId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AffiliateBookings.Add(affiliatebooking);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(affiliatebooking).State = EntityState.Detached;
                throw;
            }

            OnAfterAffiliateBookingCreated(affiliatebooking);

            return affiliatebooking;
        }

        public async Task<Destination.Models.destinationTest.AffiliateBooking> CancelAffiliateBookingChanges(Destination.Models.destinationTest.AffiliateBooking item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAffiliateBookingUpdated(Destination.Models.destinationTest.AffiliateBooking item);
        partial void OnAfterAffiliateBookingUpdated(Destination.Models.destinationTest.AffiliateBooking item);

        public async Task<Destination.Models.destinationTest.AffiliateBooking> UpdateAffiliateBooking(int affiliatebookingid, Destination.Models.destinationTest.AffiliateBooking affiliatebooking)
        {
            OnAffiliateBookingUpdated(affiliatebooking);

            var itemToUpdate = Context.AffiliateBookings
                              .Where(i => i.AffiliateBookingId == affiliatebooking.AffiliateBookingId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(affiliatebooking);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAffiliateBookingUpdated(affiliatebooking);

            return affiliatebooking;
        }

        partial void OnAffiliateBookingDeleted(Destination.Models.destinationTest.AffiliateBooking item);
        partial void OnAfterAffiliateBookingDeleted(Destination.Models.destinationTest.AffiliateBooking item);

        public async Task<Destination.Models.destinationTest.AffiliateBooking> DeleteAffiliateBooking(int affiliatebookingid)
        {
            var itemToDelete = Context.AffiliateBookings
                              .Where(i => i.AffiliateBookingId == affiliatebookingid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAffiliateBookingDeleted(itemToDelete);


            Context.AffiliateBookings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAffiliateBookingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAffiliateCollaborationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatecollaborations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatecollaborations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAffiliateCollaborationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatecollaborations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatecollaborations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAffiliateCollaborationsRead(ref IQueryable<Destination.Models.destinationTest.AffiliateCollaboration> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AffiliateCollaboration>> GetAffiliateCollaborations(Query query = null)
        {
            var items = Context.AffiliateCollaborations.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAffiliateCollaborationsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAffiliateCollaborationGet(Destination.Models.destinationTest.AffiliateCollaboration item);
        partial void OnGetAffiliateCollaborationById(ref IQueryable<Destination.Models.destinationTest.AffiliateCollaboration> items);


        public async Task<Destination.Models.destinationTest.AffiliateCollaboration> GetAffiliateCollaborationById(int id)
        {
            var items = Context.AffiliateCollaborations
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetAffiliateCollaborationById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAffiliateCollaborationGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAffiliateCollaborationCreated(Destination.Models.destinationTest.AffiliateCollaboration item);
        partial void OnAfterAffiliateCollaborationCreated(Destination.Models.destinationTest.AffiliateCollaboration item);

        public async Task<Destination.Models.destinationTest.AffiliateCollaboration> CreateAffiliateCollaboration(Destination.Models.destinationTest.AffiliateCollaboration affiliatecollaboration)
        {
            OnAffiliateCollaborationCreated(affiliatecollaboration);

            var existingItem = Context.AffiliateCollaborations
                              .Where(i => i.Id == affiliatecollaboration.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AffiliateCollaborations.Add(affiliatecollaboration);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(affiliatecollaboration).State = EntityState.Detached;
                throw;
            }

            OnAfterAffiliateCollaborationCreated(affiliatecollaboration);

            return affiliatecollaboration;
        }

        public async Task<Destination.Models.destinationTest.AffiliateCollaboration> CancelAffiliateCollaborationChanges(Destination.Models.destinationTest.AffiliateCollaboration item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAffiliateCollaborationUpdated(Destination.Models.destinationTest.AffiliateCollaboration item);
        partial void OnAfterAffiliateCollaborationUpdated(Destination.Models.destinationTest.AffiliateCollaboration item);

        public async Task<Destination.Models.destinationTest.AffiliateCollaboration> UpdateAffiliateCollaboration(int id, Destination.Models.destinationTest.AffiliateCollaboration affiliatecollaboration)
        {
            OnAffiliateCollaborationUpdated(affiliatecollaboration);

            var itemToUpdate = Context.AffiliateCollaborations
                              .Where(i => i.Id == affiliatecollaboration.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(affiliatecollaboration);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAffiliateCollaborationUpdated(affiliatecollaboration);

            return affiliatecollaboration;
        }

        partial void OnAffiliateCollaborationDeleted(Destination.Models.destinationTest.AffiliateCollaboration item);
        partial void OnAfterAffiliateCollaborationDeleted(Destination.Models.destinationTest.AffiliateCollaboration item);

        public async Task<Destination.Models.destinationTest.AffiliateCollaboration> DeleteAffiliateCollaboration(int id)
        {
            var itemToDelete = Context.AffiliateCollaborations
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAffiliateCollaborationDeleted(itemToDelete);


            Context.AffiliateCollaborations.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAffiliateCollaborationDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAffiliateCommissionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatecommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatecommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAffiliateCommissionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatecommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatecommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAffiliateCommissionsRead(ref IQueryable<Destination.Models.destinationTest.AffiliateCommission> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AffiliateCommission>> GetAffiliateCommissions(Query query = null)
        {
            var items = Context.AffiliateCommissions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAffiliateCommissionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAffiliateCommissionGet(Destination.Models.destinationTest.AffiliateCommission item);
        partial void OnGetAffiliateCommissionByAffiliateCommissionId(ref IQueryable<Destination.Models.destinationTest.AffiliateCommission> items);


        public async Task<Destination.Models.destinationTest.AffiliateCommission> GetAffiliateCommissionByAffiliateCommissionId(int affiliatecommissionid)
        {
            var items = Context.AffiliateCommissions
                              .AsNoTracking()
                              .Where(i => i.AffiliateCommissionId == affiliatecommissionid);

 
            OnGetAffiliateCommissionByAffiliateCommissionId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAffiliateCommissionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAffiliateCommissionCreated(Destination.Models.destinationTest.AffiliateCommission item);
        partial void OnAfterAffiliateCommissionCreated(Destination.Models.destinationTest.AffiliateCommission item);

        public async Task<Destination.Models.destinationTest.AffiliateCommission> CreateAffiliateCommission(Destination.Models.destinationTest.AffiliateCommission affiliatecommission)
        {
            OnAffiliateCommissionCreated(affiliatecommission);

            var existingItem = Context.AffiliateCommissions
                              .Where(i => i.AffiliateCommissionId == affiliatecommission.AffiliateCommissionId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AffiliateCommissions.Add(affiliatecommission);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(affiliatecommission).State = EntityState.Detached;
                throw;
            }

            OnAfterAffiliateCommissionCreated(affiliatecommission);

            return affiliatecommission;
        }

        public async Task<Destination.Models.destinationTest.AffiliateCommission> CancelAffiliateCommissionChanges(Destination.Models.destinationTest.AffiliateCommission item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAffiliateCommissionUpdated(Destination.Models.destinationTest.AffiliateCommission item);
        partial void OnAfterAffiliateCommissionUpdated(Destination.Models.destinationTest.AffiliateCommission item);

        public async Task<Destination.Models.destinationTest.AffiliateCommission> UpdateAffiliateCommission(int affiliatecommissionid, Destination.Models.destinationTest.AffiliateCommission affiliatecommission)
        {
            OnAffiliateCommissionUpdated(affiliatecommission);

            var itemToUpdate = Context.AffiliateCommissions
                              .Where(i => i.AffiliateCommissionId == affiliatecommission.AffiliateCommissionId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(affiliatecommission);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAffiliateCommissionUpdated(affiliatecommission);

            return affiliatecommission;
        }

        partial void OnAffiliateCommissionDeleted(Destination.Models.destinationTest.AffiliateCommission item);
        partial void OnAfterAffiliateCommissionDeleted(Destination.Models.destinationTest.AffiliateCommission item);

        public async Task<Destination.Models.destinationTest.AffiliateCommission> DeleteAffiliateCommission(int affiliatecommissionid)
        {
            var itemToDelete = Context.AffiliateCommissions
                              .Where(i => i.AffiliateCommissionId == affiliatecommissionid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAffiliateCommissionDeleted(itemToDelete);


            Context.AffiliateCommissions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAffiliateCommissionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAffiliatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAffiliatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAffiliatesRead(ref IQueryable<Destination.Models.destinationTest.Affiliate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Affiliate>> GetAffiliates(Query query = null)
        {
            var items = Context.Affiliates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAffiliatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAffiliateGet(Destination.Models.destinationTest.Affiliate item);
        partial void OnGetAffiliateByAffiliateId(ref IQueryable<Destination.Models.destinationTest.Affiliate> items);


        public async Task<Destination.Models.destinationTest.Affiliate> GetAffiliateByAffiliateId(int affiliateid)
        {
            var items = Context.Affiliates
                              .AsNoTracking()
                              .Where(i => i.AffiliateId == affiliateid);

 
            OnGetAffiliateByAffiliateId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAffiliateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAffiliateCreated(Destination.Models.destinationTest.Affiliate item);
        partial void OnAfterAffiliateCreated(Destination.Models.destinationTest.Affiliate item);

        public async Task<Destination.Models.destinationTest.Affiliate> CreateAffiliate(Destination.Models.destinationTest.Affiliate affiliate)
        {
            OnAffiliateCreated(affiliate);

            var existingItem = Context.Affiliates
                              .Where(i => i.AffiliateId == affiliate.AffiliateId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Affiliates.Add(affiliate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(affiliate).State = EntityState.Detached;
                throw;
            }

            OnAfterAffiliateCreated(affiliate);

            return affiliate;
        }

        public async Task<Destination.Models.destinationTest.Affiliate> CancelAffiliateChanges(Destination.Models.destinationTest.Affiliate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAffiliateUpdated(Destination.Models.destinationTest.Affiliate item);
        partial void OnAfterAffiliateUpdated(Destination.Models.destinationTest.Affiliate item);

        public async Task<Destination.Models.destinationTest.Affiliate> UpdateAffiliate(int affiliateid, Destination.Models.destinationTest.Affiliate affiliate)
        {
            OnAffiliateUpdated(affiliate);

            var itemToUpdate = Context.Affiliates
                              .Where(i => i.AffiliateId == affiliate.AffiliateId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(affiliate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAffiliateUpdated(affiliate);

            return affiliate;
        }

        partial void OnAffiliateDeleted(Destination.Models.destinationTest.Affiliate item);
        partial void OnAfterAffiliateDeleted(Destination.Models.destinationTest.Affiliate item);

        public async Task<Destination.Models.destinationTest.Affiliate> DeleteAffiliate(int affiliateid)
        {
            var itemToDelete = Context.Affiliates
                              .Where(i => i.AffiliateId == affiliateid)
                              .Include(i => i.AffiliateBookings)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAffiliateDeleted(itemToDelete);


            Context.Affiliates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAffiliateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAffiliatesCommunicationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatescommunications/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatescommunications/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAffiliatesCommunicationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatescommunications/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatescommunications/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAffiliatesCommunicationsRead(ref IQueryable<Destination.Models.destinationTest.AffiliatesCommunication> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AffiliatesCommunication>> GetAffiliatesCommunications(Query query = null)
        {
            var items = Context.AffiliatesCommunications.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAffiliatesCommunicationsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAffiliatesCommunicationGet(Destination.Models.destinationTest.AffiliatesCommunication item);
        partial void OnGetAffiliatesCommunicationById(ref IQueryable<Destination.Models.destinationTest.AffiliatesCommunication> items);


        public async Task<Destination.Models.destinationTest.AffiliatesCommunication> GetAffiliatesCommunicationById(int id)
        {
            var items = Context.AffiliatesCommunications
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetAffiliatesCommunicationById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAffiliatesCommunicationGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAffiliatesCommunicationCreated(Destination.Models.destinationTest.AffiliatesCommunication item);
        partial void OnAfterAffiliatesCommunicationCreated(Destination.Models.destinationTest.AffiliatesCommunication item);

        public async Task<Destination.Models.destinationTest.AffiliatesCommunication> CreateAffiliatesCommunication(Destination.Models.destinationTest.AffiliatesCommunication affiliatescommunication)
        {
            OnAffiliatesCommunicationCreated(affiliatescommunication);

            var existingItem = Context.AffiliatesCommunications
                              .Where(i => i.Id == affiliatescommunication.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AffiliatesCommunications.Add(affiliatescommunication);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(affiliatescommunication).State = EntityState.Detached;
                throw;
            }

            OnAfterAffiliatesCommunicationCreated(affiliatescommunication);

            return affiliatescommunication;
        }

        public async Task<Destination.Models.destinationTest.AffiliatesCommunication> CancelAffiliatesCommunicationChanges(Destination.Models.destinationTest.AffiliatesCommunication item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAffiliatesCommunicationUpdated(Destination.Models.destinationTest.AffiliatesCommunication item);
        partial void OnAfterAffiliatesCommunicationUpdated(Destination.Models.destinationTest.AffiliatesCommunication item);

        public async Task<Destination.Models.destinationTest.AffiliatesCommunication> UpdateAffiliatesCommunication(int id, Destination.Models.destinationTest.AffiliatesCommunication affiliatescommunication)
        {
            OnAffiliatesCommunicationUpdated(affiliatescommunication);

            var itemToUpdate = Context.AffiliatesCommunications
                              .Where(i => i.Id == affiliatescommunication.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(affiliatescommunication);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAffiliatesCommunicationUpdated(affiliatescommunication);

            return affiliatescommunication;
        }

        partial void OnAffiliatesCommunicationDeleted(Destination.Models.destinationTest.AffiliatesCommunication item);
        partial void OnAfterAffiliatesCommunicationDeleted(Destination.Models.destinationTest.AffiliatesCommunication item);

        public async Task<Destination.Models.destinationTest.AffiliatesCommunication> DeleteAffiliatesCommunication(int id)
        {
            var itemToDelete = Context.AffiliatesCommunications
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAffiliatesCommunicationDeleted(itemToDelete);


            Context.AffiliatesCommunications.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAffiliatesCommunicationDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAffiliatesDataToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatesdata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatesdata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAffiliatesDataToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatesdata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatesdata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAffiliatesDataRead(ref IQueryable<Destination.Models.destinationTest.AffiliatesDatum> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AffiliatesDatum>> GetAffiliatesData(Query query = null)
        {
            var items = Context.AffiliatesData.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAffiliatesDataRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportAffiliatesPropertyViewHistoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatespropertyviewhistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatespropertyviewhistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAffiliatesPropertyViewHistoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatespropertyviewhistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatespropertyviewhistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAffiliatesPropertyViewHistoriesRead(ref IQueryable<Destination.Models.destinationTest.AffiliatesPropertyViewHistory> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AffiliatesPropertyViewHistory>> GetAffiliatesPropertyViewHistories(Query query = null)
        {
            var items = Context.AffiliatesPropertyViewHistories.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAffiliatesPropertyViewHistoriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAffiliatesPropertyViewHistoryGet(Destination.Models.destinationTest.AffiliatesPropertyViewHistory item);
        partial void OnGetAffiliatesPropertyViewHistoryById(ref IQueryable<Destination.Models.destinationTest.AffiliatesPropertyViewHistory> items);


        public async Task<Destination.Models.destinationTest.AffiliatesPropertyViewHistory> GetAffiliatesPropertyViewHistoryById(int id)
        {
            var items = Context.AffiliatesPropertyViewHistories
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetAffiliatesPropertyViewHistoryById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAffiliatesPropertyViewHistoryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAffiliatesPropertyViewHistoryCreated(Destination.Models.destinationTest.AffiliatesPropertyViewHistory item);
        partial void OnAfterAffiliatesPropertyViewHistoryCreated(Destination.Models.destinationTest.AffiliatesPropertyViewHistory item);

        public async Task<Destination.Models.destinationTest.AffiliatesPropertyViewHistory> CreateAffiliatesPropertyViewHistory(Destination.Models.destinationTest.AffiliatesPropertyViewHistory affiliatespropertyviewhistory)
        {
            OnAffiliatesPropertyViewHistoryCreated(affiliatespropertyviewhistory);

            var existingItem = Context.AffiliatesPropertyViewHistories
                              .Where(i => i.Id == affiliatespropertyviewhistory.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AffiliatesPropertyViewHistories.Add(affiliatespropertyviewhistory);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(affiliatespropertyviewhistory).State = EntityState.Detached;
                throw;
            }

            OnAfterAffiliatesPropertyViewHistoryCreated(affiliatespropertyviewhistory);

            return affiliatespropertyviewhistory;
        }

        public async Task<Destination.Models.destinationTest.AffiliatesPropertyViewHistory> CancelAffiliatesPropertyViewHistoryChanges(Destination.Models.destinationTest.AffiliatesPropertyViewHistory item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAffiliatesPropertyViewHistoryUpdated(Destination.Models.destinationTest.AffiliatesPropertyViewHistory item);
        partial void OnAfterAffiliatesPropertyViewHistoryUpdated(Destination.Models.destinationTest.AffiliatesPropertyViewHistory item);

        public async Task<Destination.Models.destinationTest.AffiliatesPropertyViewHistory> UpdateAffiliatesPropertyViewHistory(int id, Destination.Models.destinationTest.AffiliatesPropertyViewHistory affiliatespropertyviewhistory)
        {
            OnAffiliatesPropertyViewHistoryUpdated(affiliatespropertyviewhistory);

            var itemToUpdate = Context.AffiliatesPropertyViewHistories
                              .Where(i => i.Id == affiliatespropertyviewhistory.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(affiliatespropertyviewhistory);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAffiliatesPropertyViewHistoryUpdated(affiliatespropertyviewhistory);

            return affiliatespropertyviewhistory;
        }

        partial void OnAffiliatesPropertyViewHistoryDeleted(Destination.Models.destinationTest.AffiliatesPropertyViewHistory item);
        partial void OnAfterAffiliatesPropertyViewHistoryDeleted(Destination.Models.destinationTest.AffiliatesPropertyViewHistory item);

        public async Task<Destination.Models.destinationTest.AffiliatesPropertyViewHistory> DeleteAffiliatesPropertyViewHistory(int id)
        {
            var itemToDelete = Context.AffiliatesPropertyViewHistories
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAffiliatesPropertyViewHistoryDeleted(itemToDelete);


            Context.AffiliatesPropertyViewHistories.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAffiliatesPropertyViewHistoryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAffiliatesTypesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatestypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatestypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAffiliatesTypesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/affiliatestypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/affiliatestypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAffiliatesTypesRead(ref IQueryable<Destination.Models.destinationTest.AffiliatesType> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AffiliatesType>> GetAffiliatesTypes(Query query = null)
        {
            var items = Context.AffiliatesTypes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAffiliatesTypesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAffiliatesTypeGet(Destination.Models.destinationTest.AffiliatesType item);
        partial void OnGetAffiliatesTypeById(ref IQueryable<Destination.Models.destinationTest.AffiliatesType> items);


        public async Task<Destination.Models.destinationTest.AffiliatesType> GetAffiliatesTypeById(int id)
        {
            var items = Context.AffiliatesTypes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetAffiliatesTypeById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAffiliatesTypeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAffiliatesTypeCreated(Destination.Models.destinationTest.AffiliatesType item);
        partial void OnAfterAffiliatesTypeCreated(Destination.Models.destinationTest.AffiliatesType item);

        public async Task<Destination.Models.destinationTest.AffiliatesType> CreateAffiliatesType(Destination.Models.destinationTest.AffiliatesType affiliatestype)
        {
            OnAffiliatesTypeCreated(affiliatestype);

            var existingItem = Context.AffiliatesTypes
                              .Where(i => i.Id == affiliatestype.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AffiliatesTypes.Add(affiliatestype);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(affiliatestype).State = EntityState.Detached;
                throw;
            }

            OnAfterAffiliatesTypeCreated(affiliatestype);

            return affiliatestype;
        }

        public async Task<Destination.Models.destinationTest.AffiliatesType> CancelAffiliatesTypeChanges(Destination.Models.destinationTest.AffiliatesType item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAffiliatesTypeUpdated(Destination.Models.destinationTest.AffiliatesType item);
        partial void OnAfterAffiliatesTypeUpdated(Destination.Models.destinationTest.AffiliatesType item);

        public async Task<Destination.Models.destinationTest.AffiliatesType> UpdateAffiliatesType(int id, Destination.Models.destinationTest.AffiliatesType affiliatestype)
        {
            OnAffiliatesTypeUpdated(affiliatestype);

            var itemToUpdate = Context.AffiliatesTypes
                              .Where(i => i.Id == affiliatestype.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(affiliatestype);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAffiliatesTypeUpdated(affiliatestype);

            return affiliatestype;
        }

        partial void OnAffiliatesTypeDeleted(Destination.Models.destinationTest.AffiliatesType item);
        partial void OnAfterAffiliatesTypeDeleted(Destination.Models.destinationTest.AffiliatesType item);

        public async Task<Destination.Models.destinationTest.AffiliatesType> DeleteAffiliatesType(int id)
        {
            var itemToDelete = Context.AffiliatesTypes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAffiliatesTypeDeleted(itemToDelete);


            Context.AffiliatesTypes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAffiliatesTypeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAgentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAgentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAgentsRead(ref IQueryable<Destination.Models.destinationTest.Agent> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Agent>> GetAgents(Query query = null)
        {
            var items = Context.Agents.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAgentsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAgentGet(Destination.Models.destinationTest.Agent item);
        partial void OnGetAgentByAgId(ref IQueryable<Destination.Models.destinationTest.Agent> items);


        public async Task<Destination.Models.destinationTest.Agent> GetAgentByAgId(int agid)
        {
            var items = Context.Agents
                              .AsNoTracking()
                              .Where(i => i.AgId == agid);

 
            OnGetAgentByAgId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAgentGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAgentCreated(Destination.Models.destinationTest.Agent item);
        partial void OnAfterAgentCreated(Destination.Models.destinationTest.Agent item);

        public async Task<Destination.Models.destinationTest.Agent> CreateAgent(Destination.Models.destinationTest.Agent agent)
        {
            OnAgentCreated(agent);

            var existingItem = Context.Agents
                              .Where(i => i.AgId == agent.AgId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Agents.Add(agent);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(agent).State = EntityState.Detached;
                throw;
            }

            OnAfterAgentCreated(agent);

            return agent;
        }

        public async Task<Destination.Models.destinationTest.Agent> CancelAgentChanges(Destination.Models.destinationTest.Agent item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAgentUpdated(Destination.Models.destinationTest.Agent item);
        partial void OnAfterAgentUpdated(Destination.Models.destinationTest.Agent item);

        public async Task<Destination.Models.destinationTest.Agent> UpdateAgent(int agid, Destination.Models.destinationTest.Agent agent)
        {
            OnAgentUpdated(agent);

            var itemToUpdate = Context.Agents
                              .Where(i => i.AgId == agent.AgId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(agent);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAgentUpdated(agent);

            return agent;
        }

        partial void OnAgentDeleted(Destination.Models.destinationTest.Agent item);
        partial void OnAfterAgentDeleted(Destination.Models.destinationTest.Agent item);

        public async Task<Destination.Models.destinationTest.Agent> DeleteAgent(int agid)
        {
            var itemToDelete = Context.Agents
                              .Where(i => i.AgId == agid)
                              .Include(i => i.OwnerCommunications)
                              .Include(i => i.Properties)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAgentDeleted(itemToDelete);


            Context.Agents.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAgentDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAgentstatsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agentstats/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agentstats/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAgentstatsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agentstats/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agentstats/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAgentstatsRead(ref IQueryable<Destination.Models.destinationTest.Agentstat> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Agentstat>> GetAgentstats(Query query = null)
        {
            var items = Context.Agentstats.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAgentstatsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAgentstatGet(Destination.Models.destinationTest.Agentstat item);
        partial void OnGetAgentstatById(ref IQueryable<Destination.Models.destinationTest.Agentstat> items);


        public async Task<Destination.Models.destinationTest.Agentstat> GetAgentstatById(int id)
        {
            var items = Context.Agentstats
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetAgentstatById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAgentstatGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAgentstatCreated(Destination.Models.destinationTest.Agentstat item);
        partial void OnAfterAgentstatCreated(Destination.Models.destinationTest.Agentstat item);

        public async Task<Destination.Models.destinationTest.Agentstat> CreateAgentstat(Destination.Models.destinationTest.Agentstat agentstat)
        {
            OnAgentstatCreated(agentstat);

            var existingItem = Context.Agentstats
                              .Where(i => i.Id == agentstat.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Agentstats.Add(agentstat);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(agentstat).State = EntityState.Detached;
                throw;
            }

            OnAfterAgentstatCreated(agentstat);

            return agentstat;
        }

        public async Task<Destination.Models.destinationTest.Agentstat> CancelAgentstatChanges(Destination.Models.destinationTest.Agentstat item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAgentstatUpdated(Destination.Models.destinationTest.Agentstat item);
        partial void OnAfterAgentstatUpdated(Destination.Models.destinationTest.Agentstat item);

        public async Task<Destination.Models.destinationTest.Agentstat> UpdateAgentstat(int id, Destination.Models.destinationTest.Agentstat agentstat)
        {
            OnAgentstatUpdated(agentstat);

            var itemToUpdate = Context.Agentstats
                              .Where(i => i.Id == agentstat.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(agentstat);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAgentstatUpdated(agentstat);

            return agentstat;
        }

        partial void OnAgentstatDeleted(Destination.Models.destinationTest.Agentstat item);
        partial void OnAfterAgentstatDeleted(Destination.Models.destinationTest.Agentstat item);

        public async Task<Destination.Models.destinationTest.Agentstat> DeleteAgentstat(int id)
        {
            var itemToDelete = Context.Agentstats
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAgentstatDeleted(itemToDelete);


            Context.Agentstats.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAgentstatDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAgentStatusesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agentstatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agentstatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAgentStatusesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agentstatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agentstatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAgentStatusesRead(ref IQueryable<Destination.Models.destinationTest.AgentStatus> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AgentStatus>> GetAgentStatuses(Query query = null)
        {
            var items = Context.AgentStatuses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAgentStatusesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAgentStatusGet(Destination.Models.destinationTest.AgentStatus item);
        partial void OnGetAgentStatusByStatusid(ref IQueryable<Destination.Models.destinationTest.AgentStatus> items);


        public async Task<Destination.Models.destinationTest.AgentStatus> GetAgentStatusByStatusid(int statusid)
        {
            var items = Context.AgentStatuses
                              .AsNoTracking()
                              .Where(i => i.Statusid == statusid);

 
            OnGetAgentStatusByStatusid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAgentStatusGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAgentStatusCreated(Destination.Models.destinationTest.AgentStatus item);
        partial void OnAfterAgentStatusCreated(Destination.Models.destinationTest.AgentStatus item);

        public async Task<Destination.Models.destinationTest.AgentStatus> CreateAgentStatus(Destination.Models.destinationTest.AgentStatus agentstatus)
        {
            OnAgentStatusCreated(agentstatus);

            var existingItem = Context.AgentStatuses
                              .Where(i => i.Statusid == agentstatus.Statusid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AgentStatuses.Add(agentstatus);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(agentstatus).State = EntityState.Detached;
                throw;
            }

            OnAfterAgentStatusCreated(agentstatus);

            return agentstatus;
        }

        public async Task<Destination.Models.destinationTest.AgentStatus> CancelAgentStatusChanges(Destination.Models.destinationTest.AgentStatus item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAgentStatusUpdated(Destination.Models.destinationTest.AgentStatus item);
        partial void OnAfterAgentStatusUpdated(Destination.Models.destinationTest.AgentStatus item);

        public async Task<Destination.Models.destinationTest.AgentStatus> UpdateAgentStatus(int statusid, Destination.Models.destinationTest.AgentStatus agentstatus)
        {
            OnAgentStatusUpdated(agentstatus);

            var itemToUpdate = Context.AgentStatuses
                              .Where(i => i.Statusid == agentstatus.Statusid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(agentstatus);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAgentStatusUpdated(agentstatus);

            return agentstatus;
        }

        partial void OnAgentStatusDeleted(Destination.Models.destinationTest.AgentStatus item);
        partial void OnAfterAgentStatusDeleted(Destination.Models.destinationTest.AgentStatus item);

        public async Task<Destination.Models.destinationTest.AgentStatus> DeleteAgentStatus(int statusid)
        {
            var itemToDelete = Context.AgentStatuses
                              .Where(i => i.Statusid == statusid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAgentStatusDeleted(itemToDelete);


            Context.AgentStatuses.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAgentStatusDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAgreementContentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agreementcontents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agreementcontents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAgreementContentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agreementcontents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agreementcontents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAgreementContentsRead(ref IQueryable<Destination.Models.destinationTest.AgreementContent> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AgreementContent>> GetAgreementContents(Query query = null)
        {
            var items = Context.AgreementContents.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAgreementContentsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAgreementContentGet(Destination.Models.destinationTest.AgreementContent item);
        partial void OnGetAgreementContentByContentId(ref IQueryable<Destination.Models.destinationTest.AgreementContent> items);


        public async Task<Destination.Models.destinationTest.AgreementContent> GetAgreementContentByContentId(int contentid)
        {
            var items = Context.AgreementContents
                              .AsNoTracking()
                              .Where(i => i.ContentId == contentid);

 
            OnGetAgreementContentByContentId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAgreementContentGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAgreementContentCreated(Destination.Models.destinationTest.AgreementContent item);
        partial void OnAfterAgreementContentCreated(Destination.Models.destinationTest.AgreementContent item);

        public async Task<Destination.Models.destinationTest.AgreementContent> CreateAgreementContent(Destination.Models.destinationTest.AgreementContent agreementcontent)
        {
            OnAgreementContentCreated(agreementcontent);

            var existingItem = Context.AgreementContents
                              .Where(i => i.ContentId == agreementcontent.ContentId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AgreementContents.Add(agreementcontent);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(agreementcontent).State = EntityState.Detached;
                throw;
            }

            OnAfterAgreementContentCreated(agreementcontent);

            return agreementcontent;
        }

        public async Task<Destination.Models.destinationTest.AgreementContent> CancelAgreementContentChanges(Destination.Models.destinationTest.AgreementContent item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAgreementContentUpdated(Destination.Models.destinationTest.AgreementContent item);
        partial void OnAfterAgreementContentUpdated(Destination.Models.destinationTest.AgreementContent item);

        public async Task<Destination.Models.destinationTest.AgreementContent> UpdateAgreementContent(int contentid, Destination.Models.destinationTest.AgreementContent agreementcontent)
        {
            OnAgreementContentUpdated(agreementcontent);

            var itemToUpdate = Context.AgreementContents
                              .Where(i => i.ContentId == agreementcontent.ContentId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(agreementcontent);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAgreementContentUpdated(agreementcontent);

            return agreementcontent;
        }

        partial void OnAgreementContentDeleted(Destination.Models.destinationTest.AgreementContent item);
        partial void OnAfterAgreementContentDeleted(Destination.Models.destinationTest.AgreementContent item);

        public async Task<Destination.Models.destinationTest.AgreementContent> DeleteAgreementContent(int contentid)
        {
            var itemToDelete = Context.AgreementContents
                              .Where(i => i.ContentId == contentid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAgreementContentDeleted(itemToDelete);


            Context.AgreementContents.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAgreementContentDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAgreementHistoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agreementhistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agreementhistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAgreementHistoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/agreementhistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/agreementhistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAgreementHistoriesRead(ref IQueryable<Destination.Models.destinationTest.AgreementHistory> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AgreementHistory>> GetAgreementHistories(Query query = null)
        {
            var items = Context.AgreementHistories.AsQueryable();

            items = items.Include(i => i.Booking);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAgreementHistoriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAgreementHistoryGet(Destination.Models.destinationTest.AgreementHistory item);
        partial void OnGetAgreementHistoryById(ref IQueryable<Destination.Models.destinationTest.AgreementHistory> items);


        public async Task<Destination.Models.destinationTest.AgreementHistory> GetAgreementHistoryById(int id)
        {
            var items = Context.AgreementHistories
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Booking);
 
            OnGetAgreementHistoryById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAgreementHistoryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAgreementHistoryCreated(Destination.Models.destinationTest.AgreementHistory item);
        partial void OnAfterAgreementHistoryCreated(Destination.Models.destinationTest.AgreementHistory item);

        public async Task<Destination.Models.destinationTest.AgreementHistory> CreateAgreementHistory(Destination.Models.destinationTest.AgreementHistory agreementhistory)
        {
            OnAgreementHistoryCreated(agreementhistory);

            var existingItem = Context.AgreementHistories
                              .Where(i => i.Id == agreementhistory.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AgreementHistories.Add(agreementhistory);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(agreementhistory).State = EntityState.Detached;
                throw;
            }

            OnAfterAgreementHistoryCreated(agreementhistory);

            return agreementhistory;
        }

        public async Task<Destination.Models.destinationTest.AgreementHistory> CancelAgreementHistoryChanges(Destination.Models.destinationTest.AgreementHistory item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAgreementHistoryUpdated(Destination.Models.destinationTest.AgreementHistory item);
        partial void OnAfterAgreementHistoryUpdated(Destination.Models.destinationTest.AgreementHistory item);

        public async Task<Destination.Models.destinationTest.AgreementHistory> UpdateAgreementHistory(int id, Destination.Models.destinationTest.AgreementHistory agreementhistory)
        {
            OnAgreementHistoryUpdated(agreementhistory);

            var itemToUpdate = Context.AgreementHistories
                              .Where(i => i.Id == agreementhistory.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(agreementhistory);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAgreementHistoryUpdated(agreementhistory);

            return agreementhistory;
        }

        partial void OnAgreementHistoryDeleted(Destination.Models.destinationTest.AgreementHistory item);
        partial void OnAfterAgreementHistoryDeleted(Destination.Models.destinationTest.AgreementHistory item);

        public async Task<Destination.Models.destinationTest.AgreementHistory> DeleteAgreementHistory(int id)
        {
            var itemToDelete = Context.AgreementHistories
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAgreementHistoryDeleted(itemToDelete);


            Context.AgreementHistories.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAgreementHistoryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAirbnbApiAutoSyncContentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbapiautosynccontents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbapiautosynccontents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAirbnbApiAutoSyncContentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbapiautosynccontents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbapiautosynccontents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAirbnbApiAutoSyncContentsRead(ref IQueryable<Destination.Models.destinationTest.AirbnbApiAutoSyncContent> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AirbnbApiAutoSyncContent>> GetAirbnbApiAutoSyncContents(Query query = null)
        {
            var items = Context.AirbnbApiAutoSyncContents.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAirbnbApiAutoSyncContentsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportAirbnbApicredentialsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbapicredentials/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbapicredentials/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAirbnbApicredentialsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbapicredentials/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbapicredentials/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAirbnbApicredentialsRead(ref IQueryable<Destination.Models.destinationTest.AirbnbApicredential> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AirbnbApicredential>> GetAirbnbApicredentials(Query query = null)
        {
            var items = Context.AirbnbApicredentials.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAirbnbApicredentialsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportAirbnbApireservationsJsonsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbapireservationsjsons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbapireservationsjsons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAirbnbApireservationsJsonsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbapireservationsjsons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbapireservationsjsons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAirbnbApireservationsJsonsRead(ref IQueryable<Destination.Models.destinationTest.AirbnbApireservationsJson> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AirbnbApireservationsJson>> GetAirbnbApireservationsJsons(Query query = null)
        {
            var items = Context.AirbnbApireservationsJsons.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAirbnbApireservationsJsonsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportAirBnbExportsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbexports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbexports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAirBnbExportsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbexports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbexports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAirBnbExportsRead(ref IQueryable<Destination.Models.destinationTest.AirBnbExport> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AirBnbExport>> GetAirBnbExports(Query query = null)
        {
            var items = Context.AirBnbExports.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAirBnbExportsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAirBnbExportGet(Destination.Models.destinationTest.AirBnbExport item);
        partial void OnGetAirBnbExportById(ref IQueryable<Destination.Models.destinationTest.AirBnbExport> items);


        public async Task<Destination.Models.destinationTest.AirBnbExport> GetAirBnbExportById(int id)
        {
            var items = Context.AirBnbExports
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetAirBnbExportById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAirBnbExportGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAirBnbExportCreated(Destination.Models.destinationTest.AirBnbExport item);
        partial void OnAfterAirBnbExportCreated(Destination.Models.destinationTest.AirBnbExport item);

        public async Task<Destination.Models.destinationTest.AirBnbExport> CreateAirBnbExport(Destination.Models.destinationTest.AirBnbExport airbnbexport)
        {
            OnAirBnbExportCreated(airbnbexport);

            var existingItem = Context.AirBnbExports
                              .Where(i => i.Id == airbnbexport.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AirBnbExports.Add(airbnbexport);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(airbnbexport).State = EntityState.Detached;
                throw;
            }

            OnAfterAirBnbExportCreated(airbnbexport);

            return airbnbexport;
        }

        public async Task<Destination.Models.destinationTest.AirBnbExport> CancelAirBnbExportChanges(Destination.Models.destinationTest.AirBnbExport item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAirBnbExportUpdated(Destination.Models.destinationTest.AirBnbExport item);
        partial void OnAfterAirBnbExportUpdated(Destination.Models.destinationTest.AirBnbExport item);

        public async Task<Destination.Models.destinationTest.AirBnbExport> UpdateAirBnbExport(int id, Destination.Models.destinationTest.AirBnbExport airbnbexport)
        {
            OnAirBnbExportUpdated(airbnbexport);

            var itemToUpdate = Context.AirBnbExports
                              .Where(i => i.Id == airbnbexport.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(airbnbexport);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAirBnbExportUpdated(airbnbexport);

            return airbnbexport;
        }

        partial void OnAirBnbExportDeleted(Destination.Models.destinationTest.AirBnbExport item);
        partial void OnAfterAirBnbExportDeleted(Destination.Models.destinationTest.AirBnbExport item);

        public async Task<Destination.Models.destinationTest.AirBnbExport> DeleteAirBnbExport(int id)
        {
            var itemToDelete = Context.AirBnbExports
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAirBnbExportDeleted(itemToDelete);


            Context.AirBnbExports.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAirBnbExportDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAirbnbIcalsUpdateTrackingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbicalsupdatetrackings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbicalsupdatetrackings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAirbnbIcalsUpdateTrackingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbicalsupdatetrackings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbicalsupdatetrackings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAirbnbIcalsUpdateTrackingsRead(ref IQueryable<Destination.Models.destinationTest.AirbnbIcalsUpdateTracking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AirbnbIcalsUpdateTracking>> GetAirbnbIcalsUpdateTrackings(Query query = null)
        {
            var items = Context.AirbnbIcalsUpdateTrackings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAirbnbIcalsUpdateTrackingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportAirbnbMessagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbmessages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbmessages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAirbnbMessagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbmessages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbmessages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAirbnbMessagesRead(ref IQueryable<Destination.Models.destinationTest.AirbnbMessage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AirbnbMessage>> GetAirbnbMessages(Query query = null)
        {
            var items = Context.AirbnbMessages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAirbnbMessagesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportAirbnbSendMessagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbsendmessages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbsendmessages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAirbnbSendMessagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbsendmessages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbsendmessages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAirbnbSendMessagesRead(ref IQueryable<Destination.Models.destinationTest.AirbnbSendMessage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AirbnbSendMessage>> GetAirbnbSendMessages(Query query = null)
        {
            var items = Context.AirbnbSendMessages.AsQueryable();

            items = items.Include(i => i.Booking);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAirbnbSendMessagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAirbnbSendMessageGet(Destination.Models.destinationTest.AirbnbSendMessage item);
        partial void OnGetAirbnbSendMessageById(ref IQueryable<Destination.Models.destinationTest.AirbnbSendMessage> items);


        public async Task<Destination.Models.destinationTest.AirbnbSendMessage> GetAirbnbSendMessageById(int id)
        {
            var items = Context.AirbnbSendMessages
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Booking);
 
            OnGetAirbnbSendMessageById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAirbnbSendMessageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAirbnbSendMessageCreated(Destination.Models.destinationTest.AirbnbSendMessage item);
        partial void OnAfterAirbnbSendMessageCreated(Destination.Models.destinationTest.AirbnbSendMessage item);

        public async Task<Destination.Models.destinationTest.AirbnbSendMessage> CreateAirbnbSendMessage(Destination.Models.destinationTest.AirbnbSendMessage airbnbsendmessage)
        {
            OnAirbnbSendMessageCreated(airbnbsendmessage);

            var existingItem = Context.AirbnbSendMessages
                              .Where(i => i.Id == airbnbsendmessage.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AirbnbSendMessages.Add(airbnbsendmessage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(airbnbsendmessage).State = EntityState.Detached;
                throw;
            }

            OnAfterAirbnbSendMessageCreated(airbnbsendmessage);

            return airbnbsendmessage;
        }

        public async Task<Destination.Models.destinationTest.AirbnbSendMessage> CancelAirbnbSendMessageChanges(Destination.Models.destinationTest.AirbnbSendMessage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAirbnbSendMessageUpdated(Destination.Models.destinationTest.AirbnbSendMessage item);
        partial void OnAfterAirbnbSendMessageUpdated(Destination.Models.destinationTest.AirbnbSendMessage item);

        public async Task<Destination.Models.destinationTest.AirbnbSendMessage> UpdateAirbnbSendMessage(int id, Destination.Models.destinationTest.AirbnbSendMessage airbnbsendmessage)
        {
            OnAirbnbSendMessageUpdated(airbnbsendmessage);

            var itemToUpdate = Context.AirbnbSendMessages
                              .Where(i => i.Id == airbnbsendmessage.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(airbnbsendmessage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAirbnbSendMessageUpdated(airbnbsendmessage);

            return airbnbsendmessage;
        }

        partial void OnAirbnbSendMessageDeleted(Destination.Models.destinationTest.AirbnbSendMessage item);
        partial void OnAfterAirbnbSendMessageDeleted(Destination.Models.destinationTest.AirbnbSendMessage item);

        public async Task<Destination.Models.destinationTest.AirbnbSendMessage> DeleteAirbnbSendMessage(int id)
        {
            var itemToDelete = Context.AirbnbSendMessages
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAirbnbSendMessageDeleted(itemToDelete);


            Context.AirbnbSendMessages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAirbnbSendMessageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAirbnbUploadedPhotosToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbuploadedphotos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbuploadedphotos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAirbnbUploadedPhotosToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/airbnbuploadedphotos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/airbnbuploadedphotos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAirbnbUploadedPhotosRead(ref IQueryable<Destination.Models.destinationTest.AirbnbUploadedPhoto> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AirbnbUploadedPhoto>> GetAirbnbUploadedPhotos(Query query = null)
        {
            var items = Context.AirbnbUploadedPhotos.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAirbnbUploadedPhotosRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportAnnualsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/annuals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/annuals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAnnualsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/annuals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/annuals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAnnualsRead(ref IQueryable<Destination.Models.destinationTest.Annual> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Annual>> GetAnnuals(Query query = null)
        {
            var items = Context.Annuals.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAnnualsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportAnnualSurveysToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/annualsurveys/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/annualsurveys/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAnnualSurveysToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/annualsurveys/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/annualsurveys/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAnnualSurveysRead(ref IQueryable<Destination.Models.destinationTest.AnnualSurvey> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AnnualSurvey>> GetAnnualSurveys(Query query = null)
        {
            var items = Context.AnnualSurveys.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAnnualSurveysRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAnnualSurveyGet(Destination.Models.destinationTest.AnnualSurvey item);
        partial void OnGetAnnualSurveyById(ref IQueryable<Destination.Models.destinationTest.AnnualSurvey> items);


        public async Task<Destination.Models.destinationTest.AnnualSurvey> GetAnnualSurveyById(int id)
        {
            var items = Context.AnnualSurveys
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetAnnualSurveyById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAnnualSurveyGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAnnualSurveyCreated(Destination.Models.destinationTest.AnnualSurvey item);
        partial void OnAfterAnnualSurveyCreated(Destination.Models.destinationTest.AnnualSurvey item);

        public async Task<Destination.Models.destinationTest.AnnualSurvey> CreateAnnualSurvey(Destination.Models.destinationTest.AnnualSurvey annualsurvey)
        {
            OnAnnualSurveyCreated(annualsurvey);

            var existingItem = Context.AnnualSurveys
                              .Where(i => i.Id == annualsurvey.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AnnualSurveys.Add(annualsurvey);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(annualsurvey).State = EntityState.Detached;
                throw;
            }

            OnAfterAnnualSurveyCreated(annualsurvey);

            return annualsurvey;
        }

        public async Task<Destination.Models.destinationTest.AnnualSurvey> CancelAnnualSurveyChanges(Destination.Models.destinationTest.AnnualSurvey item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAnnualSurveyUpdated(Destination.Models.destinationTest.AnnualSurvey item);
        partial void OnAfterAnnualSurveyUpdated(Destination.Models.destinationTest.AnnualSurvey item);

        public async Task<Destination.Models.destinationTest.AnnualSurvey> UpdateAnnualSurvey(int id, Destination.Models.destinationTest.AnnualSurvey annualsurvey)
        {
            OnAnnualSurveyUpdated(annualsurvey);

            var itemToUpdate = Context.AnnualSurveys
                              .Where(i => i.Id == annualsurvey.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(annualsurvey);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAnnualSurveyUpdated(annualsurvey);

            return annualsurvey;
        }

        partial void OnAnnualSurveyDeleted(Destination.Models.destinationTest.AnnualSurvey item);
        partial void OnAfterAnnualSurveyDeleted(Destination.Models.destinationTest.AnnualSurvey item);

        public async Task<Destination.Models.destinationTest.AnnualSurvey> DeleteAnnualSurvey(int id)
        {
            var itemToDelete = Context.AnnualSurveys
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAnnualSurveyDeleted(itemToDelete);


            Context.AnnualSurveys.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAnnualSurveyDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAnnualTypesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/annualtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/annualtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAnnualTypesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/annualtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/annualtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAnnualTypesRead(ref IQueryable<Destination.Models.destinationTest.AnnualType> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AnnualType>> GetAnnualTypes(Query query = null)
        {
            var items = Context.AnnualTypes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAnnualTypesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAnnualTypeGet(Destination.Models.destinationTest.AnnualType item);
        partial void OnGetAnnualTypeById(ref IQueryable<Destination.Models.destinationTest.AnnualType> items);


        public async Task<Destination.Models.destinationTest.AnnualType> GetAnnualTypeById(int id)
        {
            var items = Context.AnnualTypes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetAnnualTypeById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAnnualTypeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAnnualTypeCreated(Destination.Models.destinationTest.AnnualType item);
        partial void OnAfterAnnualTypeCreated(Destination.Models.destinationTest.AnnualType item);

        public async Task<Destination.Models.destinationTest.AnnualType> CreateAnnualType(Destination.Models.destinationTest.AnnualType annualtype)
        {
            OnAnnualTypeCreated(annualtype);

            var existingItem = Context.AnnualTypes
                              .Where(i => i.Id == annualtype.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AnnualTypes.Add(annualtype);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(annualtype).State = EntityState.Detached;
                throw;
            }

            OnAfterAnnualTypeCreated(annualtype);

            return annualtype;
        }

        public async Task<Destination.Models.destinationTest.AnnualType> CancelAnnualTypeChanges(Destination.Models.destinationTest.AnnualType item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAnnualTypeUpdated(Destination.Models.destinationTest.AnnualType item);
        partial void OnAfterAnnualTypeUpdated(Destination.Models.destinationTest.AnnualType item);

        public async Task<Destination.Models.destinationTest.AnnualType> UpdateAnnualType(int id, Destination.Models.destinationTest.AnnualType annualtype)
        {
            OnAnnualTypeUpdated(annualtype);

            var itemToUpdate = Context.AnnualTypes
                              .Where(i => i.Id == annualtype.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(annualtype);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAnnualTypeUpdated(annualtype);

            return annualtype;
        }

        partial void OnAnnualTypeDeleted(Destination.Models.destinationTest.AnnualType item);
        partial void OnAfterAnnualTypeDeleted(Destination.Models.destinationTest.AnnualType item);

        public async Task<Destination.Models.destinationTest.AnnualType> DeleteAnnualType(int id)
        {
            var itemToDelete = Context.AnnualTypes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAnnualTypeDeleted(itemToDelete);


            Context.AnnualTypes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAnnualTypeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAppliedPromoCodesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/appliedpromocodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/appliedpromocodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAppliedPromoCodesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/appliedpromocodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/appliedpromocodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAppliedPromoCodesRead(ref IQueryable<Destination.Models.destinationTest.AppliedPromoCode> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AppliedPromoCode>> GetAppliedPromoCodes(Query query = null)
        {
            var items = Context.AppliedPromoCodes.AsQueryable();

            items = items.Include(i => i.Booking);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAppliedPromoCodesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAppliedPromoCodeGet(Destination.Models.destinationTest.AppliedPromoCode item);
        partial void OnGetAppliedPromoCodeById(ref IQueryable<Destination.Models.destinationTest.AppliedPromoCode> items);


        public async Task<Destination.Models.destinationTest.AppliedPromoCode> GetAppliedPromoCodeById(int id)
        {
            var items = Context.AppliedPromoCodes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Booking);
 
            OnGetAppliedPromoCodeById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAppliedPromoCodeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAppliedPromoCodeCreated(Destination.Models.destinationTest.AppliedPromoCode item);
        partial void OnAfterAppliedPromoCodeCreated(Destination.Models.destinationTest.AppliedPromoCode item);

        public async Task<Destination.Models.destinationTest.AppliedPromoCode> CreateAppliedPromoCode(Destination.Models.destinationTest.AppliedPromoCode appliedpromocode)
        {
            OnAppliedPromoCodeCreated(appliedpromocode);

            var existingItem = Context.AppliedPromoCodes
                              .Where(i => i.Id == appliedpromocode.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AppliedPromoCodes.Add(appliedpromocode);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(appliedpromocode).State = EntityState.Detached;
                throw;
            }

            OnAfterAppliedPromoCodeCreated(appliedpromocode);

            return appliedpromocode;
        }

        public async Task<Destination.Models.destinationTest.AppliedPromoCode> CancelAppliedPromoCodeChanges(Destination.Models.destinationTest.AppliedPromoCode item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAppliedPromoCodeUpdated(Destination.Models.destinationTest.AppliedPromoCode item);
        partial void OnAfterAppliedPromoCodeUpdated(Destination.Models.destinationTest.AppliedPromoCode item);

        public async Task<Destination.Models.destinationTest.AppliedPromoCode> UpdateAppliedPromoCode(int id, Destination.Models.destinationTest.AppliedPromoCode appliedpromocode)
        {
            OnAppliedPromoCodeUpdated(appliedpromocode);

            var itemToUpdate = Context.AppliedPromoCodes
                              .Where(i => i.Id == appliedpromocode.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(appliedpromocode);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAppliedPromoCodeUpdated(appliedpromocode);

            return appliedpromocode;
        }

        partial void OnAppliedPromoCodeDeleted(Destination.Models.destinationTest.AppliedPromoCode item);
        partial void OnAfterAppliedPromoCodeDeleted(Destination.Models.destinationTest.AppliedPromoCode item);

        public async Task<Destination.Models.destinationTest.AppliedPromoCode> DeleteAppliedPromoCode(int id)
        {
            var itemToDelete = Context.AppliedPromoCodes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAppliedPromoCodeDeleted(itemToDelete);


            Context.AppliedPromoCodes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAppliedPromoCodeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAutoSmspagesHitPerDaysToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/autosmspageshitperdays/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/autosmspageshitperdays/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAutoSmspagesHitPerDaysToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/autosmspageshitperdays/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/autosmspageshitperdays/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAutoSmspagesHitPerDaysRead(ref IQueryable<Destination.Models.destinationTest.AutoSmspagesHitPerDay> items);

        public async Task<IQueryable<Destination.Models.destinationTest.AutoSmspagesHitPerDay>> GetAutoSmspagesHitPerDays(Query query = null)
        {
            var items = Context.AutoSmspagesHitPerDays.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnAutoSmspagesHitPerDaysRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAutoSmspagesHitPerDayGet(Destination.Models.destinationTest.AutoSmspagesHitPerDay item);
        partial void OnGetAutoSmspagesHitPerDayById(ref IQueryable<Destination.Models.destinationTest.AutoSmspagesHitPerDay> items);


        public async Task<Destination.Models.destinationTest.AutoSmspagesHitPerDay> GetAutoSmspagesHitPerDayById(int id)
        {
            var items = Context.AutoSmspagesHitPerDays
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetAutoSmspagesHitPerDayById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnAutoSmspagesHitPerDayGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAutoSmspagesHitPerDayCreated(Destination.Models.destinationTest.AutoSmspagesHitPerDay item);
        partial void OnAfterAutoSmspagesHitPerDayCreated(Destination.Models.destinationTest.AutoSmspagesHitPerDay item);

        public async Task<Destination.Models.destinationTest.AutoSmspagesHitPerDay> CreateAutoSmspagesHitPerDay(Destination.Models.destinationTest.AutoSmspagesHitPerDay autosmspageshitperday)
        {
            OnAutoSmspagesHitPerDayCreated(autosmspageshitperday);

            var existingItem = Context.AutoSmspagesHitPerDays
                              .Where(i => i.Id == autosmspageshitperday.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AutoSmspagesHitPerDays.Add(autosmspageshitperday);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(autosmspageshitperday).State = EntityState.Detached;
                throw;
            }

            OnAfterAutoSmspagesHitPerDayCreated(autosmspageshitperday);

            return autosmspageshitperday;
        }

        public async Task<Destination.Models.destinationTest.AutoSmspagesHitPerDay> CancelAutoSmspagesHitPerDayChanges(Destination.Models.destinationTest.AutoSmspagesHitPerDay item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAutoSmspagesHitPerDayUpdated(Destination.Models.destinationTest.AutoSmspagesHitPerDay item);
        partial void OnAfterAutoSmspagesHitPerDayUpdated(Destination.Models.destinationTest.AutoSmspagesHitPerDay item);

        public async Task<Destination.Models.destinationTest.AutoSmspagesHitPerDay> UpdateAutoSmspagesHitPerDay(int id, Destination.Models.destinationTest.AutoSmspagesHitPerDay autosmspageshitperday)
        {
            OnAutoSmspagesHitPerDayUpdated(autosmspageshitperday);

            var itemToUpdate = Context.AutoSmspagesHitPerDays
                              .Where(i => i.Id == autosmspageshitperday.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(autosmspageshitperday);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAutoSmspagesHitPerDayUpdated(autosmspageshitperday);

            return autosmspageshitperday;
        }

        partial void OnAutoSmspagesHitPerDayDeleted(Destination.Models.destinationTest.AutoSmspagesHitPerDay item);
        partial void OnAfterAutoSmspagesHitPerDayDeleted(Destination.Models.destinationTest.AutoSmspagesHitPerDay item);

        public async Task<Destination.Models.destinationTest.AutoSmspagesHitPerDay> DeleteAutoSmspagesHitPerDay(int id)
        {
            var itemToDelete = Context.AutoSmspagesHitPerDays
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAutoSmspagesHitPerDayDeleted(itemToDelete);


            Context.AutoSmspagesHitPerDays.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAutoSmspagesHitPerDayDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBedcountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bedcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bedcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBedcountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bedcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bedcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBedcountsRead(ref IQueryable<Destination.Models.destinationTest.Bedcount> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Bedcount>> GetBedcounts(Query query = null)
        {
            var items = Context.Bedcounts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBedcountsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBedcountGet(Destination.Models.destinationTest.Bedcount item);
        partial void OnGetBedcountByBedcountid(ref IQueryable<Destination.Models.destinationTest.Bedcount> items);


        public async Task<Destination.Models.destinationTest.Bedcount> GetBedcountByBedcountid(int bedcountid)
        {
            var items = Context.Bedcounts
                              .AsNoTracking()
                              .Where(i => i.Bedcountid == bedcountid);

 
            OnGetBedcountByBedcountid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBedcountGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBedcountCreated(Destination.Models.destinationTest.Bedcount item);
        partial void OnAfterBedcountCreated(Destination.Models.destinationTest.Bedcount item);

        public async Task<Destination.Models.destinationTest.Bedcount> CreateBedcount(Destination.Models.destinationTest.Bedcount bedcount)
        {
            OnBedcountCreated(bedcount);

            var existingItem = Context.Bedcounts
                              .Where(i => i.Bedcountid == bedcount.Bedcountid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Bedcounts.Add(bedcount);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bedcount).State = EntityState.Detached;
                throw;
            }

            OnAfterBedcountCreated(bedcount);

            return bedcount;
        }

        public async Task<Destination.Models.destinationTest.Bedcount> CancelBedcountChanges(Destination.Models.destinationTest.Bedcount item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBedcountUpdated(Destination.Models.destinationTest.Bedcount item);
        partial void OnAfterBedcountUpdated(Destination.Models.destinationTest.Bedcount item);

        public async Task<Destination.Models.destinationTest.Bedcount> UpdateBedcount(int bedcountid, Destination.Models.destinationTest.Bedcount bedcount)
        {
            OnBedcountUpdated(bedcount);

            var itemToUpdate = Context.Bedcounts
                              .Where(i => i.Bedcountid == bedcount.Bedcountid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bedcount);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBedcountUpdated(bedcount);

            return bedcount;
        }

        partial void OnBedcountDeleted(Destination.Models.destinationTest.Bedcount item);
        partial void OnAfterBedcountDeleted(Destination.Models.destinationTest.Bedcount item);

        public async Task<Destination.Models.destinationTest.Bedcount> DeleteBedcount(int bedcountid)
        {
            var itemToDelete = Context.Bedcounts
                              .Where(i => i.Bedcountid == bedcountid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBedcountDeleted(itemToDelete);


            Context.Bedcounts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBedcountDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingStatusesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingstatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingstatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingStatusesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingstatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingstatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingStatusesRead(ref IQueryable<Destination.Models.destinationTest.BookingStatus> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingStatus>> GetBookingStatuses(Query query = null)
        {
            var items = Context.BookingStatuses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingStatusesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingStatusGet(Destination.Models.destinationTest.BookingStatus item);
        partial void OnGetBookingStatusById(ref IQueryable<Destination.Models.destinationTest.BookingStatus> items);


        public async Task<Destination.Models.destinationTest.BookingStatus> GetBookingStatusById(int id)
        {
            var items = Context.BookingStatuses
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetBookingStatusById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingStatusGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingStatusCreated(Destination.Models.destinationTest.BookingStatus item);
        partial void OnAfterBookingStatusCreated(Destination.Models.destinationTest.BookingStatus item);

        public async Task<Destination.Models.destinationTest.BookingStatus> CreateBookingStatus(Destination.Models.destinationTest.BookingStatus bookingstatus)
        {
            OnBookingStatusCreated(bookingstatus);

            var existingItem = Context.BookingStatuses
                              .Where(i => i.Id == bookingstatus.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingStatuses.Add(bookingstatus);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingstatus).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingStatusCreated(bookingstatus);

            return bookingstatus;
        }

        public async Task<Destination.Models.destinationTest.BookingStatus> CancelBookingStatusChanges(Destination.Models.destinationTest.BookingStatus item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingStatusUpdated(Destination.Models.destinationTest.BookingStatus item);
        partial void OnAfterBookingStatusUpdated(Destination.Models.destinationTest.BookingStatus item);

        public async Task<Destination.Models.destinationTest.BookingStatus> UpdateBookingStatus(int id, Destination.Models.destinationTest.BookingStatus bookingstatus)
        {
            OnBookingStatusUpdated(bookingstatus);

            var itemToUpdate = Context.BookingStatuses
                              .Where(i => i.Id == bookingstatus.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingstatus);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingStatusUpdated(bookingstatus);

            return bookingstatus;
        }

        partial void OnBookingStatusDeleted(Destination.Models.destinationTest.BookingStatus item);
        partial void OnAfterBookingStatusDeleted(Destination.Models.destinationTest.BookingStatus item);

        public async Task<Destination.Models.destinationTest.BookingStatus> DeleteBookingStatus(int id)
        {
            var itemToDelete = Context.BookingStatuses
                              .Where(i => i.Id == id)
                              .Include(i => i.Bookings)
                              .Include(i => i.FilterDataForBulkSmsMails)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingStatusDeleted(itemToDelete);


            Context.BookingStatuses.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingStatusDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingStatus1SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingstatus1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingstatus1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingStatus1SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingstatus1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingstatus1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingStatus1SRead(ref IQueryable<Destination.Models.destinationTest.BookingStatus1> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingStatus1>> GetBookingStatus1S(Query query = null)
        {
            var items = Context.BookingStatus1S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingStatus1SRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportBookingAddOwnerReportsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingaddownerreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingaddownerreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingAddOwnerReportsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingaddownerreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingaddownerreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingAddOwnerReportsRead(ref IQueryable<Destination.Models.destinationTest.BookingAddOwnerReport> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingAddOwnerReport>> GetBookingAddOwnerReports(Query query = null)
        {
            var items = Context.BookingAddOwnerReports.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingAddOwnerReportsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingAddOwnerReportGet(Destination.Models.destinationTest.BookingAddOwnerReport item);
        partial void OnGetBookingAddOwnerReportById(ref IQueryable<Destination.Models.destinationTest.BookingAddOwnerReport> items);


        public async Task<Destination.Models.destinationTest.BookingAddOwnerReport> GetBookingAddOwnerReportById(long id)
        {
            var items = Context.BookingAddOwnerReports
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetBookingAddOwnerReportById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingAddOwnerReportGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingAddOwnerReportCreated(Destination.Models.destinationTest.BookingAddOwnerReport item);
        partial void OnAfterBookingAddOwnerReportCreated(Destination.Models.destinationTest.BookingAddOwnerReport item);

        public async Task<Destination.Models.destinationTest.BookingAddOwnerReport> CreateBookingAddOwnerReport(Destination.Models.destinationTest.BookingAddOwnerReport bookingaddownerreport)
        {
            OnBookingAddOwnerReportCreated(bookingaddownerreport);

            var existingItem = Context.BookingAddOwnerReports
                              .Where(i => i.Id == bookingaddownerreport.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingAddOwnerReports.Add(bookingaddownerreport);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingaddownerreport).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingAddOwnerReportCreated(bookingaddownerreport);

            return bookingaddownerreport;
        }

        public async Task<Destination.Models.destinationTest.BookingAddOwnerReport> CancelBookingAddOwnerReportChanges(Destination.Models.destinationTest.BookingAddOwnerReport item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingAddOwnerReportUpdated(Destination.Models.destinationTest.BookingAddOwnerReport item);
        partial void OnAfterBookingAddOwnerReportUpdated(Destination.Models.destinationTest.BookingAddOwnerReport item);

        public async Task<Destination.Models.destinationTest.BookingAddOwnerReport> UpdateBookingAddOwnerReport(long id, Destination.Models.destinationTest.BookingAddOwnerReport bookingaddownerreport)
        {
            OnBookingAddOwnerReportUpdated(bookingaddownerreport);

            var itemToUpdate = Context.BookingAddOwnerReports
                              .Where(i => i.Id == bookingaddownerreport.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingaddownerreport);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingAddOwnerReportUpdated(bookingaddownerreport);

            return bookingaddownerreport;
        }

        partial void OnBookingAddOwnerReportDeleted(Destination.Models.destinationTest.BookingAddOwnerReport item);
        partial void OnAfterBookingAddOwnerReportDeleted(Destination.Models.destinationTest.BookingAddOwnerReport item);

        public async Task<Destination.Models.destinationTest.BookingAddOwnerReport> DeleteBookingAddOwnerReport(long id)
        {
            var itemToDelete = Context.BookingAddOwnerReports
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingAddOwnerReportDeleted(itemToDelete);


            Context.BookingAddOwnerReports.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingAddOwnerReportDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingdamagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingdamages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingdamages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingdamagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingdamages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingdamages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingdamagesRead(ref IQueryable<Destination.Models.destinationTest.Bookingdamage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Bookingdamage>> GetBookingdamages(Query query = null)
        {
            var items = Context.Bookingdamages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingdamagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingdamageGet(Destination.Models.destinationTest.Bookingdamage item);
        partial void OnGetBookingdamageById(ref IQueryable<Destination.Models.destinationTest.Bookingdamage> items);


        public async Task<Destination.Models.destinationTest.Bookingdamage> GetBookingdamageById(int id)
        {
            var items = Context.Bookingdamages
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetBookingdamageById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingdamageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingdamageCreated(Destination.Models.destinationTest.Bookingdamage item);
        partial void OnAfterBookingdamageCreated(Destination.Models.destinationTest.Bookingdamage item);

        public async Task<Destination.Models.destinationTest.Bookingdamage> CreateBookingdamage(Destination.Models.destinationTest.Bookingdamage bookingdamage)
        {
            OnBookingdamageCreated(bookingdamage);

            var existingItem = Context.Bookingdamages
                              .Where(i => i.Id == bookingdamage.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Bookingdamages.Add(bookingdamage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingdamage).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingdamageCreated(bookingdamage);

            return bookingdamage;
        }

        public async Task<Destination.Models.destinationTest.Bookingdamage> CancelBookingdamageChanges(Destination.Models.destinationTest.Bookingdamage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingdamageUpdated(Destination.Models.destinationTest.Bookingdamage item);
        partial void OnAfterBookingdamageUpdated(Destination.Models.destinationTest.Bookingdamage item);

        public async Task<Destination.Models.destinationTest.Bookingdamage> UpdateBookingdamage(int id, Destination.Models.destinationTest.Bookingdamage bookingdamage)
        {
            OnBookingdamageUpdated(bookingdamage);

            var itemToUpdate = Context.Bookingdamages
                              .Where(i => i.Id == bookingdamage.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingdamage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingdamageUpdated(bookingdamage);

            return bookingdamage;
        }

        partial void OnBookingdamageDeleted(Destination.Models.destinationTest.Bookingdamage item);
        partial void OnAfterBookingdamageDeleted(Destination.Models.destinationTest.Bookingdamage item);

        public async Task<Destination.Models.destinationTest.Bookingdamage> DeleteBookingdamage(int id)
        {
            var itemToDelete = Context.Bookingdamages
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingdamageDeleted(itemToDelete);


            Context.Bookingdamages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingdamageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingEmailSettingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingemailsettings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingemailsettings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingEmailSettingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingemailsettings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingemailsettings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingEmailSettingsRead(ref IQueryable<Destination.Models.destinationTest.BookingEmailSetting> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingEmailSetting>> GetBookingEmailSettings(Query query = null)
        {
            var items = Context.BookingEmailSettings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingEmailSettingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportBookingHistoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookinghistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookinghistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingHistoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookinghistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookinghistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingHistoriesRead(ref IQueryable<Destination.Models.destinationTest.BookingHistory> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingHistory>> GetBookingHistories(Query query = null)
        {
            var items = Context.BookingHistories.AsQueryable();

            items = items.Include(i => i.Booking);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingHistoriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingHistoryGet(Destination.Models.destinationTest.BookingHistory item);
        partial void OnGetBookingHistoryByIntHistoryId(ref IQueryable<Destination.Models.destinationTest.BookingHistory> items);


        public async Task<Destination.Models.destinationTest.BookingHistory> GetBookingHistoryByIntHistoryId(int inthistoryid)
        {
            var items = Context.BookingHistories
                              .AsNoTracking()
                              .Where(i => i.IntHistoryId == inthistoryid);

            items = items.Include(i => i.Booking);
 
            OnGetBookingHistoryByIntHistoryId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingHistoryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingHistoryCreated(Destination.Models.destinationTest.BookingHistory item);
        partial void OnAfterBookingHistoryCreated(Destination.Models.destinationTest.BookingHistory item);

        public async Task<Destination.Models.destinationTest.BookingHistory> CreateBookingHistory(Destination.Models.destinationTest.BookingHistory bookinghistory)
        {
            OnBookingHistoryCreated(bookinghistory);

            var existingItem = Context.BookingHistories
                              .Where(i => i.IntHistoryId == bookinghistory.IntHistoryId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingHistories.Add(bookinghistory);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookinghistory).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingHistoryCreated(bookinghistory);

            return bookinghistory;
        }

        public async Task<Destination.Models.destinationTest.BookingHistory> CancelBookingHistoryChanges(Destination.Models.destinationTest.BookingHistory item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingHistoryUpdated(Destination.Models.destinationTest.BookingHistory item);
        partial void OnAfterBookingHistoryUpdated(Destination.Models.destinationTest.BookingHistory item);

        public async Task<Destination.Models.destinationTest.BookingHistory> UpdateBookingHistory(int inthistoryid, Destination.Models.destinationTest.BookingHistory bookinghistory)
        {
            OnBookingHistoryUpdated(bookinghistory);

            var itemToUpdate = Context.BookingHistories
                              .Where(i => i.IntHistoryId == bookinghistory.IntHistoryId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookinghistory);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingHistoryUpdated(bookinghistory);

            return bookinghistory;
        }

        partial void OnBookingHistoryDeleted(Destination.Models.destinationTest.BookingHistory item);
        partial void OnAfterBookingHistoryDeleted(Destination.Models.destinationTest.BookingHistory item);

        public async Task<Destination.Models.destinationTest.BookingHistory> DeleteBookingHistory(int inthistoryid)
        {
            var itemToDelete = Context.BookingHistories
                              .Where(i => i.IntHistoryId == inthistoryid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingHistoryDeleted(itemToDelete);


            Context.BookingHistories.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingHistoryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingQuotesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingquotes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingquotes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingQuotesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingquotes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingquotes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingQuotesRead(ref IQueryable<Destination.Models.destinationTest.BookingQuote> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingQuote>> GetBookingQuotes(Query query = null)
        {
            var items = Context.BookingQuotes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingQuotesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingQuoteGet(Destination.Models.destinationTest.BookingQuote item);
        partial void OnGetBookingQuoteById(ref IQueryable<Destination.Models.destinationTest.BookingQuote> items);


        public async Task<Destination.Models.destinationTest.BookingQuote> GetBookingQuoteById(int id)
        {
            var items = Context.BookingQuotes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetBookingQuoteById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingQuoteGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingQuoteCreated(Destination.Models.destinationTest.BookingQuote item);
        partial void OnAfterBookingQuoteCreated(Destination.Models.destinationTest.BookingQuote item);

        public async Task<Destination.Models.destinationTest.BookingQuote> CreateBookingQuote(Destination.Models.destinationTest.BookingQuote bookingquote)
        {
            OnBookingQuoteCreated(bookingquote);

            var existingItem = Context.BookingQuotes
                              .Where(i => i.Id == bookingquote.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingQuotes.Add(bookingquote);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingquote).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingQuoteCreated(bookingquote);

            return bookingquote;
        }

        public async Task<Destination.Models.destinationTest.BookingQuote> CancelBookingQuoteChanges(Destination.Models.destinationTest.BookingQuote item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingQuoteUpdated(Destination.Models.destinationTest.BookingQuote item);
        partial void OnAfterBookingQuoteUpdated(Destination.Models.destinationTest.BookingQuote item);

        public async Task<Destination.Models.destinationTest.BookingQuote> UpdateBookingQuote(int id, Destination.Models.destinationTest.BookingQuote bookingquote)
        {
            OnBookingQuoteUpdated(bookingquote);

            var itemToUpdate = Context.BookingQuotes
                              .Where(i => i.Id == bookingquote.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingquote);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingQuoteUpdated(bookingquote);

            return bookingquote;
        }

        partial void OnBookingQuoteDeleted(Destination.Models.destinationTest.BookingQuote item);
        partial void OnAfterBookingQuoteDeleted(Destination.Models.destinationTest.BookingQuote item);

        public async Task<Destination.Models.destinationTest.BookingQuote> DeleteBookingQuote(int id)
        {
            var itemToDelete = Context.BookingQuotes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingQuoteDeleted(itemToDelete);


            Context.BookingQuotes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingQuoteDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsRead(ref IQueryable<Destination.Models.destinationTest.Booking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Booking>> GetBookings(Query query = null)
        {
            var items = Context.Bookings.AsQueryable();

            items = items.Include(i => i.Property);
            items = items.Include(i => i.TblService);
            items = items.Include(i => i.PropertySource);
            items = items.Include(i => i.BookingStatus);
            items = items.Include(i => i.Tenant);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Take(10).Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingGet(Destination.Models.destinationTest.Booking item);
        partial void OnGetBookingById(ref IQueryable<Destination.Models.destinationTest.Booking> items);


        public async Task<Destination.Models.destinationTest.Booking> GetBookingById(int id)
        {
            var items = Context.Bookings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
            items = items.Include(i => i.TblService);
            items = items.Include(i => i.PropertySource);
            items = items.Include(i => i.BookingStatus);
            items = items.Include(i => i.Tenant);
 
            OnGetBookingById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingCreated(Destination.Models.destinationTest.Booking item);
        partial void OnAfterBookingCreated(Destination.Models.destinationTest.Booking item);

        public async Task<Destination.Models.destinationTest.Booking> CreateBooking(Destination.Models.destinationTest.Booking booking)
        {
            OnBookingCreated(booking);

            var existingItem = Context.Bookings
                              .Where(i => i.Id == booking.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Bookings.Add(booking);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(booking).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingCreated(booking);

            return booking;
        }

        public async Task<Destination.Models.destinationTest.Booking> CancelBookingChanges(Destination.Models.destinationTest.Booking item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingUpdated(Destination.Models.destinationTest.Booking item);
        partial void OnAfterBookingUpdated(Destination.Models.destinationTest.Booking item);

        public async Task<Destination.Models.destinationTest.Booking> UpdateBooking(int id, Destination.Models.destinationTest.Booking booking)
        {
            OnBookingUpdated(booking);

            var itemToUpdate = Context.Bookings
                              .Where(i => i.Id == booking.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(booking);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingUpdated(booking);

            return booking;
        }

        partial void OnBookingDeleted(Destination.Models.destinationTest.Booking item);
        partial void OnAfterBookingDeleted(Destination.Models.destinationTest.Booking item);

        public async Task<Destination.Models.destinationTest.Booking> DeleteBooking(int id)
        {
            var itemToDelete = Context.Bookings
                              .Where(i => i.Id == id)
                              .Include(i => i.AffiliateBookings)
                              .Include(i => i.AgreementHistories)
                              .Include(i => i.AirbnbSendMessages)
                              .Include(i => i.AppliedPromoCodes)
                              .Include(i => i.BookingHistories)
                              .Include(i => i.CreditRequests)
                              .Include(i => i.GoogleUsersKeywords)
                              .Include(i => i.Payments)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingDeleted(itemToDelete);


            Context.Bookings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingsOwnersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingsowners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingsowners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsOwnersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingsowners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingsowners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsOwnersRead(ref IQueryable<Destination.Models.destinationTest.BookingsOwner> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingsOwner>> GetBookingsOwners(Query query = null)
        {
            var items = Context.BookingsOwners.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsOwnersRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingsOwnerGet(Destination.Models.destinationTest.BookingsOwner item);
        partial void OnGetBookingsOwnerById(ref IQueryable<Destination.Models.destinationTest.BookingsOwner> items);


        public async Task<Destination.Models.destinationTest.BookingsOwner> GetBookingsOwnerById(int id)
        {
            var items = Context.BookingsOwners
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetBookingsOwnerById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingsOwnerGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingsOwnerCreated(Destination.Models.destinationTest.BookingsOwner item);
        partial void OnAfterBookingsOwnerCreated(Destination.Models.destinationTest.BookingsOwner item);

        public async Task<Destination.Models.destinationTest.BookingsOwner> CreateBookingsOwner(Destination.Models.destinationTest.BookingsOwner bookingsowner)
        {
            OnBookingsOwnerCreated(bookingsowner);

            var existingItem = Context.BookingsOwners
                              .Where(i => i.Id == bookingsowner.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingsOwners.Add(bookingsowner);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingsowner).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingsOwnerCreated(bookingsowner);

            return bookingsowner;
        }

        public async Task<Destination.Models.destinationTest.BookingsOwner> CancelBookingsOwnerChanges(Destination.Models.destinationTest.BookingsOwner item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingsOwnerUpdated(Destination.Models.destinationTest.BookingsOwner item);
        partial void OnAfterBookingsOwnerUpdated(Destination.Models.destinationTest.BookingsOwner item);

        public async Task<Destination.Models.destinationTest.BookingsOwner> UpdateBookingsOwner(int id, Destination.Models.destinationTest.BookingsOwner bookingsowner)
        {
            OnBookingsOwnerUpdated(bookingsowner);

            var itemToUpdate = Context.BookingsOwners
                              .Where(i => i.Id == bookingsowner.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingsowner);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingsOwnerUpdated(bookingsowner);

            return bookingsowner;
        }

        partial void OnBookingsOwnerDeleted(Destination.Models.destinationTest.BookingsOwner item);
        partial void OnAfterBookingsOwnerDeleted(Destination.Models.destinationTest.BookingsOwner item);

        public async Task<Destination.Models.destinationTest.BookingsOwner> DeleteBookingsOwner(int id)
        {
            var itemToDelete = Context.BookingsOwners
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingsOwnerDeleted(itemToDelete);


            Context.BookingsOwners.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingsOwnerDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingsVisitedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingsvisiteds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingsvisiteds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsVisitedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingsvisiteds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingsvisiteds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsVisitedsRead(ref IQueryable<Destination.Models.destinationTest.BookingsVisited> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingsVisited>> GetBookingsVisiteds(Query query = null)
        {
            var items = Context.BookingsVisiteds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsVisitedsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportBookingsCodesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingscodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingscodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsCodesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingscodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingscodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsCodesRead(ref IQueryable<Destination.Models.destinationTest.BookingsCode> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingsCode>> GetBookingsCodes(Query query = null)
        {
            var items = Context.BookingsCodes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsCodesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingsCodeGet(Destination.Models.destinationTest.BookingsCode item);
        partial void OnGetBookingsCodeById(ref IQueryable<Destination.Models.destinationTest.BookingsCode> items);


        public async Task<Destination.Models.destinationTest.BookingsCode> GetBookingsCodeById(int id)
        {
            var items = Context.BookingsCodes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetBookingsCodeById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingsCodeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingsCodeCreated(Destination.Models.destinationTest.BookingsCode item);
        partial void OnAfterBookingsCodeCreated(Destination.Models.destinationTest.BookingsCode item);

        public async Task<Destination.Models.destinationTest.BookingsCode> CreateBookingsCode(Destination.Models.destinationTest.BookingsCode bookingscode)
        {
            OnBookingsCodeCreated(bookingscode);

            var existingItem = Context.BookingsCodes
                              .Where(i => i.Id == bookingscode.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingsCodes.Add(bookingscode);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingscode).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingsCodeCreated(bookingscode);

            return bookingscode;
        }

        public async Task<Destination.Models.destinationTest.BookingsCode> CancelBookingsCodeChanges(Destination.Models.destinationTest.BookingsCode item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingsCodeUpdated(Destination.Models.destinationTest.BookingsCode item);
        partial void OnAfterBookingsCodeUpdated(Destination.Models.destinationTest.BookingsCode item);

        public async Task<Destination.Models.destinationTest.BookingsCode> UpdateBookingsCode(int id, Destination.Models.destinationTest.BookingsCode bookingscode)
        {
            OnBookingsCodeUpdated(bookingscode);

            var itemToUpdate = Context.BookingsCodes
                              .Where(i => i.Id == bookingscode.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingscode);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingsCodeUpdated(bookingscode);

            return bookingscode;
        }

        partial void OnBookingsCodeDeleted(Destination.Models.destinationTest.BookingsCode item);
        partial void OnAfterBookingsCodeDeleted(Destination.Models.destinationTest.BookingsCode item);

        public async Task<Destination.Models.destinationTest.BookingsCode> DeleteBookingsCode(int id)
        {
            var itemToDelete = Context.BookingsCodes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingsCodeDeleted(itemToDelete);


            Context.BookingsCodes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingsCodeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingsLargeGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingslargegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingslargegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsLargeGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingslargegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingslargegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsLargeGroupsRead(ref IQueryable<Destination.Models.destinationTest.BookingsLargeGroup> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingsLargeGroup>> GetBookingsLargeGroups(Query query = null)
        {
            var items = Context.BookingsLargeGroups.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsLargeGroupsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportBookingsLogicsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingslogics/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingslogics/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsLogicsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingslogics/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingslogics/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsLogicsRead(ref IQueryable<Destination.Models.destinationTest.BookingsLogic> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingsLogic>> GetBookingsLogics(Query query = null)
        {
            var items = Context.BookingsLogics.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsLogicsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingsLogicGet(Destination.Models.destinationTest.BookingsLogic item);
        partial void OnGetBookingsLogicByIntLogicId(ref IQueryable<Destination.Models.destinationTest.BookingsLogic> items);


        public async Task<Destination.Models.destinationTest.BookingsLogic> GetBookingsLogicByIntLogicId(int intlogicid)
        {
            var items = Context.BookingsLogics
                              .AsNoTracking()
                              .Where(i => i.IntLogicId == intlogicid);

            items = items.Include(i => i.Property);
 
            OnGetBookingsLogicByIntLogicId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingsLogicGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingsLogicCreated(Destination.Models.destinationTest.BookingsLogic item);
        partial void OnAfterBookingsLogicCreated(Destination.Models.destinationTest.BookingsLogic item);

        public async Task<Destination.Models.destinationTest.BookingsLogic> CreateBookingsLogic(Destination.Models.destinationTest.BookingsLogic bookingslogic)
        {
            OnBookingsLogicCreated(bookingslogic);

            var existingItem = Context.BookingsLogics
                              .Where(i => i.IntLogicId == bookingslogic.IntLogicId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingsLogics.Add(bookingslogic);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingslogic).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingsLogicCreated(bookingslogic);

            return bookingslogic;
        }

        public async Task<Destination.Models.destinationTest.BookingsLogic> CancelBookingsLogicChanges(Destination.Models.destinationTest.BookingsLogic item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingsLogicUpdated(Destination.Models.destinationTest.BookingsLogic item);
        partial void OnAfterBookingsLogicUpdated(Destination.Models.destinationTest.BookingsLogic item);

        public async Task<Destination.Models.destinationTest.BookingsLogic> UpdateBookingsLogic(int intlogicid, Destination.Models.destinationTest.BookingsLogic bookingslogic)
        {
            OnBookingsLogicUpdated(bookingslogic);

            var itemToUpdate = Context.BookingsLogics
                              .Where(i => i.IntLogicId == bookingslogic.IntLogicId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingslogic);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingsLogicUpdated(bookingslogic);

            return bookingslogic;
        }

        partial void OnBookingsLogicDeleted(Destination.Models.destinationTest.BookingsLogic item);
        partial void OnAfterBookingsLogicDeleted(Destination.Models.destinationTest.BookingsLogic item);

        public async Task<Destination.Models.destinationTest.BookingsLogic> DeleteBookingsLogic(int intlogicid)
        {
            var itemToDelete = Context.BookingsLogics
                              .Where(i => i.IntLogicId == intlogicid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingsLogicDeleted(itemToDelete);


            Context.BookingsLogics.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingsLogicDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingsLogic2SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingslogic2s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingslogic2s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsLogic2SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingslogic2s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingslogic2s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsLogic2SRead(ref IQueryable<Destination.Models.destinationTest.BookingsLogic2> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingsLogic2>> GetBookingsLogic2S(Query query = null)
        {
            var items = Context.BookingsLogic2S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsLogic2SRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingsLogic2Get(Destination.Models.destinationTest.BookingsLogic2 item);
        partial void OnGetBookingsLogic2ByIntLogicId(ref IQueryable<Destination.Models.destinationTest.BookingsLogic2> items);


        public async Task<Destination.Models.destinationTest.BookingsLogic2> GetBookingsLogic2ByIntLogicId(int intlogicid)
        {
            var items = Context.BookingsLogic2S
                              .AsNoTracking()
                              .Where(i => i.IntLogicId == intlogicid);

 
            OnGetBookingsLogic2ByIntLogicId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingsLogic2Get(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingsLogic2Created(Destination.Models.destinationTest.BookingsLogic2 item);
        partial void OnAfterBookingsLogic2Created(Destination.Models.destinationTest.BookingsLogic2 item);

        public async Task<Destination.Models.destinationTest.BookingsLogic2> CreateBookingsLogic2(Destination.Models.destinationTest.BookingsLogic2 bookingslogic2)
        {
            OnBookingsLogic2Created(bookingslogic2);

            var existingItem = Context.BookingsLogic2S
                              .Where(i => i.IntLogicId == bookingslogic2.IntLogicId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingsLogic2S.Add(bookingslogic2);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingslogic2).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingsLogic2Created(bookingslogic2);

            return bookingslogic2;
        }

        public async Task<Destination.Models.destinationTest.BookingsLogic2> CancelBookingsLogic2Changes(Destination.Models.destinationTest.BookingsLogic2 item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingsLogic2Updated(Destination.Models.destinationTest.BookingsLogic2 item);
        partial void OnAfterBookingsLogic2Updated(Destination.Models.destinationTest.BookingsLogic2 item);

        public async Task<Destination.Models.destinationTest.BookingsLogic2> UpdateBookingsLogic2(int intlogicid, Destination.Models.destinationTest.BookingsLogic2 bookingslogic2)
        {
            OnBookingsLogic2Updated(bookingslogic2);

            var itemToUpdate = Context.BookingsLogic2S
                              .Where(i => i.IntLogicId == bookingslogic2.IntLogicId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingslogic2);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingsLogic2Updated(bookingslogic2);

            return bookingslogic2;
        }

        partial void OnBookingsLogic2Deleted(Destination.Models.destinationTest.BookingsLogic2 item);
        partial void OnAfterBookingsLogic2Deleted(Destination.Models.destinationTest.BookingsLogic2 item);

        public async Task<Destination.Models.destinationTest.BookingsLogic2> DeleteBookingsLogic2(int intlogicid)
        {
            var itemToDelete = Context.BookingsLogic2S
                              .Where(i => i.IntLogicId == intlogicid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingsLogic2Deleted(itemToDelete);


            Context.BookingsLogic2S.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingsLogic2Deleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingsLogicVrbosToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingslogicvrbos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingslogicvrbos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsLogicVrbosToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingslogicvrbos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingslogicvrbos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsLogicVrbosRead(ref IQueryable<Destination.Models.destinationTest.BookingsLogicVrbo> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingsLogicVrbo>> GetBookingsLogicVrbos(Query query = null)
        {
            var items = Context.BookingsLogicVrbos.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsLogicVrbosRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingsLogicVrboGet(Destination.Models.destinationTest.BookingsLogicVrbo item);
        partial void OnGetBookingsLogicVrboByIntLogicId(ref IQueryable<Destination.Models.destinationTest.BookingsLogicVrbo> items);


        public async Task<Destination.Models.destinationTest.BookingsLogicVrbo> GetBookingsLogicVrboByIntLogicId(int intlogicid)
        {
            var items = Context.BookingsLogicVrbos
                              .AsNoTracking()
                              .Where(i => i.IntLogicId == intlogicid);

 
            OnGetBookingsLogicVrboByIntLogicId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingsLogicVrboGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingsLogicVrboCreated(Destination.Models.destinationTest.BookingsLogicVrbo item);
        partial void OnAfterBookingsLogicVrboCreated(Destination.Models.destinationTest.BookingsLogicVrbo item);

        public async Task<Destination.Models.destinationTest.BookingsLogicVrbo> CreateBookingsLogicVrbo(Destination.Models.destinationTest.BookingsLogicVrbo bookingslogicvrbo)
        {
            OnBookingsLogicVrboCreated(bookingslogicvrbo);

            var existingItem = Context.BookingsLogicVrbos
                              .Where(i => i.IntLogicId == bookingslogicvrbo.IntLogicId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingsLogicVrbos.Add(bookingslogicvrbo);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingslogicvrbo).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingsLogicVrboCreated(bookingslogicvrbo);

            return bookingslogicvrbo;
        }

        public async Task<Destination.Models.destinationTest.BookingsLogicVrbo> CancelBookingsLogicVrboChanges(Destination.Models.destinationTest.BookingsLogicVrbo item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingsLogicVrboUpdated(Destination.Models.destinationTest.BookingsLogicVrbo item);
        partial void OnAfterBookingsLogicVrboUpdated(Destination.Models.destinationTest.BookingsLogicVrbo item);

        public async Task<Destination.Models.destinationTest.BookingsLogicVrbo> UpdateBookingsLogicVrbo(int intlogicid, Destination.Models.destinationTest.BookingsLogicVrbo bookingslogicvrbo)
        {
            OnBookingsLogicVrboUpdated(bookingslogicvrbo);

            var itemToUpdate = Context.BookingsLogicVrbos
                              .Where(i => i.IntLogicId == bookingslogicvrbo.IntLogicId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingslogicvrbo);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingsLogicVrboUpdated(bookingslogicvrbo);

            return bookingslogicvrbo;
        }

        partial void OnBookingsLogicVrboDeleted(Destination.Models.destinationTest.BookingsLogicVrbo item);
        partial void OnAfterBookingsLogicVrboDeleted(Destination.Models.destinationTest.BookingsLogicVrbo item);

        public async Task<Destination.Models.destinationTest.BookingsLogicVrbo> DeleteBookingsLogicVrbo(int intlogicid)
        {
            var itemToDelete = Context.BookingsLogicVrbos
                              .Where(i => i.IntLogicId == intlogicid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingsLogicVrboDeleted(itemToDelete);


            Context.BookingsLogicVrbos.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingsLogicVrboDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBookingsOriginalPubRatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingsoriginalpubrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingsoriginalpubrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBookingsOriginalPubRatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bookingsoriginalpubrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bookingsoriginalpubrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBookingsOriginalPubRatesRead(ref IQueryable<Destination.Models.destinationTest.BookingsOriginalPubRate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BookingsOriginalPubRate>> GetBookingsOriginalPubRates(Query query = null)
        {
            var items = Context.BookingsOriginalPubRates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBookingsOriginalPubRatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBookingsOriginalPubRateGet(Destination.Models.destinationTest.BookingsOriginalPubRate item);
        partial void OnGetBookingsOriginalPubRateById(ref IQueryable<Destination.Models.destinationTest.BookingsOriginalPubRate> items);


        public async Task<Destination.Models.destinationTest.BookingsOriginalPubRate> GetBookingsOriginalPubRateById(int id)
        {
            var items = Context.BookingsOriginalPubRates
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetBookingsOriginalPubRateById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBookingsOriginalPubRateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBookingsOriginalPubRateCreated(Destination.Models.destinationTest.BookingsOriginalPubRate item);
        partial void OnAfterBookingsOriginalPubRateCreated(Destination.Models.destinationTest.BookingsOriginalPubRate item);

        public async Task<Destination.Models.destinationTest.BookingsOriginalPubRate> CreateBookingsOriginalPubRate(Destination.Models.destinationTest.BookingsOriginalPubRate bookingsoriginalpubrate)
        {
            OnBookingsOriginalPubRateCreated(bookingsoriginalpubrate);

            var existingItem = Context.BookingsOriginalPubRates
                              .Where(i => i.Id == bookingsoriginalpubrate.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.BookingsOriginalPubRates.Add(bookingsoriginalpubrate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(bookingsoriginalpubrate).State = EntityState.Detached;
                throw;
            }

            OnAfterBookingsOriginalPubRateCreated(bookingsoriginalpubrate);

            return bookingsoriginalpubrate;
        }

        public async Task<Destination.Models.destinationTest.BookingsOriginalPubRate> CancelBookingsOriginalPubRateChanges(Destination.Models.destinationTest.BookingsOriginalPubRate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBookingsOriginalPubRateUpdated(Destination.Models.destinationTest.BookingsOriginalPubRate item);
        partial void OnAfterBookingsOriginalPubRateUpdated(Destination.Models.destinationTest.BookingsOriginalPubRate item);

        public async Task<Destination.Models.destinationTest.BookingsOriginalPubRate> UpdateBookingsOriginalPubRate(int id, Destination.Models.destinationTest.BookingsOriginalPubRate bookingsoriginalpubrate)
        {
            OnBookingsOriginalPubRateUpdated(bookingsoriginalpubrate);

            var itemToUpdate = Context.BookingsOriginalPubRates
                              .Where(i => i.Id == bookingsoriginalpubrate.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(bookingsoriginalpubrate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBookingsOriginalPubRateUpdated(bookingsoriginalpubrate);

            return bookingsoriginalpubrate;
        }

        partial void OnBookingsOriginalPubRateDeleted(Destination.Models.destinationTest.BookingsOriginalPubRate item);
        partial void OnAfterBookingsOriginalPubRateDeleted(Destination.Models.destinationTest.BookingsOriginalPubRate item);

        public async Task<Destination.Models.destinationTest.BookingsOriginalPubRate> DeleteBookingsOriginalPubRate(int id)
        {
            var itemToDelete = Context.BookingsOriginalPubRates
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBookingsOriginalPubRateDeleted(itemToDelete);


            Context.BookingsOriginalPubRates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBookingsOriginalPubRateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBrokersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/brokers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/brokers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBrokersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/brokers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/brokers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBrokersRead(ref IQueryable<Destination.Models.destinationTest.Broker> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Broker>> GetBrokers(Query query = null)
        {
            var items = Context.Brokers.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBrokersRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnBrokerGet(Destination.Models.destinationTest.Broker item);
        partial void OnGetBrokerByBid(ref IQueryable<Destination.Models.destinationTest.Broker> items);


        public async Task<Destination.Models.destinationTest.Broker> GetBrokerByBid(int bid)
        {
            var items = Context.Brokers
                              .AsNoTracking()
                              .Where(i => i.Bid == bid);

 
            OnGetBrokerByBid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnBrokerGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnBrokerCreated(Destination.Models.destinationTest.Broker item);
        partial void OnAfterBrokerCreated(Destination.Models.destinationTest.Broker item);

        public async Task<Destination.Models.destinationTest.Broker> CreateBroker(Destination.Models.destinationTest.Broker broker)
        {
            OnBrokerCreated(broker);

            var existingItem = Context.Brokers
                              .Where(i => i.Bid == broker.Bid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Brokers.Add(broker);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(broker).State = EntityState.Detached;
                throw;
            }

            OnAfterBrokerCreated(broker);

            return broker;
        }

        public async Task<Destination.Models.destinationTest.Broker> CancelBrokerChanges(Destination.Models.destinationTest.Broker item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnBrokerUpdated(Destination.Models.destinationTest.Broker item);
        partial void OnAfterBrokerUpdated(Destination.Models.destinationTest.Broker item);

        public async Task<Destination.Models.destinationTest.Broker> UpdateBroker(int bid, Destination.Models.destinationTest.Broker broker)
        {
            OnBrokerUpdated(broker);

            var itemToUpdate = Context.Brokers
                              .Where(i => i.Bid == broker.Bid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(broker);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterBrokerUpdated(broker);

            return broker;
        }

        partial void OnBrokerDeleted(Destination.Models.destinationTest.Broker item);
        partial void OnAfterBrokerDeleted(Destination.Models.destinationTest.Broker item);

        public async Task<Destination.Models.destinationTest.Broker> DeleteBroker(int bid)
        {
            var itemToDelete = Context.Brokers
                              .Where(i => i.Bid == bid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnBrokerDeleted(itemToDelete);


            Context.Brokers.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterBrokerDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportBulkSmstestsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bulksmstests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bulksmstests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBulkSmstestsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bulksmstests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bulksmstests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBulkSmstestsRead(ref IQueryable<Destination.Models.destinationTest.BulkSmstest> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BulkSmstest>> GetBulkSmstests(Query query = null)
        {
            var items = Context.BulkSmstests.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBulkSmstestsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportBulkSmstest1SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bulksmstest1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bulksmstest1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportBulkSmstest1SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/bulksmstest1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/bulksmstest1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnBulkSmstest1SRead(ref IQueryable<Destination.Models.destinationTest.BulkSmstest1> items);

        public async Task<IQueryable<Destination.Models.destinationTest.BulkSmstest1>> GetBulkSmstest1S(Query query = null)
        {
            var items = Context.BulkSmstest1S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnBulkSmstest1SRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCalenderFileBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/calenderfilebookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/calenderfilebookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCalenderFileBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/calenderfilebookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/calenderfilebookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCalenderFileBookingsRead(ref IQueryable<Destination.Models.destinationTest.CalenderFileBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CalenderFileBooking>> GetCalenderFileBookings(Query query = null)
        {
            var items = Context.CalenderFileBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCalenderFileBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCalenderFileBookingGet(Destination.Models.destinationTest.CalenderFileBooking item);
        partial void OnGetCalenderFileBookingById(ref IQueryable<Destination.Models.destinationTest.CalenderFileBooking> items);


        public async Task<Destination.Models.destinationTest.CalenderFileBooking> GetCalenderFileBookingById(int id)
        {
            var items = Context.CalenderFileBookings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetCalenderFileBookingById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCalenderFileBookingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCalenderFileBookingCreated(Destination.Models.destinationTest.CalenderFileBooking item);
        partial void OnAfterCalenderFileBookingCreated(Destination.Models.destinationTest.CalenderFileBooking item);

        public async Task<Destination.Models.destinationTest.CalenderFileBooking> CreateCalenderFileBooking(Destination.Models.destinationTest.CalenderFileBooking calenderfilebooking)
        {
            OnCalenderFileBookingCreated(calenderfilebooking);

            var existingItem = Context.CalenderFileBookings
                              .Where(i => i.Id == calenderfilebooking.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.CalenderFileBookings.Add(calenderfilebooking);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(calenderfilebooking).State = EntityState.Detached;
                throw;
            }

            OnAfterCalenderFileBookingCreated(calenderfilebooking);

            return calenderfilebooking;
        }

        public async Task<Destination.Models.destinationTest.CalenderFileBooking> CancelCalenderFileBookingChanges(Destination.Models.destinationTest.CalenderFileBooking item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCalenderFileBookingUpdated(Destination.Models.destinationTest.CalenderFileBooking item);
        partial void OnAfterCalenderFileBookingUpdated(Destination.Models.destinationTest.CalenderFileBooking item);

        public async Task<Destination.Models.destinationTest.CalenderFileBooking> UpdateCalenderFileBooking(int id, Destination.Models.destinationTest.CalenderFileBooking calenderfilebooking)
        {
            OnCalenderFileBookingUpdated(calenderfilebooking);

            var itemToUpdate = Context.CalenderFileBookings
                              .Where(i => i.Id == calenderfilebooking.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(calenderfilebooking);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCalenderFileBookingUpdated(calenderfilebooking);

            return calenderfilebooking;
        }

        partial void OnCalenderFileBookingDeleted(Destination.Models.destinationTest.CalenderFileBooking item);
        partial void OnAfterCalenderFileBookingDeleted(Destination.Models.destinationTest.CalenderFileBooking item);

        public async Task<Destination.Models.destinationTest.CalenderFileBooking> DeleteCalenderFileBooking(int id)
        {
            var itemToDelete = Context.CalenderFileBookings
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCalenderFileBookingDeleted(itemToDelete);


            Context.CalenderFileBookings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCalenderFileBookingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCampaignsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/campaigns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/campaigns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCampaignsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/campaigns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/campaigns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCampaignsRead(ref IQueryable<Destination.Models.destinationTest.Campaign> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Campaign>> GetCampaigns(Query query = null)
        {
            var items = Context.Campaigns.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCampaignsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCampaignGet(Destination.Models.destinationTest.Campaign item);
        partial void OnGetCampaignByCampaignId(ref IQueryable<Destination.Models.destinationTest.Campaign> items);


        public async Task<Destination.Models.destinationTest.Campaign> GetCampaignByCampaignId(int campaignid)
        {
            var items = Context.Campaigns
                              .AsNoTracking()
                              .Where(i => i.CampaignId == campaignid);

 
            OnGetCampaignByCampaignId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCampaignGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCampaignCreated(Destination.Models.destinationTest.Campaign item);
        partial void OnAfterCampaignCreated(Destination.Models.destinationTest.Campaign item);

        public async Task<Destination.Models.destinationTest.Campaign> CreateCampaign(Destination.Models.destinationTest.Campaign campaign)
        {
            OnCampaignCreated(campaign);

            var existingItem = Context.Campaigns
                              .Where(i => i.CampaignId == campaign.CampaignId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Campaigns.Add(campaign);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(campaign).State = EntityState.Detached;
                throw;
            }

            OnAfterCampaignCreated(campaign);

            return campaign;
        }

        public async Task<Destination.Models.destinationTest.Campaign> CancelCampaignChanges(Destination.Models.destinationTest.Campaign item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCampaignUpdated(Destination.Models.destinationTest.Campaign item);
        partial void OnAfterCampaignUpdated(Destination.Models.destinationTest.Campaign item);

        public async Task<Destination.Models.destinationTest.Campaign> UpdateCampaign(int campaignid, Destination.Models.destinationTest.Campaign campaign)
        {
            OnCampaignUpdated(campaign);

            var itemToUpdate = Context.Campaigns
                              .Where(i => i.CampaignId == campaign.CampaignId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(campaign);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCampaignUpdated(campaign);

            return campaign;
        }

        partial void OnCampaignDeleted(Destination.Models.destinationTest.Campaign item);
        partial void OnAfterCampaignDeleted(Destination.Models.destinationTest.Campaign item);

        public async Task<Destination.Models.destinationTest.Campaign> DeleteCampaign(int campaignid)
        {
            var itemToDelete = Context.Campaigns
                              .Where(i => i.CampaignId == campaignid)
                              .Include(i => i.FilterDataForBulkSmsMails)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCampaignDeleted(itemToDelete);


            Context.Campaigns.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCampaignDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportChannelsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channels/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channels/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportChannelsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channels/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channels/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnChannelsRead(ref IQueryable<Destination.Models.destinationTest.Channel> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Channel>> GetChannels(Query query = null)
        {
            var items = Context.Channels.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnChannelsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnChannelGet(Destination.Models.destinationTest.Channel item);
        partial void OnGetChannelById(ref IQueryable<Destination.Models.destinationTest.Channel> items);


        public async Task<Destination.Models.destinationTest.Channel> GetChannelById(int id)
        {
            var items = Context.Channels
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetChannelById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnChannelGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnChannelCreated(Destination.Models.destinationTest.Channel item);
        partial void OnAfterChannelCreated(Destination.Models.destinationTest.Channel item);

        public async Task<Destination.Models.destinationTest.Channel> CreateChannel(Destination.Models.destinationTest.Channel channel)
        {
            OnChannelCreated(channel);

            var existingItem = Context.Channels
                              .Where(i => i.Id == channel.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Channels.Add(channel);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(channel).State = EntityState.Detached;
                throw;
            }

            OnAfterChannelCreated(channel);

            return channel;
        }

        public async Task<Destination.Models.destinationTest.Channel> CancelChannelChanges(Destination.Models.destinationTest.Channel item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnChannelUpdated(Destination.Models.destinationTest.Channel item);
        partial void OnAfterChannelUpdated(Destination.Models.destinationTest.Channel item);

        public async Task<Destination.Models.destinationTest.Channel> UpdateChannel(int id, Destination.Models.destinationTest.Channel channel)
        {
            OnChannelUpdated(channel);

            var itemToUpdate = Context.Channels
                              .Where(i => i.Id == channel.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(channel);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterChannelUpdated(channel);

            return channel;
        }

        partial void OnChannelDeleted(Destination.Models.destinationTest.Channel item);
        partial void OnAfterChannelDeleted(Destination.Models.destinationTest.Channel item);

        public async Task<Destination.Models.destinationTest.Channel> DeleteChannel(int id)
        {
            var itemToDelete = Context.Channels
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnChannelDeleted(itemToDelete);


            Context.Channels.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterChannelDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportChannelBusToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channelbus/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channelbus/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportChannelBusToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channelbus/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channelbus/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnChannelBusRead(ref IQueryable<Destination.Models.destinationTest.ChannelBu> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ChannelBu>> GetChannelBus(Query query = null)
        {
            var items = Context.ChannelBus.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnChannelBusRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportChannelPartialsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channelpartials/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channelpartials/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportChannelPartialsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channelpartials/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channelpartials/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnChannelPartialsRead(ref IQueryable<Destination.Models.destinationTest.ChannelPartial> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ChannelPartial>> GetChannelPartials(Query query = null)
        {
            var items = Context.ChannelPartials.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnChannelPartialsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnChannelPartialGet(Destination.Models.destinationTest.ChannelPartial item);
        partial void OnGetChannelPartialById(ref IQueryable<Destination.Models.destinationTest.ChannelPartial> items);


        public async Task<Destination.Models.destinationTest.ChannelPartial> GetChannelPartialById(int id)
        {
            var items = Context.ChannelPartials
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetChannelPartialById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnChannelPartialGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnChannelPartialCreated(Destination.Models.destinationTest.ChannelPartial item);
        partial void OnAfterChannelPartialCreated(Destination.Models.destinationTest.ChannelPartial item);

        public async Task<Destination.Models.destinationTest.ChannelPartial> CreateChannelPartial(Destination.Models.destinationTest.ChannelPartial channelpartial)
        {
            OnChannelPartialCreated(channelpartial);

            var existingItem = Context.ChannelPartials
                              .Where(i => i.Id == channelpartial.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ChannelPartials.Add(channelpartial);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(channelpartial).State = EntityState.Detached;
                throw;
            }

            OnAfterChannelPartialCreated(channelpartial);

            return channelpartial;
        }

        public async Task<Destination.Models.destinationTest.ChannelPartial> CancelChannelPartialChanges(Destination.Models.destinationTest.ChannelPartial item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnChannelPartialUpdated(Destination.Models.destinationTest.ChannelPartial item);
        partial void OnAfterChannelPartialUpdated(Destination.Models.destinationTest.ChannelPartial item);

        public async Task<Destination.Models.destinationTest.ChannelPartial> UpdateChannelPartial(int id, Destination.Models.destinationTest.ChannelPartial channelpartial)
        {
            OnChannelPartialUpdated(channelpartial);

            var itemToUpdate = Context.ChannelPartials
                              .Where(i => i.Id == channelpartial.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(channelpartial);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterChannelPartialUpdated(channelpartial);

            return channelpartial;
        }

        partial void OnChannelPartialDeleted(Destination.Models.destinationTest.ChannelPartial item);
        partial void OnAfterChannelPartialDeleted(Destination.Models.destinationTest.ChannelPartial item);

        public async Task<Destination.Models.destinationTest.ChannelPartial> DeleteChannelPartial(int id)
        {
            var itemToDelete = Context.ChannelPartials
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnChannelPartialDeleted(itemToDelete);


            Context.ChannelPartials.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterChannelPartialDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportChannelPartnerHitsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channelpartnerhits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channelpartnerhits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportChannelPartnerHitsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channelpartnerhits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channelpartnerhits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnChannelPartnerHitsRead(ref IQueryable<Destination.Models.destinationTest.ChannelPartnerHit> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ChannelPartnerHit>> GetChannelPartnerHits(Query query = null)
        {
            var items = Context.ChannelPartnerHits.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnChannelPartnerHitsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportChannelVariancesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channelvariances/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channelvariances/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportChannelVariancesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/channelvariances/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/channelvariances/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnChannelVariancesRead(ref IQueryable<Destination.Models.destinationTest.ChannelVariance> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ChannelVariance>> GetChannelVariances(Query query = null)
        {
            var items = Context.ChannelVariances.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnChannelVariancesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnChannelVarianceGet(Destination.Models.destinationTest.ChannelVariance item);
        partial void OnGetChannelVarianceById(ref IQueryable<Destination.Models.destinationTest.ChannelVariance> items);


        public async Task<Destination.Models.destinationTest.ChannelVariance> GetChannelVarianceById(int id)
        {
            var items = Context.ChannelVariances
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetChannelVarianceById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnChannelVarianceGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnChannelVarianceCreated(Destination.Models.destinationTest.ChannelVariance item);
        partial void OnAfterChannelVarianceCreated(Destination.Models.destinationTest.ChannelVariance item);

        public async Task<Destination.Models.destinationTest.ChannelVariance> CreateChannelVariance(Destination.Models.destinationTest.ChannelVariance channelvariance)
        {
            OnChannelVarianceCreated(channelvariance);

            var existingItem = Context.ChannelVariances
                              .Where(i => i.Id == channelvariance.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ChannelVariances.Add(channelvariance);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(channelvariance).State = EntityState.Detached;
                throw;
            }

            OnAfterChannelVarianceCreated(channelvariance);

            return channelvariance;
        }

        public async Task<Destination.Models.destinationTest.ChannelVariance> CancelChannelVarianceChanges(Destination.Models.destinationTest.ChannelVariance item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnChannelVarianceUpdated(Destination.Models.destinationTest.ChannelVariance item);
        partial void OnAfterChannelVarianceUpdated(Destination.Models.destinationTest.ChannelVariance item);

        public async Task<Destination.Models.destinationTest.ChannelVariance> UpdateChannelVariance(int id, Destination.Models.destinationTest.ChannelVariance channelvariance)
        {
            OnChannelVarianceUpdated(channelvariance);

            var itemToUpdate = Context.ChannelVariances
                              .Where(i => i.Id == channelvariance.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(channelvariance);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterChannelVarianceUpdated(channelvariance);

            return channelvariance;
        }

        partial void OnChannelVarianceDeleted(Destination.Models.destinationTest.ChannelVariance item);
        partial void OnAfterChannelVarianceDeleted(Destination.Models.destinationTest.ChannelVariance item);

        public async Task<Destination.Models.destinationTest.ChannelVariance> DeleteChannelVariance(int id)
        {
            var itemToDelete = Context.ChannelVariances
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnChannelVarianceDeleted(itemToDelete);


            Context.ChannelVariances.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterChannelVarianceDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportChatbookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/chatbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/chatbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportChatbookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/chatbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/chatbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnChatbookingsRead(ref IQueryable<Destination.Models.destinationTest.Chatbooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Chatbooking>> GetChatbookings(Query query = null)
        {
            var items = Context.Chatbookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnChatbookingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnChatbookingGet(Destination.Models.destinationTest.Chatbooking item);
        partial void OnGetChatbookingByChatid(ref IQueryable<Destination.Models.destinationTest.Chatbooking> items);


        public async Task<Destination.Models.destinationTest.Chatbooking> GetChatbookingByChatid(int chatid)
        {
            var items = Context.Chatbookings
                              .AsNoTracking()
                              .Where(i => i.Chatid == chatid);

 
            OnGetChatbookingByChatid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnChatbookingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnChatbookingCreated(Destination.Models.destinationTest.Chatbooking item);
        partial void OnAfterChatbookingCreated(Destination.Models.destinationTest.Chatbooking item);

        public async Task<Destination.Models.destinationTest.Chatbooking> CreateChatbooking(Destination.Models.destinationTest.Chatbooking chatbooking)
        {
            OnChatbookingCreated(chatbooking);

            var existingItem = Context.Chatbookings
                              .Where(i => i.Chatid == chatbooking.Chatid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Chatbookings.Add(chatbooking);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(chatbooking).State = EntityState.Detached;
                throw;
            }

            OnAfterChatbookingCreated(chatbooking);

            return chatbooking;
        }

        public async Task<Destination.Models.destinationTest.Chatbooking> CancelChatbookingChanges(Destination.Models.destinationTest.Chatbooking item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnChatbookingUpdated(Destination.Models.destinationTest.Chatbooking item);
        partial void OnAfterChatbookingUpdated(Destination.Models.destinationTest.Chatbooking item);

        public async Task<Destination.Models.destinationTest.Chatbooking> UpdateChatbooking(int chatid, Destination.Models.destinationTest.Chatbooking chatbooking)
        {
            OnChatbookingUpdated(chatbooking);

            var itemToUpdate = Context.Chatbookings
                              .Where(i => i.Chatid == chatbooking.Chatid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(chatbooking);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterChatbookingUpdated(chatbooking);

            return chatbooking;
        }

        partial void OnChatbookingDeleted(Destination.Models.destinationTest.Chatbooking item);
        partial void OnAfterChatbookingDeleted(Destination.Models.destinationTest.Chatbooking item);

        public async Task<Destination.Models.destinationTest.Chatbooking> DeleteChatbooking(int chatid)
        {
            var itemToDelete = Context.Chatbookings
                              .Where(i => i.Chatid == chatid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnChatbookingDeleted(itemToDelete);


            Context.Chatbookings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterChatbookingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportChatBotKeywordMastersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/chatbotkeywordmasters/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/chatbotkeywordmasters/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportChatBotKeywordMastersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/chatbotkeywordmasters/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/chatbotkeywordmasters/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnChatBotKeywordMastersRead(ref IQueryable<Destination.Models.destinationTest.ChatBotKeywordMaster> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ChatBotKeywordMaster>> GetChatBotKeywordMasters(Query query = null)
        {
            var items = Context.ChatBotKeywordMasters.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnChatBotKeywordMastersRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportChatBotMenuMastersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/chatbotmenumasters/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/chatbotmenumasters/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportChatBotMenuMastersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/chatbotmenumasters/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/chatbotmenumasters/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnChatBotMenuMastersRead(ref IQueryable<Destination.Models.destinationTest.ChatBotMenuMaster> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ChatBotMenuMaster>> GetChatBotMenuMasters(Query query = null)
        {
            var items = Context.ChatBotMenuMasters.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnChatBotMenuMastersRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCheckInCheckOutSettingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/checkincheckoutsettings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/checkincheckoutsettings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCheckInCheckOutSettingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/checkincheckoutsettings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/checkincheckoutsettings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCheckInCheckOutSettingsRead(ref IQueryable<Destination.Models.destinationTest.CheckInCheckOutSetting> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CheckInCheckOutSetting>> GetCheckInCheckOutSettings(Query query = null)
        {
            var items = Context.CheckInCheckOutSettings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCheckInCheckOutSettingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCheckInCheckOutSettingGet(Destination.Models.destinationTest.CheckInCheckOutSetting item);
        partial void OnGetCheckInCheckOutSettingById(ref IQueryable<Destination.Models.destinationTest.CheckInCheckOutSetting> items);


        public async Task<Destination.Models.destinationTest.CheckInCheckOutSetting> GetCheckInCheckOutSettingById(int id)
        {
            var items = Context.CheckInCheckOutSettings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetCheckInCheckOutSettingById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCheckInCheckOutSettingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCheckInCheckOutSettingCreated(Destination.Models.destinationTest.CheckInCheckOutSetting item);
        partial void OnAfterCheckInCheckOutSettingCreated(Destination.Models.destinationTest.CheckInCheckOutSetting item);

        public async Task<Destination.Models.destinationTest.CheckInCheckOutSetting> CreateCheckInCheckOutSetting(Destination.Models.destinationTest.CheckInCheckOutSetting checkincheckoutsetting)
        {
            OnCheckInCheckOutSettingCreated(checkincheckoutsetting);

            var existingItem = Context.CheckInCheckOutSettings
                              .Where(i => i.Id == checkincheckoutsetting.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.CheckInCheckOutSettings.Add(checkincheckoutsetting);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(checkincheckoutsetting).State = EntityState.Detached;
                throw;
            }

            OnAfterCheckInCheckOutSettingCreated(checkincheckoutsetting);

            return checkincheckoutsetting;
        }

        public async Task<Destination.Models.destinationTest.CheckInCheckOutSetting> CancelCheckInCheckOutSettingChanges(Destination.Models.destinationTest.CheckInCheckOutSetting item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCheckInCheckOutSettingUpdated(Destination.Models.destinationTest.CheckInCheckOutSetting item);
        partial void OnAfterCheckInCheckOutSettingUpdated(Destination.Models.destinationTest.CheckInCheckOutSetting item);

        public async Task<Destination.Models.destinationTest.CheckInCheckOutSetting> UpdateCheckInCheckOutSetting(int id, Destination.Models.destinationTest.CheckInCheckOutSetting checkincheckoutsetting)
        {
            OnCheckInCheckOutSettingUpdated(checkincheckoutsetting);

            var itemToUpdate = Context.CheckInCheckOutSettings
                              .Where(i => i.Id == checkincheckoutsetting.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(checkincheckoutsetting);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCheckInCheckOutSettingUpdated(checkincheckoutsetting);

            return checkincheckoutsetting;
        }

        partial void OnCheckInCheckOutSettingDeleted(Destination.Models.destinationTest.CheckInCheckOutSetting item);
        partial void OnAfterCheckInCheckOutSettingDeleted(Destination.Models.destinationTest.CheckInCheckOutSetting item);

        public async Task<Destination.Models.destinationTest.CheckInCheckOutSetting> DeleteCheckInCheckOutSetting(int id)
        {
            var itemToDelete = Context.CheckInCheckOutSettings
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCheckInCheckOutSettingDeleted(itemToDelete);


            Context.CheckInCheckOutSettings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCheckInCheckOutSettingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCheckInLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/checkinlogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/checkinlogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCheckInLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/checkinlogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/checkinlogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCheckInLogsRead(ref IQueryable<Destination.Models.destinationTest.CheckInLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CheckInLog>> GetCheckInLogs(Query query = null)
        {
            var items = Context.CheckInLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCheckInLogsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCleanerAuditedMsgsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleanerauditedmsgs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleanerauditedmsgs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCleanerAuditedMsgsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleanerauditedmsgs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleanerauditedmsgs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCleanerAuditedMsgsRead(ref IQueryable<Destination.Models.destinationTest.CleanerAuditedMsg> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CleanerAuditedMsg>> GetCleanerAuditedMsgs(Query query = null)
        {
            var items = Context.CleanerAuditedMsgs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCleanerAuditedMsgsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCleanerGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleanergroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleanergroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCleanerGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleanergroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleanergroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCleanerGroupsRead(ref IQueryable<Destination.Models.destinationTest.CleanerGroup> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CleanerGroup>> GetCleanerGroups(Query query = null)
        {
            var items = Context.CleanerGroups.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCleanerGroupsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCleanerInvoiceMatchedDataToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleanerinvoicematcheddata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleanerinvoicematcheddata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCleanerInvoiceMatchedDataToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleanerinvoicematcheddata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleanerinvoicematcheddata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCleanerInvoiceMatchedDataRead(ref IQueryable<Destination.Models.destinationTest.CleanerInvoiceMatchedDatum> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CleanerInvoiceMatchedDatum>> GetCleanerInvoiceMatchedData(Query query = null)
        {
            var items = Context.CleanerInvoiceMatchedData.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCleanerInvoiceMatchedDataRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCleanerNosToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleanernos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleanernos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCleanerNosToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleanernos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleanernos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCleanerNosRead(ref IQueryable<Destination.Models.destinationTest.CleanerNo> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CleanerNo>> GetCleanerNos(Query query = null)
        {
            var items = Context.CleanerNos.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCleanerNosRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCleaningPayrolExtraTaskDetailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleaningpayrolextrataskdetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleaningpayrolextrataskdetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCleaningPayrolExtraTaskDetailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleaningpayrolextrataskdetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleaningpayrolextrataskdetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCleaningPayrolExtraTaskDetailsRead(ref IQueryable<Destination.Models.destinationTest.CleaningPayrolExtraTaskDetail> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CleaningPayrolExtraTaskDetail>> GetCleaningPayrolExtraTaskDetails(Query query = null)
        {
            var items = Context.CleaningPayrolExtraTaskDetails.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCleaningPayrolExtraTaskDetailsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCleaningVariancesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleaningvariances/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleaningvariances/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCleaningVariancesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/cleaningvariances/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/cleaningvariances/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCleaningVariancesRead(ref IQueryable<Destination.Models.destinationTest.CleaningVariance> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CleaningVariance>> GetCleaningVariances(Query query = null)
        {
            var items = Context.CleaningVariances.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCleaningVariancesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCleaningVarianceGet(Destination.Models.destinationTest.CleaningVariance item);
        partial void OnGetCleaningVarianceByCleaningVarianceId(ref IQueryable<Destination.Models.destinationTest.CleaningVariance> items);


        public async Task<Destination.Models.destinationTest.CleaningVariance> GetCleaningVarianceByCleaningVarianceId(long cleaningvarianceid)
        {
            var items = Context.CleaningVariances
                              .AsNoTracking()
                              .Where(i => i.CleaningVarianceId == cleaningvarianceid);

 
            OnGetCleaningVarianceByCleaningVarianceId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCleaningVarianceGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCleaningVarianceCreated(Destination.Models.destinationTest.CleaningVariance item);
        partial void OnAfterCleaningVarianceCreated(Destination.Models.destinationTest.CleaningVariance item);

        public async Task<Destination.Models.destinationTest.CleaningVariance> CreateCleaningVariance(Destination.Models.destinationTest.CleaningVariance cleaningvariance)
        {
            OnCleaningVarianceCreated(cleaningvariance);

            var existingItem = Context.CleaningVariances
                              .Where(i => i.CleaningVarianceId == cleaningvariance.CleaningVarianceId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.CleaningVariances.Add(cleaningvariance);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(cleaningvariance).State = EntityState.Detached;
                throw;
            }

            OnAfterCleaningVarianceCreated(cleaningvariance);

            return cleaningvariance;
        }

        public async Task<Destination.Models.destinationTest.CleaningVariance> CancelCleaningVarianceChanges(Destination.Models.destinationTest.CleaningVariance item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCleaningVarianceUpdated(Destination.Models.destinationTest.CleaningVariance item);
        partial void OnAfterCleaningVarianceUpdated(Destination.Models.destinationTest.CleaningVariance item);

        public async Task<Destination.Models.destinationTest.CleaningVariance> UpdateCleaningVariance(long cleaningvarianceid, Destination.Models.destinationTest.CleaningVariance cleaningvariance)
        {
            OnCleaningVarianceUpdated(cleaningvariance);

            var itemToUpdate = Context.CleaningVariances
                              .Where(i => i.CleaningVarianceId == cleaningvariance.CleaningVarianceId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(cleaningvariance);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCleaningVarianceUpdated(cleaningvariance);

            return cleaningvariance;
        }

        partial void OnCleaningVarianceDeleted(Destination.Models.destinationTest.CleaningVariance item);
        partial void OnAfterCleaningVarianceDeleted(Destination.Models.destinationTest.CleaningVariance item);

        public async Task<Destination.Models.destinationTest.CleaningVariance> DeleteCleaningVariance(long cleaningvarianceid)
        {
            var itemToDelete = Context.CleaningVariances
                              .Where(i => i.CleaningVarianceId == cleaningvarianceid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCleaningVarianceDeleted(itemToDelete);


            Context.CleaningVariances.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCleaningVarianceDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCommCodesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/commcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/commcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCommCodesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/commcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/commcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCommCodesRead(ref IQueryable<Destination.Models.destinationTest.CommCode> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CommCode>> GetCommCodes(Query query = null)
        {
            var items = Context.CommCodes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCommCodesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCommCodeGet(Destination.Models.destinationTest.CommCode item);
        partial void OnGetCommCodeByCommcodeid(ref IQueryable<Destination.Models.destinationTest.CommCode> items);


        public async Task<Destination.Models.destinationTest.CommCode> GetCommCodeByCommcodeid(int commcodeid)
        {
            var items = Context.CommCodes
                              .AsNoTracking()
                              .Where(i => i.Commcodeid == commcodeid);

 
            OnGetCommCodeByCommcodeid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCommCodeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCommCodeCreated(Destination.Models.destinationTest.CommCode item);
        partial void OnAfterCommCodeCreated(Destination.Models.destinationTest.CommCode item);

        public async Task<Destination.Models.destinationTest.CommCode> CreateCommCode(Destination.Models.destinationTest.CommCode commcode)
        {
            OnCommCodeCreated(commcode);

            var existingItem = Context.CommCodes
                              .Where(i => i.Commcodeid == commcode.Commcodeid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.CommCodes.Add(commcode);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(commcode).State = EntityState.Detached;
                throw;
            }

            OnAfterCommCodeCreated(commcode);

            return commcode;
        }

        public async Task<Destination.Models.destinationTest.CommCode> CancelCommCodeChanges(Destination.Models.destinationTest.CommCode item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCommCodeUpdated(Destination.Models.destinationTest.CommCode item);
        partial void OnAfterCommCodeUpdated(Destination.Models.destinationTest.CommCode item);

        public async Task<Destination.Models.destinationTest.CommCode> UpdateCommCode(int commcodeid, Destination.Models.destinationTest.CommCode commcode)
        {
            OnCommCodeUpdated(commcode);

            var itemToUpdate = Context.CommCodes
                              .Where(i => i.Commcodeid == commcode.Commcodeid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(commcode);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCommCodeUpdated(commcode);

            return commcode;
        }

        partial void OnCommCodeDeleted(Destination.Models.destinationTest.CommCode item);
        partial void OnAfterCommCodeDeleted(Destination.Models.destinationTest.CommCode item);

        public async Task<Destination.Models.destinationTest.CommCode> DeleteCommCode(int commcodeid)
        {
            var itemToDelete = Context.CommCodes
                              .Where(i => i.Commcodeid == commcodeid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCommCodeDeleted(itemToDelete);


            Context.CommCodes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCommCodeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCommunicationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/communications/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/communications/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCommunicationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/communications/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/communications/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCommunicationsRead(ref IQueryable<Destination.Models.destinationTest.Communication> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Communication>> GetCommunications(Query query = null)
        {
            var items = Context.Communications.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCommunicationsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCommunicationGet(Destination.Models.destinationTest.Communication item);
        partial void OnGetCommunicationByCommid(ref IQueryable<Destination.Models.destinationTest.Communication> items);


        public async Task<Destination.Models.destinationTest.Communication> GetCommunicationByCommid(int commid)
        {
            var items = Context.Communications
                              .AsNoTracking()
                              .Where(i => i.Commid == commid);

 
            OnGetCommunicationByCommid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCommunicationGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCommunicationCreated(Destination.Models.destinationTest.Communication item);
        partial void OnAfterCommunicationCreated(Destination.Models.destinationTest.Communication item);

        public async Task<Destination.Models.destinationTest.Communication> CreateCommunication(Destination.Models.destinationTest.Communication communication)
        {
            OnCommunicationCreated(communication);

            var existingItem = Context.Communications
                              .Where(i => i.Commid == communication.Commid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Communications.Add(communication);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(communication).State = EntityState.Detached;
                throw;
            }

            OnAfterCommunicationCreated(communication);

            return communication;
        }

        public async Task<Destination.Models.destinationTest.Communication> CancelCommunicationChanges(Destination.Models.destinationTest.Communication item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCommunicationUpdated(Destination.Models.destinationTest.Communication item);
        partial void OnAfterCommunicationUpdated(Destination.Models.destinationTest.Communication item);

        public async Task<Destination.Models.destinationTest.Communication> UpdateCommunication(int commid, Destination.Models.destinationTest.Communication communication)
        {
            OnCommunicationUpdated(communication);

            var itemToUpdate = Context.Communications
                              .Where(i => i.Commid == communication.Commid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(communication);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCommunicationUpdated(communication);

            return communication;
        }

        partial void OnCommunicationDeleted(Destination.Models.destinationTest.Communication item);
        partial void OnAfterCommunicationDeleted(Destination.Models.destinationTest.Communication item);

        public async Task<Destination.Models.destinationTest.Communication> DeleteCommunication(int commid)
        {
            var itemToDelete = Context.Communications
                              .Where(i => i.Commid == commid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCommunicationDeleted(itemToDelete);


            Context.Communications.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCommunicationDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCompanyHistoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/companyhistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/companyhistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCompanyHistoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/companyhistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/companyhistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCompanyHistoriesRead(ref IQueryable<Destination.Models.destinationTest.CompanyHistory> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CompanyHistory>> GetCompanyHistories(Query query = null)
        {
            var items = Context.CompanyHistories.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCompanyHistoriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCompanyHistoryGet(Destination.Models.destinationTest.CompanyHistory item);
        partial void OnGetCompanyHistoryById(ref IQueryable<Destination.Models.destinationTest.CompanyHistory> items);


        public async Task<Destination.Models.destinationTest.CompanyHistory> GetCompanyHistoryById(int id)
        {
            var items = Context.CompanyHistories
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetCompanyHistoryById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCompanyHistoryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCompanyHistoryCreated(Destination.Models.destinationTest.CompanyHistory item);
        partial void OnAfterCompanyHistoryCreated(Destination.Models.destinationTest.CompanyHistory item);

        public async Task<Destination.Models.destinationTest.CompanyHistory> CreateCompanyHistory(Destination.Models.destinationTest.CompanyHistory companyhistory)
        {
            OnCompanyHistoryCreated(companyhistory);

            var existingItem = Context.CompanyHistories
                              .Where(i => i.Id == companyhistory.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.CompanyHistories.Add(companyhistory);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(companyhistory).State = EntityState.Detached;
                throw;
            }

            OnAfterCompanyHistoryCreated(companyhistory);

            return companyhistory;
        }

        public async Task<Destination.Models.destinationTest.CompanyHistory> CancelCompanyHistoryChanges(Destination.Models.destinationTest.CompanyHistory item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCompanyHistoryUpdated(Destination.Models.destinationTest.CompanyHistory item);
        partial void OnAfterCompanyHistoryUpdated(Destination.Models.destinationTest.CompanyHistory item);

        public async Task<Destination.Models.destinationTest.CompanyHistory> UpdateCompanyHistory(int id, Destination.Models.destinationTest.CompanyHistory companyhistory)
        {
            OnCompanyHistoryUpdated(companyhistory);

            var itemToUpdate = Context.CompanyHistories
                              .Where(i => i.Id == companyhistory.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(companyhistory);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCompanyHistoryUpdated(companyhistory);

            return companyhistory;
        }

        partial void OnCompanyHistoryDeleted(Destination.Models.destinationTest.CompanyHistory item);
        partial void OnAfterCompanyHistoryDeleted(Destination.Models.destinationTest.CompanyHistory item);

        public async Task<Destination.Models.destinationTest.CompanyHistory> DeleteCompanyHistory(int id)
        {
            var itemToDelete = Context.CompanyHistories
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCompanyHistoryDeleted(itemToDelete);


            Context.CompanyHistories.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCompanyHistoryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportContractTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/contracttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/contracttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportContractTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/contracttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/contracttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnContractTablesRead(ref IQueryable<Destination.Models.destinationTest.ContractTable> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ContractTable>> GetContractTables(Query query = null)
        {
            var items = Context.ContractTables.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnContractTablesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnContractTableGet(Destination.Models.destinationTest.ContractTable item);
        partial void OnGetContractTableById(ref IQueryable<Destination.Models.destinationTest.ContractTable> items);


        public async Task<Destination.Models.destinationTest.ContractTable> GetContractTableById(int id)
        {
            var items = Context.ContractTables
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetContractTableById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnContractTableGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnContractTableCreated(Destination.Models.destinationTest.ContractTable item);
        partial void OnAfterContractTableCreated(Destination.Models.destinationTest.ContractTable item);

        public async Task<Destination.Models.destinationTest.ContractTable> CreateContractTable(Destination.Models.destinationTest.ContractTable contracttable)
        {
            OnContractTableCreated(contracttable);

            var existingItem = Context.ContractTables
                              .Where(i => i.Id == contracttable.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ContractTables.Add(contracttable);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(contracttable).State = EntityState.Detached;
                throw;
            }

            OnAfterContractTableCreated(contracttable);

            return contracttable;
        }

        public async Task<Destination.Models.destinationTest.ContractTable> CancelContractTableChanges(Destination.Models.destinationTest.ContractTable item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnContractTableUpdated(Destination.Models.destinationTest.ContractTable item);
        partial void OnAfterContractTableUpdated(Destination.Models.destinationTest.ContractTable item);

        public async Task<Destination.Models.destinationTest.ContractTable> UpdateContractTable(int id, Destination.Models.destinationTest.ContractTable contracttable)
        {
            OnContractTableUpdated(contracttable);

            var itemToUpdate = Context.ContractTables
                              .Where(i => i.Id == contracttable.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(contracttable);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterContractTableUpdated(contracttable);

            return contracttable;
        }

        partial void OnContractTableDeleted(Destination.Models.destinationTest.ContractTable item);
        partial void OnAfterContractTableDeleted(Destination.Models.destinationTest.ContractTable item);

        public async Task<Destination.Models.destinationTest.ContractTable> DeleteContractTable(int id)
        {
            var itemToDelete = Context.ContractTables
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnContractTableDeleted(itemToDelete);


            Context.ContractTables.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterContractTableDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportControllistsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/controllists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/controllists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportControllistsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/controllists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/controllists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnControllistsRead(ref IQueryable<Destination.Models.destinationTest.Controllist> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Controllist>> GetControllists(Query query = null)
        {
            var items = Context.Controllists.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnControllistsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnControllistGet(Destination.Models.destinationTest.Controllist item);
        partial void OnGetControllistById(ref IQueryable<Destination.Models.destinationTest.Controllist> items);


        public async Task<Destination.Models.destinationTest.Controllist> GetControllistById(int id)
        {
            var items = Context.Controllists
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetControllistById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnControllistGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnControllistCreated(Destination.Models.destinationTest.Controllist item);
        partial void OnAfterControllistCreated(Destination.Models.destinationTest.Controllist item);

        public async Task<Destination.Models.destinationTest.Controllist> CreateControllist(Destination.Models.destinationTest.Controllist controllist)
        {
            OnControllistCreated(controllist);

            var existingItem = Context.Controllists
                              .Where(i => i.Id == controllist.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Controllists.Add(controllist);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(controllist).State = EntityState.Detached;
                throw;
            }

            OnAfterControllistCreated(controllist);

            return controllist;
        }

        public async Task<Destination.Models.destinationTest.Controllist> CancelControllistChanges(Destination.Models.destinationTest.Controllist item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnControllistUpdated(Destination.Models.destinationTest.Controllist item);
        partial void OnAfterControllistUpdated(Destination.Models.destinationTest.Controllist item);

        public async Task<Destination.Models.destinationTest.Controllist> UpdateControllist(int id, Destination.Models.destinationTest.Controllist controllist)
        {
            OnControllistUpdated(controllist);

            var itemToUpdate = Context.Controllists
                              .Where(i => i.Id == controllist.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(controllist);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterControllistUpdated(controllist);

            return controllist;
        }

        partial void OnControllistDeleted(Destination.Models.destinationTest.Controllist item);
        partial void OnAfterControllistDeleted(Destination.Models.destinationTest.Controllist item);

        public async Task<Destination.Models.destinationTest.Controllist> DeleteControllist(int id)
        {
            var itemToDelete = Context.Controllists
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnControllistDeleted(itemToDelete);


            Context.Controllists.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterControllistDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportControllogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/controllogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/controllogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportControllogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/controllogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/controllogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnControllogsRead(ref IQueryable<Destination.Models.destinationTest.Controllog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Controllog>> GetControllogs(Query query = null)
        {
            var items = Context.Controllogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnControllogsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnControllogGet(Destination.Models.destinationTest.Controllog item);
        partial void OnGetControllogById(ref IQueryable<Destination.Models.destinationTest.Controllog> items);


        public async Task<Destination.Models.destinationTest.Controllog> GetControllogById(int id)
        {
            var items = Context.Controllogs
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetControllogById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnControllogGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnControllogCreated(Destination.Models.destinationTest.Controllog item);
        partial void OnAfterControllogCreated(Destination.Models.destinationTest.Controllog item);

        public async Task<Destination.Models.destinationTest.Controllog> CreateControllog(Destination.Models.destinationTest.Controllog controllog)
        {
            OnControllogCreated(controllog);

            var existingItem = Context.Controllogs
                              .Where(i => i.Id == controllog.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Controllogs.Add(controllog);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(controllog).State = EntityState.Detached;
                throw;
            }

            OnAfterControllogCreated(controllog);

            return controllog;
        }

        public async Task<Destination.Models.destinationTest.Controllog> CancelControllogChanges(Destination.Models.destinationTest.Controllog item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnControllogUpdated(Destination.Models.destinationTest.Controllog item);
        partial void OnAfterControllogUpdated(Destination.Models.destinationTest.Controllog item);

        public async Task<Destination.Models.destinationTest.Controllog> UpdateControllog(int id, Destination.Models.destinationTest.Controllog controllog)
        {
            OnControllogUpdated(controllog);

            var itemToUpdate = Context.Controllogs
                              .Where(i => i.Id == controllog.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(controllog);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterControllogUpdated(controllog);

            return controllog;
        }

        partial void OnControllogDeleted(Destination.Models.destinationTest.Controllog item);
        partial void OnAfterControllogDeleted(Destination.Models.destinationTest.Controllog item);

        public async Task<Destination.Models.destinationTest.Controllog> DeleteControllog(int id)
        {
            var itemToDelete = Context.Controllogs
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnControllogDeleted(itemToDelete);


            Context.Controllogs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterControllogDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCoronaAnnualDataToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/coronaannualdata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/coronaannualdata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCoronaAnnualDataToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/coronaannualdata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/coronaannualdata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCoronaAnnualDataRead(ref IQueryable<Destination.Models.destinationTest.CoronaAnnualDatum> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CoronaAnnualDatum>> GetCoronaAnnualData(Query query = null)
        {
            var items = Context.CoronaAnnualData.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCoronaAnnualDataRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCreditRequestsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/creditrequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/creditrequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCreditRequestsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/creditrequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/creditrequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCreditRequestsRead(ref IQueryable<Destination.Models.destinationTest.CreditRequest> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CreditRequest>> GetCreditRequests(Query query = null)
        {
            var items = Context.CreditRequests.AsQueryable();

            items = items.Include(i => i.Booking);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCreditRequestsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCreditRequestGet(Destination.Models.destinationTest.CreditRequest item);
        partial void OnGetCreditRequestByCreditRequestId(ref IQueryable<Destination.Models.destinationTest.CreditRequest> items);


        public async Task<Destination.Models.destinationTest.CreditRequest> GetCreditRequestByCreditRequestId(int creditrequestid)
        {
            var items = Context.CreditRequests
                              .AsNoTracking()
                              .Where(i => i.CreditRequestId == creditrequestid);

            items = items.Include(i => i.Booking);
 
            OnGetCreditRequestByCreditRequestId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCreditRequestGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCreditRequestCreated(Destination.Models.destinationTest.CreditRequest item);
        partial void OnAfterCreditRequestCreated(Destination.Models.destinationTest.CreditRequest item);

        public async Task<Destination.Models.destinationTest.CreditRequest> CreateCreditRequest(Destination.Models.destinationTest.CreditRequest creditrequest)
        {
            OnCreditRequestCreated(creditrequest);

            var existingItem = Context.CreditRequests
                              .Where(i => i.CreditRequestId == creditrequest.CreditRequestId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.CreditRequests.Add(creditrequest);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(creditrequest).State = EntityState.Detached;
                throw;
            }

            OnAfterCreditRequestCreated(creditrequest);

            return creditrequest;
        }

        public async Task<Destination.Models.destinationTest.CreditRequest> CancelCreditRequestChanges(Destination.Models.destinationTest.CreditRequest item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCreditRequestUpdated(Destination.Models.destinationTest.CreditRequest item);
        partial void OnAfterCreditRequestUpdated(Destination.Models.destinationTest.CreditRequest item);

        public async Task<Destination.Models.destinationTest.CreditRequest> UpdateCreditRequest(int creditrequestid, Destination.Models.destinationTest.CreditRequest creditrequest)
        {
            OnCreditRequestUpdated(creditrequest);

            var itemToUpdate = Context.CreditRequests
                              .Where(i => i.CreditRequestId == creditrequest.CreditRequestId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(creditrequest);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCreditRequestUpdated(creditrequest);

            return creditrequest;
        }

        partial void OnCreditRequestDeleted(Destination.Models.destinationTest.CreditRequest item);
        partial void OnAfterCreditRequestDeleted(Destination.Models.destinationTest.CreditRequest item);

        public async Task<Destination.Models.destinationTest.CreditRequest> DeleteCreditRequest(int creditrequestid)
        {
            var itemToDelete = Context.CreditRequests
                              .Where(i => i.CreditRequestId == creditrequestid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCreditRequestDeleted(itemToDelete);


            Context.CreditRequests.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCreditRequestDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCreditRequestTypesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/creditrequesttypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/creditrequesttypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCreditRequestTypesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/creditrequesttypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/creditrequesttypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCreditRequestTypesRead(ref IQueryable<Destination.Models.destinationTest.CreditRequestType> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CreditRequestType>> GetCreditRequestTypes(Query query = null)
        {
            var items = Context.CreditRequestTypes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCreditRequestTypesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCreditRequestTypeGet(Destination.Models.destinationTest.CreditRequestType item);
        partial void OnGetCreditRequestTypeByTypeId(ref IQueryable<Destination.Models.destinationTest.CreditRequestType> items);


        public async Task<Destination.Models.destinationTest.CreditRequestType> GetCreditRequestTypeByTypeId(int typeid)
        {
            var items = Context.CreditRequestTypes
                              .AsNoTracking()
                              .Where(i => i.TypeId == typeid);

 
            OnGetCreditRequestTypeByTypeId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCreditRequestTypeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCreditRequestTypeCreated(Destination.Models.destinationTest.CreditRequestType item);
        partial void OnAfterCreditRequestTypeCreated(Destination.Models.destinationTest.CreditRequestType item);

        public async Task<Destination.Models.destinationTest.CreditRequestType> CreateCreditRequestType(Destination.Models.destinationTest.CreditRequestType creditrequesttype)
        {
            OnCreditRequestTypeCreated(creditrequesttype);

            var existingItem = Context.CreditRequestTypes
                              .Where(i => i.TypeId == creditrequesttype.TypeId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.CreditRequestTypes.Add(creditrequesttype);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(creditrequesttype).State = EntityState.Detached;
                throw;
            }

            OnAfterCreditRequestTypeCreated(creditrequesttype);

            return creditrequesttype;
        }

        public async Task<Destination.Models.destinationTest.CreditRequestType> CancelCreditRequestTypeChanges(Destination.Models.destinationTest.CreditRequestType item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCreditRequestTypeUpdated(Destination.Models.destinationTest.CreditRequestType item);
        partial void OnAfterCreditRequestTypeUpdated(Destination.Models.destinationTest.CreditRequestType item);

        public async Task<Destination.Models.destinationTest.CreditRequestType> UpdateCreditRequestType(int typeid, Destination.Models.destinationTest.CreditRequestType creditrequesttype)
        {
            OnCreditRequestTypeUpdated(creditrequesttype);

            var itemToUpdate = Context.CreditRequestTypes
                              .Where(i => i.TypeId == creditrequesttype.TypeId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(creditrequesttype);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCreditRequestTypeUpdated(creditrequesttype);

            return creditrequesttype;
        }

        partial void OnCreditRequestTypeDeleted(Destination.Models.destinationTest.CreditRequestType item);
        partial void OnAfterCreditRequestTypeDeleted(Destination.Models.destinationTest.CreditRequestType item);

        public async Task<Destination.Models.destinationTest.CreditRequestType> DeleteCreditRequestType(int typeid)
        {
            var itemToDelete = Context.CreditRequestTypes
                              .Where(i => i.TypeId == typeid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCreditRequestTypeDeleted(itemToDelete);


            Context.CreditRequestTypes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCreditRequestTypeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCriticalTaskWarningsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/criticaltaskwarnings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/criticaltaskwarnings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCriticalTaskWarningsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/criticaltaskwarnings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/criticaltaskwarnings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCriticalTaskWarningsRead(ref IQueryable<Destination.Models.destinationTest.CriticalTaskWarning> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CriticalTaskWarning>> GetCriticalTaskWarnings(Query query = null)
        {
            var items = Context.CriticalTaskWarnings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCriticalTaskWarningsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportCurrentdiscountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/currentdiscounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/currentdiscounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCurrentdiscountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/currentdiscounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/currentdiscounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCurrentdiscountsRead(ref IQueryable<Destination.Models.destinationTest.Currentdiscount> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Currentdiscount>> GetCurrentdiscounts(Query query = null)
        {
            var items = Context.Currentdiscounts.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCurrentdiscountsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCurrentdiscountGet(Destination.Models.destinationTest.Currentdiscount item);
        partial void OnGetCurrentdiscountBySpecialsid(ref IQueryable<Destination.Models.destinationTest.Currentdiscount> items);


        public async Task<Destination.Models.destinationTest.Currentdiscount> GetCurrentdiscountBySpecialsid(int specialsid)
        {
            var items = Context.Currentdiscounts
                              .AsNoTracking()
                              .Where(i => i.Specialsid == specialsid);

            items = items.Include(i => i.Property);
 
            OnGetCurrentdiscountBySpecialsid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnCurrentdiscountGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCurrentdiscountCreated(Destination.Models.destinationTest.Currentdiscount item);
        partial void OnAfterCurrentdiscountCreated(Destination.Models.destinationTest.Currentdiscount item);

        public async Task<Destination.Models.destinationTest.Currentdiscount> CreateCurrentdiscount(Destination.Models.destinationTest.Currentdiscount currentdiscount)
        {
            OnCurrentdiscountCreated(currentdiscount);

            var existingItem = Context.Currentdiscounts
                              .Where(i => i.Specialsid == currentdiscount.Specialsid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Currentdiscounts.Add(currentdiscount);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(currentdiscount).State = EntityState.Detached;
                throw;
            }

            OnAfterCurrentdiscountCreated(currentdiscount);

            return currentdiscount;
        }

        public async Task<Destination.Models.destinationTest.Currentdiscount> CancelCurrentdiscountChanges(Destination.Models.destinationTest.Currentdiscount item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCurrentdiscountUpdated(Destination.Models.destinationTest.Currentdiscount item);
        partial void OnAfterCurrentdiscountUpdated(Destination.Models.destinationTest.Currentdiscount item);

        public async Task<Destination.Models.destinationTest.Currentdiscount> UpdateCurrentdiscount(int specialsid, Destination.Models.destinationTest.Currentdiscount currentdiscount)
        {
            OnCurrentdiscountUpdated(currentdiscount);

            var itemToUpdate = Context.Currentdiscounts
                              .Where(i => i.Specialsid == currentdiscount.Specialsid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(currentdiscount);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCurrentdiscountUpdated(currentdiscount);

            return currentdiscount;
        }

        partial void OnCurrentdiscountDeleted(Destination.Models.destinationTest.Currentdiscount item);
        partial void OnAfterCurrentdiscountDeleted(Destination.Models.destinationTest.Currentdiscount item);

        public async Task<Destination.Models.destinationTest.Currentdiscount> DeleteCurrentdiscount(int specialsid)
        {
            var itemToDelete = Context.Currentdiscounts
                              .Where(i => i.Specialsid == specialsid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCurrentdiscountDeleted(itemToDelete);


            Context.Currentdiscounts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCurrentdiscountDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCurrentDiscountsHistoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/currentdiscountshistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/currentdiscountshistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCurrentDiscountsHistoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/currentdiscountshistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/currentdiscountshistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCurrentDiscountsHistoriesRead(ref IQueryable<Destination.Models.destinationTest.CurrentDiscountsHistory> items);

        public async Task<IQueryable<Destination.Models.destinationTest.CurrentDiscountsHistory>> GetCurrentDiscountsHistories(Query query = null)
        {
            var items = Context.CurrentDiscountsHistories.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnCurrentDiscountsHistoriesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportDailyProcessedMinNightsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/dailyprocessedminnights/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/dailyprocessedminnights/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDailyProcessedMinNightsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/dailyprocessedminnights/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/dailyprocessedminnights/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDailyProcessedMinNightsRead(ref IQueryable<Destination.Models.destinationTest.DailyProcessedMinNight> items);

        public async Task<IQueryable<Destination.Models.destinationTest.DailyProcessedMinNight>> GetDailyProcessedMinNights(Query query = null)
        {
            var items = Context.DailyProcessedMinNights.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnDailyProcessedMinNightsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnDailyProcessedMinNightGet(Destination.Models.destinationTest.DailyProcessedMinNight item);
        partial void OnGetDailyProcessedMinNightById(ref IQueryable<Destination.Models.destinationTest.DailyProcessedMinNight> items);


        public async Task<Destination.Models.destinationTest.DailyProcessedMinNight> GetDailyProcessedMinNightById(int id)
        {
            var items = Context.DailyProcessedMinNights
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetDailyProcessedMinNightById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnDailyProcessedMinNightGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnDailyProcessedMinNightCreated(Destination.Models.destinationTest.DailyProcessedMinNight item);
        partial void OnAfterDailyProcessedMinNightCreated(Destination.Models.destinationTest.DailyProcessedMinNight item);

        public async Task<Destination.Models.destinationTest.DailyProcessedMinNight> CreateDailyProcessedMinNight(Destination.Models.destinationTest.DailyProcessedMinNight dailyprocessedminnight)
        {
            OnDailyProcessedMinNightCreated(dailyprocessedminnight);

            var existingItem = Context.DailyProcessedMinNights
                              .Where(i => i.Id == dailyprocessedminnight.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.DailyProcessedMinNights.Add(dailyprocessedminnight);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(dailyprocessedminnight).State = EntityState.Detached;
                throw;
            }

            OnAfterDailyProcessedMinNightCreated(dailyprocessedminnight);

            return dailyprocessedminnight;
        }

        public async Task<Destination.Models.destinationTest.DailyProcessedMinNight> CancelDailyProcessedMinNightChanges(Destination.Models.destinationTest.DailyProcessedMinNight item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnDailyProcessedMinNightUpdated(Destination.Models.destinationTest.DailyProcessedMinNight item);
        partial void OnAfterDailyProcessedMinNightUpdated(Destination.Models.destinationTest.DailyProcessedMinNight item);

        public async Task<Destination.Models.destinationTest.DailyProcessedMinNight> UpdateDailyProcessedMinNight(int id, Destination.Models.destinationTest.DailyProcessedMinNight dailyprocessedminnight)
        {
            OnDailyProcessedMinNightUpdated(dailyprocessedminnight);

            var itemToUpdate = Context.DailyProcessedMinNights
                              .Where(i => i.Id == dailyprocessedminnight.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(dailyprocessedminnight);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterDailyProcessedMinNightUpdated(dailyprocessedminnight);

            return dailyprocessedminnight;
        }

        partial void OnDailyProcessedMinNightDeleted(Destination.Models.destinationTest.DailyProcessedMinNight item);
        partial void OnAfterDailyProcessedMinNightDeleted(Destination.Models.destinationTest.DailyProcessedMinNight item);

        public async Task<Destination.Models.destinationTest.DailyProcessedMinNight> DeleteDailyProcessedMinNight(int id)
        {
            var itemToDelete = Context.DailyProcessedMinNights
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnDailyProcessedMinNightDeleted(itemToDelete);


            Context.DailyProcessedMinNights.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterDailyProcessedMinNightDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportDailyRatesBasedOnPropertyRatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/dailyratesbasedonpropertyrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/dailyratesbasedonpropertyrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDailyRatesBasedOnPropertyRatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/dailyratesbasedonpropertyrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/dailyratesbasedonpropertyrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDailyRatesBasedOnPropertyRatesRead(ref IQueryable<Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate>> GetDailyRatesBasedOnPropertyRates(Query query = null)
        {
            var items = Context.DailyRatesBasedOnPropertyRates.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnDailyRatesBasedOnPropertyRatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnDailyRatesBasedOnPropertyRateGet(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate item);
        partial void OnGetDailyRatesBasedOnPropertyRateById(ref IQueryable<Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate> items);


        public async Task<Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate> GetDailyRatesBasedOnPropertyRateById(int id)
        {
            var items = Context.DailyRatesBasedOnPropertyRates
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetDailyRatesBasedOnPropertyRateById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnDailyRatesBasedOnPropertyRateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnDailyRatesBasedOnPropertyRateCreated(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate item);
        partial void OnAfterDailyRatesBasedOnPropertyRateCreated(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate item);

        public async Task<Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate> CreateDailyRatesBasedOnPropertyRate(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate dailyratesbasedonpropertyrate)
        {
            OnDailyRatesBasedOnPropertyRateCreated(dailyratesbasedonpropertyrate);

            var existingItem = Context.DailyRatesBasedOnPropertyRates
                              .Where(i => i.Id == dailyratesbasedonpropertyrate.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.DailyRatesBasedOnPropertyRates.Add(dailyratesbasedonpropertyrate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(dailyratesbasedonpropertyrate).State = EntityState.Detached;
                throw;
            }

            OnAfterDailyRatesBasedOnPropertyRateCreated(dailyratesbasedonpropertyrate);

            return dailyratesbasedonpropertyrate;
        }

        public async Task<Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate> CancelDailyRatesBasedOnPropertyRateChanges(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnDailyRatesBasedOnPropertyRateUpdated(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate item);
        partial void OnAfterDailyRatesBasedOnPropertyRateUpdated(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate item);

        public async Task<Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate> UpdateDailyRatesBasedOnPropertyRate(int id, Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate dailyratesbasedonpropertyrate)
        {
            OnDailyRatesBasedOnPropertyRateUpdated(dailyratesbasedonpropertyrate);

            var itemToUpdate = Context.DailyRatesBasedOnPropertyRates
                              .Where(i => i.Id == dailyratesbasedonpropertyrate.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(dailyratesbasedonpropertyrate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterDailyRatesBasedOnPropertyRateUpdated(dailyratesbasedonpropertyrate);

            return dailyratesbasedonpropertyrate;
        }

        partial void OnDailyRatesBasedOnPropertyRateDeleted(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate item);
        partial void OnAfterDailyRatesBasedOnPropertyRateDeleted(Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate item);

        public async Task<Destination.Models.destinationTest.DailyRatesBasedOnPropertyRate> DeleteDailyRatesBasedOnPropertyRate(int id)
        {
            var itemToDelete = Context.DailyRatesBasedOnPropertyRates
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnDailyRatesBasedOnPropertyRateDeleted(itemToDelete);


            Context.DailyRatesBasedOnPropertyRates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterDailyRatesBasedOnPropertyRateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportDailyStatsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/dailystats/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/dailystats/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDailyStatsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/dailystats/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/dailystats/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDailyStatsRead(ref IQueryable<Destination.Models.destinationTest.DailyStat> items);

        public async Task<IQueryable<Destination.Models.destinationTest.DailyStat>> GetDailyStats(Query query = null)
        {
            var items = Context.DailyStats.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnDailyStatsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnDailyStatGet(Destination.Models.destinationTest.DailyStat item);
        partial void OnGetDailyStatByIntStatsId(ref IQueryable<Destination.Models.destinationTest.DailyStat> items);


        public async Task<Destination.Models.destinationTest.DailyStat> GetDailyStatByIntStatsId(int intstatsid)
        {
            var items = Context.DailyStats
                              .AsNoTracking()
                              .Where(i => i.IntStatsId == intstatsid);

 
            OnGetDailyStatByIntStatsId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnDailyStatGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnDailyStatCreated(Destination.Models.destinationTest.DailyStat item);
        partial void OnAfterDailyStatCreated(Destination.Models.destinationTest.DailyStat item);

        public async Task<Destination.Models.destinationTest.DailyStat> CreateDailyStat(Destination.Models.destinationTest.DailyStat dailystat)
        {
            OnDailyStatCreated(dailystat);

            var existingItem = Context.DailyStats
                              .Where(i => i.IntStatsId == dailystat.IntStatsId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.DailyStats.Add(dailystat);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(dailystat).State = EntityState.Detached;
                throw;
            }

            OnAfterDailyStatCreated(dailystat);

            return dailystat;
        }

        public async Task<Destination.Models.destinationTest.DailyStat> CancelDailyStatChanges(Destination.Models.destinationTest.DailyStat item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnDailyStatUpdated(Destination.Models.destinationTest.DailyStat item);
        partial void OnAfterDailyStatUpdated(Destination.Models.destinationTest.DailyStat item);

        public async Task<Destination.Models.destinationTest.DailyStat> UpdateDailyStat(int intstatsid, Destination.Models.destinationTest.DailyStat dailystat)
        {
            OnDailyStatUpdated(dailystat);

            var itemToUpdate = Context.DailyStats
                              .Where(i => i.IntStatsId == dailystat.IntStatsId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(dailystat);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterDailyStatUpdated(dailystat);

            return dailystat;
        }

        partial void OnDailyStatDeleted(Destination.Models.destinationTest.DailyStat item);
        partial void OnAfterDailyStatDeleted(Destination.Models.destinationTest.DailyStat item);

        public async Task<Destination.Models.destinationTest.DailyStat> DeleteDailyStat(int intstatsid)
        {
            var itemToDelete = Context.DailyStats
                              .Where(i => i.IntStatsId == intstatsid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnDailyStatDeleted(itemToDelete);


            Context.DailyStats.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterDailyStatDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportDeletedGapHolderBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/deletedgapholderbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/deletedgapholderbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDeletedGapHolderBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/deletedgapholderbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/deletedgapholderbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDeletedGapHolderBookingsRead(ref IQueryable<Destination.Models.destinationTest.DeletedGapHolderBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.DeletedGapHolderBooking>> GetDeletedGapHolderBookings(Query query = null)
        {
            var items = Context.DeletedGapHolderBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnDeletedGapHolderBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportDepositHoldLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/depositholdlogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/depositholdlogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDepositHoldLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/depositholdlogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/depositholdlogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDepositHoldLogsRead(ref IQueryable<Destination.Models.destinationTest.DepositHoldLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.DepositHoldLog>> GetDepositHoldLogs(Query query = null)
        {
            var items = Context.DepositHoldLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnDepositHoldLogsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportDiscountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/discounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/discounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDiscountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/discounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/discounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDiscountsRead(ref IQueryable<Destination.Models.destinationTest.Discount> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Discount>> GetDiscounts(Query query = null)
        {
            var items = Context.Discounts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnDiscountsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnDiscountGet(Destination.Models.destinationTest.Discount item);
        partial void OnGetDiscountByDiscountid(ref IQueryable<Destination.Models.destinationTest.Discount> items);


        public async Task<Destination.Models.destinationTest.Discount> GetDiscountByDiscountid(int discountid)
        {
            var items = Context.Discounts
                              .AsNoTracking()
                              .Where(i => i.Discountid == discountid);

 
            OnGetDiscountByDiscountid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnDiscountGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnDiscountCreated(Destination.Models.destinationTest.Discount item);
        partial void OnAfterDiscountCreated(Destination.Models.destinationTest.Discount item);

        public async Task<Destination.Models.destinationTest.Discount> CreateDiscount(Destination.Models.destinationTest.Discount discount)
        {
            OnDiscountCreated(discount);

            var existingItem = Context.Discounts
                              .Where(i => i.Discountid == discount.Discountid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Discounts.Add(discount);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(discount).State = EntityState.Detached;
                throw;
            }

            OnAfterDiscountCreated(discount);

            return discount;
        }

        public async Task<Destination.Models.destinationTest.Discount> CancelDiscountChanges(Destination.Models.destinationTest.Discount item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnDiscountUpdated(Destination.Models.destinationTest.Discount item);
        partial void OnAfterDiscountUpdated(Destination.Models.destinationTest.Discount item);

        public async Task<Destination.Models.destinationTest.Discount> UpdateDiscount(int discountid, Destination.Models.destinationTest.Discount discount)
        {
            OnDiscountUpdated(discount);

            var itemToUpdate = Context.Discounts
                              .Where(i => i.Discountid == discount.Discountid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(discount);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterDiscountUpdated(discount);

            return discount;
        }

        partial void OnDiscountDeleted(Destination.Models.destinationTest.Discount item);
        partial void OnAfterDiscountDeleted(Destination.Models.destinationTest.Discount item);

        public async Task<Destination.Models.destinationTest.Discount> DeleteDiscount(int discountid)
        {
            var itemToDelete = Context.Discounts
                              .Where(i => i.Discountid == discountid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnDiscountDeleted(itemToDelete);


            Context.Discounts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterDiscountDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportDoNotRentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/donotrents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/donotrents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDoNotRentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/donotrents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/donotrents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDoNotRentsRead(ref IQueryable<Destination.Models.destinationTest.DoNotRent> items);

        public async Task<IQueryable<Destination.Models.destinationTest.DoNotRent>> GetDoNotRents(Query query = null)
        {
            var items = Context.DoNotRents.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnDoNotRentsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportDoorCodeLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/doorcodelogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/doorcodelogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDoorCodeLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/doorcodelogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/doorcodelogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDoorCodeLogsRead(ref IQueryable<Destination.Models.destinationTest.DoorCodeLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.DoorCodeLog>> GetDoorCodeLogs(Query query = null)
        {
            var items = Context.DoorCodeLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnDoorCodeLogsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnDoorCodeLogGet(Destination.Models.destinationTest.DoorCodeLog item);
        partial void OnGetDoorCodeLogById(ref IQueryable<Destination.Models.destinationTest.DoorCodeLog> items);


        public async Task<Destination.Models.destinationTest.DoorCodeLog> GetDoorCodeLogById(int id)
        {
            var items = Context.DoorCodeLogs
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetDoorCodeLogById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnDoorCodeLogGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnDoorCodeLogCreated(Destination.Models.destinationTest.DoorCodeLog item);
        partial void OnAfterDoorCodeLogCreated(Destination.Models.destinationTest.DoorCodeLog item);

        public async Task<Destination.Models.destinationTest.DoorCodeLog> CreateDoorCodeLog(Destination.Models.destinationTest.DoorCodeLog doorcodelog)
        {
            OnDoorCodeLogCreated(doorcodelog);

            var existingItem = Context.DoorCodeLogs
                              .Where(i => i.Id == doorcodelog.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.DoorCodeLogs.Add(doorcodelog);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(doorcodelog).State = EntityState.Detached;
                throw;
            }

            OnAfterDoorCodeLogCreated(doorcodelog);

            return doorcodelog;
        }

        public async Task<Destination.Models.destinationTest.DoorCodeLog> CancelDoorCodeLogChanges(Destination.Models.destinationTest.DoorCodeLog item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnDoorCodeLogUpdated(Destination.Models.destinationTest.DoorCodeLog item);
        partial void OnAfterDoorCodeLogUpdated(Destination.Models.destinationTest.DoorCodeLog item);

        public async Task<Destination.Models.destinationTest.DoorCodeLog> UpdateDoorCodeLog(int id, Destination.Models.destinationTest.DoorCodeLog doorcodelog)
        {
            OnDoorCodeLogUpdated(doorcodelog);

            var itemToUpdate = Context.DoorCodeLogs
                              .Where(i => i.Id == doorcodelog.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(doorcodelog);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterDoorCodeLogUpdated(doorcodelog);

            return doorcodelog;
        }

        partial void OnDoorCodeLogDeleted(Destination.Models.destinationTest.DoorCodeLog item);
        partial void OnAfterDoorCodeLogDeleted(Destination.Models.destinationTest.DoorCodeLog item);

        public async Task<Destination.Models.destinationTest.DoorCodeLog> DeleteDoorCodeLog(int id)
        {
            var itemToDelete = Context.DoorCodeLogs
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnDoorCodeLogDeleted(itemToDelete);


            Context.DoorCodeLogs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterDoorCodeLogDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportEmailRemoveListsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/emailremovelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/emailremovelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportEmailRemoveListsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/emailremovelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/emailremovelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnEmailRemoveListsRead(ref IQueryable<Destination.Models.destinationTest.EmailRemoveList> items);

        public async Task<IQueryable<Destination.Models.destinationTest.EmailRemoveList>> GetEmailRemoveLists(Query query = null)
        {
            var items = Context.EmailRemoveLists.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnEmailRemoveListsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnEmailRemoveListGet(Destination.Models.destinationTest.EmailRemoveList item);
        partial void OnGetEmailRemoveListById(ref IQueryable<Destination.Models.destinationTest.EmailRemoveList> items);


        public async Task<Destination.Models.destinationTest.EmailRemoveList> GetEmailRemoveListById(int id)
        {
            var items = Context.EmailRemoveLists
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetEmailRemoveListById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnEmailRemoveListGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnEmailRemoveListCreated(Destination.Models.destinationTest.EmailRemoveList item);
        partial void OnAfterEmailRemoveListCreated(Destination.Models.destinationTest.EmailRemoveList item);

        public async Task<Destination.Models.destinationTest.EmailRemoveList> CreateEmailRemoveList(Destination.Models.destinationTest.EmailRemoveList emailremovelist)
        {
            OnEmailRemoveListCreated(emailremovelist);

            var existingItem = Context.EmailRemoveLists
                              .Where(i => i.Id == emailremovelist.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.EmailRemoveLists.Add(emailremovelist);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(emailremovelist).State = EntityState.Detached;
                throw;
            }

            OnAfterEmailRemoveListCreated(emailremovelist);

            return emailremovelist;
        }

        public async Task<Destination.Models.destinationTest.EmailRemoveList> CancelEmailRemoveListChanges(Destination.Models.destinationTest.EmailRemoveList item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnEmailRemoveListUpdated(Destination.Models.destinationTest.EmailRemoveList item);
        partial void OnAfterEmailRemoveListUpdated(Destination.Models.destinationTest.EmailRemoveList item);

        public async Task<Destination.Models.destinationTest.EmailRemoveList> UpdateEmailRemoveList(int id, Destination.Models.destinationTest.EmailRemoveList emailremovelist)
        {
            OnEmailRemoveListUpdated(emailremovelist);

            var itemToUpdate = Context.EmailRemoveLists
                              .Where(i => i.Id == emailremovelist.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(emailremovelist);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterEmailRemoveListUpdated(emailremovelist);

            return emailremovelist;
        }

        partial void OnEmailRemoveListDeleted(Destination.Models.destinationTest.EmailRemoveList item);
        partial void OnAfterEmailRemoveListDeleted(Destination.Models.destinationTest.EmailRemoveList item);

        public async Task<Destination.Models.destinationTest.EmailRemoveList> DeleteEmailRemoveList(int id)
        {
            var itemToDelete = Context.EmailRemoveLists
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnEmailRemoveListDeleted(itemToDelete);


            Context.EmailRemoveLists.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterEmailRemoveListDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportEmailRemoveList1SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/emailremovelist1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/emailremovelist1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportEmailRemoveList1SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/emailremovelist1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/emailremovelist1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnEmailRemoveList1SRead(ref IQueryable<Destination.Models.destinationTest.EmailRemoveList1> items);

        public async Task<IQueryable<Destination.Models.destinationTest.EmailRemoveList1>> GetEmailRemoveList1S(Query query = null)
        {
            var items = Context.EmailRemoveList1S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnEmailRemoveList1SRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnEmailRemoveList1Get(Destination.Models.destinationTest.EmailRemoveList1 item);
        partial void OnGetEmailRemoveList1ById(ref IQueryable<Destination.Models.destinationTest.EmailRemoveList1> items);


        public async Task<Destination.Models.destinationTest.EmailRemoveList1> GetEmailRemoveList1ById(int id)
        {
            var items = Context.EmailRemoveList1S
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetEmailRemoveList1ById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnEmailRemoveList1Get(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnEmailRemoveList1Created(Destination.Models.destinationTest.EmailRemoveList1 item);
        partial void OnAfterEmailRemoveList1Created(Destination.Models.destinationTest.EmailRemoveList1 item);

        public async Task<Destination.Models.destinationTest.EmailRemoveList1> CreateEmailRemoveList1(Destination.Models.destinationTest.EmailRemoveList1 emailremovelist1)
        {
            OnEmailRemoveList1Created(emailremovelist1);

            var existingItem = Context.EmailRemoveList1S
                              .Where(i => i.Id == emailremovelist1.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.EmailRemoveList1S.Add(emailremovelist1);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(emailremovelist1).State = EntityState.Detached;
                throw;
            }

            OnAfterEmailRemoveList1Created(emailremovelist1);

            return emailremovelist1;
        }

        public async Task<Destination.Models.destinationTest.EmailRemoveList1> CancelEmailRemoveList1Changes(Destination.Models.destinationTest.EmailRemoveList1 item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnEmailRemoveList1Updated(Destination.Models.destinationTest.EmailRemoveList1 item);
        partial void OnAfterEmailRemoveList1Updated(Destination.Models.destinationTest.EmailRemoveList1 item);

        public async Task<Destination.Models.destinationTest.EmailRemoveList1> UpdateEmailRemoveList1(int id, Destination.Models.destinationTest.EmailRemoveList1 emailremovelist1)
        {
            OnEmailRemoveList1Updated(emailremovelist1);

            var itemToUpdate = Context.EmailRemoveList1S
                              .Where(i => i.Id == emailremovelist1.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(emailremovelist1);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterEmailRemoveList1Updated(emailremovelist1);

            return emailremovelist1;
        }

        partial void OnEmailRemoveList1Deleted(Destination.Models.destinationTest.EmailRemoveList1 item);
        partial void OnAfterEmailRemoveList1Deleted(Destination.Models.destinationTest.EmailRemoveList1 item);

        public async Task<Destination.Models.destinationTest.EmailRemoveList1> DeleteEmailRemoveList1(int id)
        {
            var itemToDelete = Context.EmailRemoveList1S
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnEmailRemoveList1Deleted(itemToDelete);


            Context.EmailRemoveList1S.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterEmailRemoveList1Deleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportEmailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/emails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/emails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportEmailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/emails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/emails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnEmailsRead(ref IQueryable<Destination.Models.destinationTest.Email> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Email>> GetEmails(Query query = null)
        {
            var items = Context.Emails.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnEmailsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnEmailGet(Destination.Models.destinationTest.Email item);
        partial void OnGetEmailByEmailid(ref IQueryable<Destination.Models.destinationTest.Email> items);


        public async Task<Destination.Models.destinationTest.Email> GetEmailByEmailid(int emailid)
        {
            var items = Context.Emails
                              .AsNoTracking()
                              .Where(i => i.Emailid == emailid);

 
            OnGetEmailByEmailid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnEmailGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnEmailCreated(Destination.Models.destinationTest.Email item);
        partial void OnAfterEmailCreated(Destination.Models.destinationTest.Email item);

        public async Task<Destination.Models.destinationTest.Email> CreateEmail(Destination.Models.destinationTest.Email email)
        {
            OnEmailCreated(email);

            var existingItem = Context.Emails
                              .Where(i => i.Emailid == email.Emailid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Emails.Add(email);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(email).State = EntityState.Detached;
                throw;
            }

            OnAfterEmailCreated(email);

            return email;
        }

        public async Task<Destination.Models.destinationTest.Email> CancelEmailChanges(Destination.Models.destinationTest.Email item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnEmailUpdated(Destination.Models.destinationTest.Email item);
        partial void OnAfterEmailUpdated(Destination.Models.destinationTest.Email item);

        public async Task<Destination.Models.destinationTest.Email> UpdateEmail(int emailid, Destination.Models.destinationTest.Email email)
        {
            OnEmailUpdated(email);

            var itemToUpdate = Context.Emails
                              .Where(i => i.Emailid == email.Emailid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(email);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterEmailUpdated(email);

            return email;
        }

        partial void OnEmailDeleted(Destination.Models.destinationTest.Email item);
        partial void OnAfterEmailDeleted(Destination.Models.destinationTest.Email item);

        public async Task<Destination.Models.destinationTest.Email> DeleteEmail(int emailid)
        {
            var itemToDelete = Context.Emails
                              .Where(i => i.Emailid == emailid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnEmailDeleted(itemToDelete);


            Context.Emails.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterEmailDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportEventDatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/eventdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/eventdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportEventDatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/eventdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/eventdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnEventDatesRead(ref IQueryable<Destination.Models.destinationTest.EventDate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.EventDate>> GetEventDates(Query query = null)
        {
            var items = Context.EventDates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnEventDatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnEventDateGet(Destination.Models.destinationTest.EventDate item);
        partial void OnGetEventDateById(ref IQueryable<Destination.Models.destinationTest.EventDate> items);


        public async Task<Destination.Models.destinationTest.EventDate> GetEventDateById(int id)
        {
            var items = Context.EventDates
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetEventDateById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnEventDateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnEventDateCreated(Destination.Models.destinationTest.EventDate item);
        partial void OnAfterEventDateCreated(Destination.Models.destinationTest.EventDate item);

        public async Task<Destination.Models.destinationTest.EventDate> CreateEventDate(Destination.Models.destinationTest.EventDate eventdate)
        {
            OnEventDateCreated(eventdate);

            var existingItem = Context.EventDates
                              .Where(i => i.Id == eventdate.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.EventDates.Add(eventdate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(eventdate).State = EntityState.Detached;
                throw;
            }

            OnAfterEventDateCreated(eventdate);

            return eventdate;
        }

        public async Task<Destination.Models.destinationTest.EventDate> CancelEventDateChanges(Destination.Models.destinationTest.EventDate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnEventDateUpdated(Destination.Models.destinationTest.EventDate item);
        partial void OnAfterEventDateUpdated(Destination.Models.destinationTest.EventDate item);

        public async Task<Destination.Models.destinationTest.EventDate> UpdateEventDate(int id, Destination.Models.destinationTest.EventDate eventdate)
        {
            OnEventDateUpdated(eventdate);

            var itemToUpdate = Context.EventDates
                              .Where(i => i.Id == eventdate.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(eventdate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterEventDateUpdated(eventdate);

            return eventdate;
        }

        partial void OnEventDateDeleted(Destination.Models.destinationTest.EventDate item);
        partial void OnAfterEventDateDeleted(Destination.Models.destinationTest.EventDate item);

        public async Task<Destination.Models.destinationTest.EventDate> DeleteEventDate(int id)
        {
            var itemToDelete = Context.EventDates
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnEventDateDeleted(itemToDelete);


            Context.EventDates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterEventDateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportFavoritesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/favorites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/favorites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportFavoritesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/favorites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/favorites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnFavoritesRead(ref IQueryable<Destination.Models.destinationTest.Favorite> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Favorite>> GetFavorites(Query query = null)
        {
            var items = Context.Favorites.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnFavoritesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnFavoriteGet(Destination.Models.destinationTest.Favorite item);
        partial void OnGetFavoriteByIntFavId(ref IQueryable<Destination.Models.destinationTest.Favorite> items);


        public async Task<Destination.Models.destinationTest.Favorite> GetFavoriteByIntFavId(int intfavid)
        {
            var items = Context.Favorites
                              .AsNoTracking()
                              .Where(i => i.IntFavId == intfavid);

 
            OnGetFavoriteByIntFavId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnFavoriteGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnFavoriteCreated(Destination.Models.destinationTest.Favorite item);
        partial void OnAfterFavoriteCreated(Destination.Models.destinationTest.Favorite item);

        public async Task<Destination.Models.destinationTest.Favorite> CreateFavorite(Destination.Models.destinationTest.Favorite favorite)
        {
            OnFavoriteCreated(favorite);

            var existingItem = Context.Favorites
                              .Where(i => i.IntFavId == favorite.IntFavId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Favorites.Add(favorite);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(favorite).State = EntityState.Detached;
                throw;
            }

            OnAfterFavoriteCreated(favorite);

            return favorite;
        }

        public async Task<Destination.Models.destinationTest.Favorite> CancelFavoriteChanges(Destination.Models.destinationTest.Favorite item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnFavoriteUpdated(Destination.Models.destinationTest.Favorite item);
        partial void OnAfterFavoriteUpdated(Destination.Models.destinationTest.Favorite item);

        public async Task<Destination.Models.destinationTest.Favorite> UpdateFavorite(int intfavid, Destination.Models.destinationTest.Favorite favorite)
        {
            OnFavoriteUpdated(favorite);

            var itemToUpdate = Context.Favorites
                              .Where(i => i.IntFavId == favorite.IntFavId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(favorite);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterFavoriteUpdated(favorite);

            return favorite;
        }

        partial void OnFavoriteDeleted(Destination.Models.destinationTest.Favorite item);
        partial void OnAfterFavoriteDeleted(Destination.Models.destinationTest.Favorite item);

        public async Task<Destination.Models.destinationTest.Favorite> DeleteFavorite(int intfavid)
        {
            var itemToDelete = Context.Favorites
                              .Where(i => i.IntFavId == intfavid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnFavoriteDeleted(itemToDelete);


            Context.Favorites.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterFavoriteDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportFilterDataForBulkSmsMailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/filterdataforbulksmsmails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/filterdataforbulksmsmails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportFilterDataForBulkSmsMailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/filterdataforbulksmsmails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/filterdataforbulksmsmails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnFilterDataForBulkSmsMailsRead(ref IQueryable<Destination.Models.destinationTest.FilterDataForBulkSmsMail> items);

        public async Task<IQueryable<Destination.Models.destinationTest.FilterDataForBulkSmsMail>> GetFilterDataForBulkSmsMails(Query query = null)
        {
            var items = Context.FilterDataForBulkSmsMails.AsQueryable();

            items = items.Include(i => i.Campaign);
            items = items.Include(i => i.Property);
            items = items.Include(i => i.PropertySource);
            items = items.Include(i => i.BookingStatus);
            items = items.Include(i => i.Template);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnFilterDataForBulkSmsMailsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnFilterDataForBulkSmsMailGet(Destination.Models.destinationTest.FilterDataForBulkSmsMail item);
        partial void OnGetFilterDataForBulkSmsMailById(ref IQueryable<Destination.Models.destinationTest.FilterDataForBulkSmsMail> items);


        public async Task<Destination.Models.destinationTest.FilterDataForBulkSmsMail> GetFilterDataForBulkSmsMailById(int id)
        {
            var items = Context.FilterDataForBulkSmsMails
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Campaign);
            items = items.Include(i => i.Property);
            items = items.Include(i => i.PropertySource);
            items = items.Include(i => i.BookingStatus);
            items = items.Include(i => i.Template);
 
            OnGetFilterDataForBulkSmsMailById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnFilterDataForBulkSmsMailGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnFilterDataForBulkSmsMailCreated(Destination.Models.destinationTest.FilterDataForBulkSmsMail item);
        partial void OnAfterFilterDataForBulkSmsMailCreated(Destination.Models.destinationTest.FilterDataForBulkSmsMail item);

        public async Task<Destination.Models.destinationTest.FilterDataForBulkSmsMail> CreateFilterDataForBulkSmsMail(Destination.Models.destinationTest.FilterDataForBulkSmsMail filterdataforbulksmsmail)
        {
            OnFilterDataForBulkSmsMailCreated(filterdataforbulksmsmail);

            var existingItem = Context.FilterDataForBulkSmsMails
                              .Where(i => i.Id == filterdataforbulksmsmail.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.FilterDataForBulkSmsMails.Add(filterdataforbulksmsmail);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(filterdataforbulksmsmail).State = EntityState.Detached;
                throw;
            }

            OnAfterFilterDataForBulkSmsMailCreated(filterdataforbulksmsmail);

            return filterdataforbulksmsmail;
        }

        public async Task<Destination.Models.destinationTest.FilterDataForBulkSmsMail> CancelFilterDataForBulkSmsMailChanges(Destination.Models.destinationTest.FilterDataForBulkSmsMail item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnFilterDataForBulkSmsMailUpdated(Destination.Models.destinationTest.FilterDataForBulkSmsMail item);
        partial void OnAfterFilterDataForBulkSmsMailUpdated(Destination.Models.destinationTest.FilterDataForBulkSmsMail item);

        public async Task<Destination.Models.destinationTest.FilterDataForBulkSmsMail> UpdateFilterDataForBulkSmsMail(int id, Destination.Models.destinationTest.FilterDataForBulkSmsMail filterdataforbulksmsmail)
        {
            OnFilterDataForBulkSmsMailUpdated(filterdataforbulksmsmail);

            var itemToUpdate = Context.FilterDataForBulkSmsMails
                              .Where(i => i.Id == filterdataforbulksmsmail.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(filterdataforbulksmsmail);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterFilterDataForBulkSmsMailUpdated(filterdataforbulksmsmail);

            return filterdataforbulksmsmail;
        }

        partial void OnFilterDataForBulkSmsMailDeleted(Destination.Models.destinationTest.FilterDataForBulkSmsMail item);
        partial void OnAfterFilterDataForBulkSmsMailDeleted(Destination.Models.destinationTest.FilterDataForBulkSmsMail item);

        public async Task<Destination.Models.destinationTest.FilterDataForBulkSmsMail> DeleteFilterDataForBulkSmsMail(int id)
        {
            var itemToDelete = Context.FilterDataForBulkSmsMails
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnFilterDataForBulkSmsMailDeleted(itemToDelete);


            Context.FilterDataForBulkSmsMails.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterFilterDataForBulkSmsMailDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportFinalDataToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/finaldata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/finaldata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportFinalDataToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/finaldata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/finaldata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnFinalDataRead(ref IQueryable<Destination.Models.destinationTest.FinalDatum> items);

        public async Task<IQueryable<Destination.Models.destinationTest.FinalDatum>> GetFinalData(Query query = null)
        {
            var items = Context.FinalData.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnFinalDataRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportForecastsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/forecasts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/forecasts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportForecastsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/forecasts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/forecasts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnForecastsRead(ref IQueryable<Destination.Models.destinationTest.Forecast> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Forecast>> GetForecasts(Query query = null)
        {
            var items = Context.Forecasts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnForecastsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnForecastGet(Destination.Models.destinationTest.Forecast item);
        partial void OnGetForecastById(ref IQueryable<Destination.Models.destinationTest.Forecast> items);


        public async Task<Destination.Models.destinationTest.Forecast> GetForecastById(int id)
        {
            var items = Context.Forecasts
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetForecastById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnForecastGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnForecastCreated(Destination.Models.destinationTest.Forecast item);
        partial void OnAfterForecastCreated(Destination.Models.destinationTest.Forecast item);

        public async Task<Destination.Models.destinationTest.Forecast> CreateForecast(Destination.Models.destinationTest.Forecast forecast)
        {
            OnForecastCreated(forecast);

            var existingItem = Context.Forecasts
                              .Where(i => i.Id == forecast.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Forecasts.Add(forecast);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(forecast).State = EntityState.Detached;
                throw;
            }

            OnAfterForecastCreated(forecast);

            return forecast;
        }

        public async Task<Destination.Models.destinationTest.Forecast> CancelForecastChanges(Destination.Models.destinationTest.Forecast item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnForecastUpdated(Destination.Models.destinationTest.Forecast item);
        partial void OnAfterForecastUpdated(Destination.Models.destinationTest.Forecast item);

        public async Task<Destination.Models.destinationTest.Forecast> UpdateForecast(int id, Destination.Models.destinationTest.Forecast forecast)
        {
            OnForecastUpdated(forecast);

            var itemToUpdate = Context.Forecasts
                              .Where(i => i.Id == forecast.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(forecast);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterForecastUpdated(forecast);

            return forecast;
        }

        partial void OnForecastDeleted(Destination.Models.destinationTest.Forecast item);
        partial void OnAfterForecastDeleted(Destination.Models.destinationTest.Forecast item);

        public async Task<Destination.Models.destinationTest.Forecast> DeleteForecast(int id)
        {
            var itemToDelete = Context.Forecasts
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnForecastDeleted(itemToDelete);


            Context.Forecasts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterForecastDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportGoogleUsersKeywordsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/googleuserskeywords/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/googleuserskeywords/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportGoogleUsersKeywordsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/googleuserskeywords/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/googleuserskeywords/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGoogleUsersKeywordsRead(ref IQueryable<Destination.Models.destinationTest.GoogleUsersKeyword> items);

        public async Task<IQueryable<Destination.Models.destinationTest.GoogleUsersKeyword>> GetGoogleUsersKeywords(Query query = null)
        {
            var items = Context.GoogleUsersKeywords.AsQueryable();

            items = items.Include(i => i.Booking);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnGoogleUsersKeywordsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnGoogleUsersKeywordGet(Destination.Models.destinationTest.GoogleUsersKeyword item);
        partial void OnGetGoogleUsersKeywordById(ref IQueryable<Destination.Models.destinationTest.GoogleUsersKeyword> items);


        public async Task<Destination.Models.destinationTest.GoogleUsersKeyword> GetGoogleUsersKeywordById(int id)
        {
            var items = Context.GoogleUsersKeywords
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Booking);
 
            OnGetGoogleUsersKeywordById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnGoogleUsersKeywordGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnGoogleUsersKeywordCreated(Destination.Models.destinationTest.GoogleUsersKeyword item);
        partial void OnAfterGoogleUsersKeywordCreated(Destination.Models.destinationTest.GoogleUsersKeyword item);

        public async Task<Destination.Models.destinationTest.GoogleUsersKeyword> CreateGoogleUsersKeyword(Destination.Models.destinationTest.GoogleUsersKeyword googleuserskeyword)
        {
            OnGoogleUsersKeywordCreated(googleuserskeyword);

            var existingItem = Context.GoogleUsersKeywords
                              .Where(i => i.Id == googleuserskeyword.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.GoogleUsersKeywords.Add(googleuserskeyword);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(googleuserskeyword).State = EntityState.Detached;
                throw;
            }

            OnAfterGoogleUsersKeywordCreated(googleuserskeyword);

            return googleuserskeyword;
        }

        public async Task<Destination.Models.destinationTest.GoogleUsersKeyword> CancelGoogleUsersKeywordChanges(Destination.Models.destinationTest.GoogleUsersKeyword item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnGoogleUsersKeywordUpdated(Destination.Models.destinationTest.GoogleUsersKeyword item);
        partial void OnAfterGoogleUsersKeywordUpdated(Destination.Models.destinationTest.GoogleUsersKeyword item);

        public async Task<Destination.Models.destinationTest.GoogleUsersKeyword> UpdateGoogleUsersKeyword(int id, Destination.Models.destinationTest.GoogleUsersKeyword googleuserskeyword)
        {
            OnGoogleUsersKeywordUpdated(googleuserskeyword);

            var itemToUpdate = Context.GoogleUsersKeywords
                              .Where(i => i.Id == googleuserskeyword.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(googleuserskeyword);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterGoogleUsersKeywordUpdated(googleuserskeyword);

            return googleuserskeyword;
        }

        partial void OnGoogleUsersKeywordDeleted(Destination.Models.destinationTest.GoogleUsersKeyword item);
        partial void OnAfterGoogleUsersKeywordDeleted(Destination.Models.destinationTest.GoogleUsersKeyword item);

        public async Task<Destination.Models.destinationTest.GoogleUsersKeyword> DeleteGoogleUsersKeyword(int id)
        {
            var itemToDelete = Context.GoogleUsersKeywords
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnGoogleUsersKeywordDeleted(itemToDelete);


            Context.GoogleUsersKeywords.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterGoogleUsersKeywordDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportGuestCodeCallsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/guestcodecalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/guestcodecalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportGuestCodeCallsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/guestcodecalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/guestcodecalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGuestCodeCallsRead(ref IQueryable<Destination.Models.destinationTest.GuestCodeCall> items);

        public async Task<IQueryable<Destination.Models.destinationTest.GuestCodeCall>> GetGuestCodeCalls(Query query = null)
        {
            var items = Context.GuestCodeCalls.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnGuestCodeCallsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportHotHomesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/hothomes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/hothomes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportHotHomesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/hothomes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/hothomes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnHotHomesRead(ref IQueryable<Destination.Models.destinationTest.HotHome> items);

        public async Task<IQueryable<Destination.Models.destinationTest.HotHome>> GetHotHomes(Query query = null)
        {
            var items = Context.HotHomes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnHotHomesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportHouseRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/houserules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/houserules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportHouseRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/houserules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/houserules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnHouseRulesRead(ref IQueryable<Destination.Models.destinationTest.HouseRule> items);

        public async Task<IQueryable<Destination.Models.destinationTest.HouseRule>> GetHouseRules(Query query = null)
        {
            var items = Context.HouseRules.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnHouseRulesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportInntopiaCallLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inntopiacalllogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inntopiacalllogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportInntopiaCallLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inntopiacalllogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inntopiacalllogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnInntopiaCallLogsRead(ref IQueryable<Destination.Models.destinationTest.InntopiaCallLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.InntopiaCallLog>> GetInntopiaCallLogs(Query query = null)
        {
            var items = Context.InntopiaCallLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnInntopiaCallLogsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnInntopiaCallLogGet(Destination.Models.destinationTest.InntopiaCallLog item);
        partial void OnGetInntopiaCallLogById(ref IQueryable<Destination.Models.destinationTest.InntopiaCallLog> items);


        public async Task<Destination.Models.destinationTest.InntopiaCallLog> GetInntopiaCallLogById(int id)
        {
            var items = Context.InntopiaCallLogs
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetInntopiaCallLogById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnInntopiaCallLogGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnInntopiaCallLogCreated(Destination.Models.destinationTest.InntopiaCallLog item);
        partial void OnAfterInntopiaCallLogCreated(Destination.Models.destinationTest.InntopiaCallLog item);

        public async Task<Destination.Models.destinationTest.InntopiaCallLog> CreateInntopiaCallLog(Destination.Models.destinationTest.InntopiaCallLog inntopiacalllog)
        {
            OnInntopiaCallLogCreated(inntopiacalllog);

            var existingItem = Context.InntopiaCallLogs
                              .Where(i => i.Id == inntopiacalllog.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.InntopiaCallLogs.Add(inntopiacalllog);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(inntopiacalllog).State = EntityState.Detached;
                throw;
            }

            OnAfterInntopiaCallLogCreated(inntopiacalllog);

            return inntopiacalllog;
        }

        public async Task<Destination.Models.destinationTest.InntopiaCallLog> CancelInntopiaCallLogChanges(Destination.Models.destinationTest.InntopiaCallLog item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnInntopiaCallLogUpdated(Destination.Models.destinationTest.InntopiaCallLog item);
        partial void OnAfterInntopiaCallLogUpdated(Destination.Models.destinationTest.InntopiaCallLog item);

        public async Task<Destination.Models.destinationTest.InntopiaCallLog> UpdateInntopiaCallLog(int id, Destination.Models.destinationTest.InntopiaCallLog inntopiacalllog)
        {
            OnInntopiaCallLogUpdated(inntopiacalllog);

            var itemToUpdate = Context.InntopiaCallLogs
                              .Where(i => i.Id == inntopiacalllog.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(inntopiacalllog);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterInntopiaCallLogUpdated(inntopiacalllog);

            return inntopiacalllog;
        }

        partial void OnInntopiaCallLogDeleted(Destination.Models.destinationTest.InntopiaCallLog item);
        partial void OnAfterInntopiaCallLogDeleted(Destination.Models.destinationTest.InntopiaCallLog item);

        public async Task<Destination.Models.destinationTest.InntopiaCallLog> DeleteInntopiaCallLog(int id)
        {
            var itemToDelete = Context.InntopiaCallLogs
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnInntopiaCallLogDeleted(itemToDelete);


            Context.InntopiaCallLogs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterInntopiaCallLogDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportInntopiaPushTimeLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inntopiapushtimelogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inntopiapushtimelogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportInntopiaPushTimeLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inntopiapushtimelogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inntopiapushtimelogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnInntopiaPushTimeLogsRead(ref IQueryable<Destination.Models.destinationTest.InntopiaPushTimeLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.InntopiaPushTimeLog>> GetInntopiaPushTimeLogs(Query query = null)
        {
            var items = Context.InntopiaPushTimeLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnInntopiaPushTimeLogsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnInntopiaPushTimeLogGet(Destination.Models.destinationTest.InntopiaPushTimeLog item);
        partial void OnGetInntopiaPushTimeLogById(ref IQueryable<Destination.Models.destinationTest.InntopiaPushTimeLog> items);


        public async Task<Destination.Models.destinationTest.InntopiaPushTimeLog> GetInntopiaPushTimeLogById(int id)
        {
            var items = Context.InntopiaPushTimeLogs
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetInntopiaPushTimeLogById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnInntopiaPushTimeLogGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnInntopiaPushTimeLogCreated(Destination.Models.destinationTest.InntopiaPushTimeLog item);
        partial void OnAfterInntopiaPushTimeLogCreated(Destination.Models.destinationTest.InntopiaPushTimeLog item);

        public async Task<Destination.Models.destinationTest.InntopiaPushTimeLog> CreateInntopiaPushTimeLog(Destination.Models.destinationTest.InntopiaPushTimeLog inntopiapushtimelog)
        {
            OnInntopiaPushTimeLogCreated(inntopiapushtimelog);

            var existingItem = Context.InntopiaPushTimeLogs
                              .Where(i => i.Id == inntopiapushtimelog.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.InntopiaPushTimeLogs.Add(inntopiapushtimelog);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(inntopiapushtimelog).State = EntityState.Detached;
                throw;
            }

            OnAfterInntopiaPushTimeLogCreated(inntopiapushtimelog);

            return inntopiapushtimelog;
        }

        public async Task<Destination.Models.destinationTest.InntopiaPushTimeLog> CancelInntopiaPushTimeLogChanges(Destination.Models.destinationTest.InntopiaPushTimeLog item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnInntopiaPushTimeLogUpdated(Destination.Models.destinationTest.InntopiaPushTimeLog item);
        partial void OnAfterInntopiaPushTimeLogUpdated(Destination.Models.destinationTest.InntopiaPushTimeLog item);

        public async Task<Destination.Models.destinationTest.InntopiaPushTimeLog> UpdateInntopiaPushTimeLog(int id, Destination.Models.destinationTest.InntopiaPushTimeLog inntopiapushtimelog)
        {
            OnInntopiaPushTimeLogUpdated(inntopiapushtimelog);

            var itemToUpdate = Context.InntopiaPushTimeLogs
                              .Where(i => i.Id == inntopiapushtimelog.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(inntopiapushtimelog);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterInntopiaPushTimeLogUpdated(inntopiapushtimelog);

            return inntopiapushtimelog;
        }

        partial void OnInntopiaPushTimeLogDeleted(Destination.Models.destinationTest.InntopiaPushTimeLog item);
        partial void OnAfterInntopiaPushTimeLogDeleted(Destination.Models.destinationTest.InntopiaPushTimeLog item);

        public async Task<Destination.Models.destinationTest.InntopiaPushTimeLog> DeleteInntopiaPushTimeLog(int id)
        {
            var itemToDelete = Context.InntopiaPushTimeLogs
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnInntopiaPushTimeLogDeleted(itemToDelete);


            Context.InntopiaPushTimeLogs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterInntopiaPushTimeLogDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportInntopiaAuditsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inntopiaaudits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inntopiaaudits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportInntopiaAuditsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inntopiaaudits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inntopiaaudits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnInntopiaAuditsRead(ref IQueryable<Destination.Models.destinationTest.InntopiaAudit> items);

        public async Task<IQueryable<Destination.Models.destinationTest.InntopiaAudit>> GetInntopiaAudits(Query query = null)
        {
            var items = Context.InntopiaAudits.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnInntopiaAuditsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnInntopiaAuditGet(Destination.Models.destinationTest.InntopiaAudit item);
        partial void OnGetInntopiaAuditById(ref IQueryable<Destination.Models.destinationTest.InntopiaAudit> items);


        public async Task<Destination.Models.destinationTest.InntopiaAudit> GetInntopiaAuditById(int id)
        {
            var items = Context.InntopiaAudits
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetInntopiaAuditById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnInntopiaAuditGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnInntopiaAuditCreated(Destination.Models.destinationTest.InntopiaAudit item);
        partial void OnAfterInntopiaAuditCreated(Destination.Models.destinationTest.InntopiaAudit item);

        public async Task<Destination.Models.destinationTest.InntopiaAudit> CreateInntopiaAudit(Destination.Models.destinationTest.InntopiaAudit inntopiaaudit)
        {
            OnInntopiaAuditCreated(inntopiaaudit);

            var existingItem = Context.InntopiaAudits
                              .Where(i => i.Id == inntopiaaudit.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.InntopiaAudits.Add(inntopiaaudit);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(inntopiaaudit).State = EntityState.Detached;
                throw;
            }

            OnAfterInntopiaAuditCreated(inntopiaaudit);

            return inntopiaaudit;
        }

        public async Task<Destination.Models.destinationTest.InntopiaAudit> CancelInntopiaAuditChanges(Destination.Models.destinationTest.InntopiaAudit item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnInntopiaAuditUpdated(Destination.Models.destinationTest.InntopiaAudit item);
        partial void OnAfterInntopiaAuditUpdated(Destination.Models.destinationTest.InntopiaAudit item);

        public async Task<Destination.Models.destinationTest.InntopiaAudit> UpdateInntopiaAudit(int id, Destination.Models.destinationTest.InntopiaAudit inntopiaaudit)
        {
            OnInntopiaAuditUpdated(inntopiaaudit);

            var itemToUpdate = Context.InntopiaAudits
                              .Where(i => i.Id == inntopiaaudit.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(inntopiaaudit);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterInntopiaAuditUpdated(inntopiaaudit);

            return inntopiaaudit;
        }

        partial void OnInntopiaAuditDeleted(Destination.Models.destinationTest.InntopiaAudit item);
        partial void OnAfterInntopiaAuditDeleted(Destination.Models.destinationTest.InntopiaAudit item);

        public async Task<Destination.Models.destinationTest.InntopiaAudit> DeleteInntopiaAudit(int id)
        {
            var itemToDelete = Context.InntopiaAudits
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnInntopiaAuditDeleted(itemToDelete);


            Context.InntopiaAudits.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterInntopiaAuditDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportInntopiaBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inntopiabookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inntopiabookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportInntopiaBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inntopiabookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inntopiabookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnInntopiaBookingsRead(ref IQueryable<Destination.Models.destinationTest.InntopiaBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.InntopiaBooking>> GetInntopiaBookings(Query query = null)
        {
            var items = Context.InntopiaBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnInntopiaBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnInntopiaBookingGet(Destination.Models.destinationTest.InntopiaBooking item);
        partial void OnGetInntopiaBookingById(ref IQueryable<Destination.Models.destinationTest.InntopiaBooking> items);


        public async Task<Destination.Models.destinationTest.InntopiaBooking> GetInntopiaBookingById(int id)
        {
            var items = Context.InntopiaBookings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetInntopiaBookingById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnInntopiaBookingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnInntopiaBookingCreated(Destination.Models.destinationTest.InntopiaBooking item);
        partial void OnAfterInntopiaBookingCreated(Destination.Models.destinationTest.InntopiaBooking item);

        public async Task<Destination.Models.destinationTest.InntopiaBooking> CreateInntopiaBooking(Destination.Models.destinationTest.InntopiaBooking inntopiabooking)
        {
            OnInntopiaBookingCreated(inntopiabooking);

            var existingItem = Context.InntopiaBookings
                              .Where(i => i.Id == inntopiabooking.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.InntopiaBookings.Add(inntopiabooking);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(inntopiabooking).State = EntityState.Detached;
                throw;
            }

            OnAfterInntopiaBookingCreated(inntopiabooking);

            return inntopiabooking;
        }

        public async Task<Destination.Models.destinationTest.InntopiaBooking> CancelInntopiaBookingChanges(Destination.Models.destinationTest.InntopiaBooking item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnInntopiaBookingUpdated(Destination.Models.destinationTest.InntopiaBooking item);
        partial void OnAfterInntopiaBookingUpdated(Destination.Models.destinationTest.InntopiaBooking item);

        public async Task<Destination.Models.destinationTest.InntopiaBooking> UpdateInntopiaBooking(int id, Destination.Models.destinationTest.InntopiaBooking inntopiabooking)
        {
            OnInntopiaBookingUpdated(inntopiabooking);

            var itemToUpdate = Context.InntopiaBookings
                              .Where(i => i.Id == inntopiabooking.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(inntopiabooking);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterInntopiaBookingUpdated(inntopiabooking);

            return inntopiabooking;
        }

        partial void OnInntopiaBookingDeleted(Destination.Models.destinationTest.InntopiaBooking item);
        partial void OnAfterInntopiaBookingDeleted(Destination.Models.destinationTest.InntopiaBooking item);

        public async Task<Destination.Models.destinationTest.InntopiaBooking> DeleteInntopiaBooking(int id)
        {
            var itemToDelete = Context.InntopiaBookings
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnInntopiaBookingDeleted(itemToDelete);


            Context.InntopiaBookings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterInntopiaBookingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportInquiryNasToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inquirynas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inquirynas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportInquiryNasToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inquirynas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inquirynas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnInquiryNasRead(ref IQueryable<Destination.Models.destinationTest.InquiryNa> items);

        public async Task<IQueryable<Destination.Models.destinationTest.InquiryNa>> GetInquiryNas(Query query = null)
        {
            var items = Context.InquiryNas.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnInquiryNasRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnInquiryNaGet(Destination.Models.destinationTest.InquiryNa item);
        partial void OnGetInquiryNaById(ref IQueryable<Destination.Models.destinationTest.InquiryNa> items);


        public async Task<Destination.Models.destinationTest.InquiryNa> GetInquiryNaById(int id)
        {
            var items = Context.InquiryNas
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetInquiryNaById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnInquiryNaGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnInquiryNaCreated(Destination.Models.destinationTest.InquiryNa item);
        partial void OnAfterInquiryNaCreated(Destination.Models.destinationTest.InquiryNa item);

        public async Task<Destination.Models.destinationTest.InquiryNa> CreateInquiryNa(Destination.Models.destinationTest.InquiryNa inquiryna)
        {
            OnInquiryNaCreated(inquiryna);

            var existingItem = Context.InquiryNas
                              .Where(i => i.Id == inquiryna.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.InquiryNas.Add(inquiryna);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(inquiryna).State = EntityState.Detached;
                throw;
            }

            OnAfterInquiryNaCreated(inquiryna);

            return inquiryna;
        }

        public async Task<Destination.Models.destinationTest.InquiryNa> CancelInquiryNaChanges(Destination.Models.destinationTest.InquiryNa item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnInquiryNaUpdated(Destination.Models.destinationTest.InquiryNa item);
        partial void OnAfterInquiryNaUpdated(Destination.Models.destinationTest.InquiryNa item);

        public async Task<Destination.Models.destinationTest.InquiryNa> UpdateInquiryNa(int id, Destination.Models.destinationTest.InquiryNa inquiryna)
        {
            OnInquiryNaUpdated(inquiryna);

            var itemToUpdate = Context.InquiryNas
                              .Where(i => i.Id == inquiryna.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(inquiryna);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterInquiryNaUpdated(inquiryna);

            return inquiryna;
        }

        partial void OnInquiryNaDeleted(Destination.Models.destinationTest.InquiryNa item);
        partial void OnAfterInquiryNaDeleted(Destination.Models.destinationTest.InquiryNa item);

        public async Task<Destination.Models.destinationTest.InquiryNa> DeleteInquiryNa(int id)
        {
            var itemToDelete = Context.InquiryNas
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnInquiryNaDeleted(itemToDelete);


            Context.InquiryNas.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterInquiryNaDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportInspectionPlansToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inspectionplans/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inspectionplans/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportInspectionPlansToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/inspectionplans/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/inspectionplans/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnInspectionPlansRead(ref IQueryable<Destination.Models.destinationTest.InspectionPlan> items);

        public async Task<IQueryable<Destination.Models.destinationTest.InspectionPlan>> GetInspectionPlans(Query query = null)
        {
            var items = Context.InspectionPlans.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnInspectionPlansRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnInspectionPlanGet(Destination.Models.destinationTest.InspectionPlan item);
        partial void OnGetInspectionPlanById(ref IQueryable<Destination.Models.destinationTest.InspectionPlan> items);


        public async Task<Destination.Models.destinationTest.InspectionPlan> GetInspectionPlanById(int id)
        {
            var items = Context.InspectionPlans
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetInspectionPlanById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnInspectionPlanGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnInspectionPlanCreated(Destination.Models.destinationTest.InspectionPlan item);
        partial void OnAfterInspectionPlanCreated(Destination.Models.destinationTest.InspectionPlan item);

        public async Task<Destination.Models.destinationTest.InspectionPlan> CreateInspectionPlan(Destination.Models.destinationTest.InspectionPlan inspectionplan)
        {
            OnInspectionPlanCreated(inspectionplan);

            var existingItem = Context.InspectionPlans
                              .Where(i => i.Id == inspectionplan.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.InspectionPlans.Add(inspectionplan);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(inspectionplan).State = EntityState.Detached;
                throw;
            }

            OnAfterInspectionPlanCreated(inspectionplan);

            return inspectionplan;
        }

        public async Task<Destination.Models.destinationTest.InspectionPlan> CancelInspectionPlanChanges(Destination.Models.destinationTest.InspectionPlan item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnInspectionPlanUpdated(Destination.Models.destinationTest.InspectionPlan item);
        partial void OnAfterInspectionPlanUpdated(Destination.Models.destinationTest.InspectionPlan item);

        public async Task<Destination.Models.destinationTest.InspectionPlan> UpdateInspectionPlan(int id, Destination.Models.destinationTest.InspectionPlan inspectionplan)
        {
            OnInspectionPlanUpdated(inspectionplan);

            var itemToUpdate = Context.InspectionPlans
                              .Where(i => i.Id == inspectionplan.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(inspectionplan);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterInspectionPlanUpdated(inspectionplan);

            return inspectionplan;
        }

        partial void OnInspectionPlanDeleted(Destination.Models.destinationTest.InspectionPlan item);
        partial void OnAfterInspectionPlanDeleted(Destination.Models.destinationTest.InspectionPlan item);

        public async Task<Destination.Models.destinationTest.InspectionPlan> DeleteInspectionPlan(int id)
        {
            var itemToDelete = Context.InspectionPlans
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnInspectionPlanDeleted(itemToDelete);


            Context.InspectionPlans.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterInspectionPlanDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportInstructionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/instructions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/instructions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportInstructionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/instructions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/instructions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnInstructionsRead(ref IQueryable<Destination.Models.destinationTest.Instruction> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Instruction>> GetInstructions(Query query = null)
        {
            var items = Context.Instructions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnInstructionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnInstructionGet(Destination.Models.destinationTest.Instruction item);
        partial void OnGetInstructionByInstructionid(ref IQueryable<Destination.Models.destinationTest.Instruction> items);


        public async Task<Destination.Models.destinationTest.Instruction> GetInstructionByInstructionid(int instructionid)
        {
            var items = Context.Instructions
                              .AsNoTracking()
                              .Where(i => i.Instructionid == instructionid);

 
            OnGetInstructionByInstructionid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnInstructionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnInstructionCreated(Destination.Models.destinationTest.Instruction item);
        partial void OnAfterInstructionCreated(Destination.Models.destinationTest.Instruction item);

        public async Task<Destination.Models.destinationTest.Instruction> CreateInstruction(Destination.Models.destinationTest.Instruction instruction)
        {
            OnInstructionCreated(instruction);

            var existingItem = Context.Instructions
                              .Where(i => i.Instructionid == instruction.Instructionid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Instructions.Add(instruction);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(instruction).State = EntityState.Detached;
                throw;
            }

            OnAfterInstructionCreated(instruction);

            return instruction;
        }

        public async Task<Destination.Models.destinationTest.Instruction> CancelInstructionChanges(Destination.Models.destinationTest.Instruction item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnInstructionUpdated(Destination.Models.destinationTest.Instruction item);
        partial void OnAfterInstructionUpdated(Destination.Models.destinationTest.Instruction item);

        public async Task<Destination.Models.destinationTest.Instruction> UpdateInstruction(int instructionid, Destination.Models.destinationTest.Instruction instruction)
        {
            OnInstructionUpdated(instruction);

            var itemToUpdate = Context.Instructions
                              .Where(i => i.Instructionid == instruction.Instructionid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(instruction);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterInstructionUpdated(instruction);

            return instruction;
        }

        partial void OnInstructionDeleted(Destination.Models.destinationTest.Instruction item);
        partial void OnAfterInstructionDeleted(Destination.Models.destinationTest.Instruction item);

        public async Task<Destination.Models.destinationTest.Instruction> DeleteInstruction(int instructionid)
        {
            var itemToDelete = Context.Instructions
                              .Where(i => i.Instructionid == instructionid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnInstructionDeleted(itemToDelete);


            Context.Instructions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterInstructionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportInstructionAgentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/instructionagents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/instructionagents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportInstructionAgentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/instructionagents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/instructionagents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnInstructionAgentsRead(ref IQueryable<Destination.Models.destinationTest.InstructionAgent> items);

        public async Task<IQueryable<Destination.Models.destinationTest.InstructionAgent>> GetInstructionAgents(Query query = null)
        {
            var items = Context.InstructionAgents.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnInstructionAgentsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnInstructionAgentGet(Destination.Models.destinationTest.InstructionAgent item);
        partial void OnGetInstructionAgentByInstAgent(ref IQueryable<Destination.Models.destinationTest.InstructionAgent> items);


        public async Task<Destination.Models.destinationTest.InstructionAgent> GetInstructionAgentByInstAgent(int instagent)
        {
            var items = Context.InstructionAgents
                              .AsNoTracking()
                              .Where(i => i.InstAgent == instagent);

 
            OnGetInstructionAgentByInstAgent(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnInstructionAgentGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnInstructionAgentCreated(Destination.Models.destinationTest.InstructionAgent item);
        partial void OnAfterInstructionAgentCreated(Destination.Models.destinationTest.InstructionAgent item);

        public async Task<Destination.Models.destinationTest.InstructionAgent> CreateInstructionAgent(Destination.Models.destinationTest.InstructionAgent instructionagent)
        {
            OnInstructionAgentCreated(instructionagent);

            var existingItem = Context.InstructionAgents
                              .Where(i => i.InstAgent == instructionagent.InstAgent)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.InstructionAgents.Add(instructionagent);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(instructionagent).State = EntityState.Detached;
                throw;
            }

            OnAfterInstructionAgentCreated(instructionagent);

            return instructionagent;
        }

        public async Task<Destination.Models.destinationTest.InstructionAgent> CancelInstructionAgentChanges(Destination.Models.destinationTest.InstructionAgent item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnInstructionAgentUpdated(Destination.Models.destinationTest.InstructionAgent item);
        partial void OnAfterInstructionAgentUpdated(Destination.Models.destinationTest.InstructionAgent item);

        public async Task<Destination.Models.destinationTest.InstructionAgent> UpdateInstructionAgent(int instagent, Destination.Models.destinationTest.InstructionAgent instructionagent)
        {
            OnInstructionAgentUpdated(instructionagent);

            var itemToUpdate = Context.InstructionAgents
                              .Where(i => i.InstAgent == instructionagent.InstAgent)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(instructionagent);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterInstructionAgentUpdated(instructionagent);

            return instructionagent;
        }

        partial void OnInstructionAgentDeleted(Destination.Models.destinationTest.InstructionAgent item);
        partial void OnAfterInstructionAgentDeleted(Destination.Models.destinationTest.InstructionAgent item);

        public async Task<Destination.Models.destinationTest.InstructionAgent> DeleteInstructionAgent(int instagent)
        {
            var itemToDelete = Context.InstructionAgents
                              .Where(i => i.InstAgent == instagent)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnInstructionAgentDeleted(itemToDelete);


            Context.InstructionAgents.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterInstructionAgentDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportLandingPagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/landingpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/landingpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportLandingPagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/landingpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/landingpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnLandingPagesRead(ref IQueryable<Destination.Models.destinationTest.LandingPage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.LandingPage>> GetLandingPages(Query query = null)
        {
            var items = Context.LandingPages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnLandingPagesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportLargeGroupBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/largegroupbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/largegroupbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportLargeGroupBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/largegroupbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/largegroupbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnLargeGroupBookingsRead(ref IQueryable<Destination.Models.destinationTest.LargeGroupBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.LargeGroupBooking>> GetLargeGroupBookings(Query query = null)
        {
            var items = Context.LargeGroupBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnLargeGroupBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportLaundryRatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/laundryrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/laundryrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportLaundryRatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/laundryrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/laundryrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnLaundryRatesRead(ref IQueryable<Destination.Models.destinationTest.LaundryRate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.LaundryRate>> GetLaundryRates(Query query = null)
        {
            var items = Context.LaundryRates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnLaundryRatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnLaundryRateGet(Destination.Models.destinationTest.LaundryRate item);
        partial void OnGetLaundryRateById(ref IQueryable<Destination.Models.destinationTest.LaundryRate> items);


        public async Task<Destination.Models.destinationTest.LaundryRate> GetLaundryRateById(int id)
        {
            var items = Context.LaundryRates
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetLaundryRateById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnLaundryRateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnLaundryRateCreated(Destination.Models.destinationTest.LaundryRate item);
        partial void OnAfterLaundryRateCreated(Destination.Models.destinationTest.LaundryRate item);

        public async Task<Destination.Models.destinationTest.LaundryRate> CreateLaundryRate(Destination.Models.destinationTest.LaundryRate laundryrate)
        {
            OnLaundryRateCreated(laundryrate);

            var existingItem = Context.LaundryRates
                              .Where(i => i.Id == laundryrate.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.LaundryRates.Add(laundryrate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(laundryrate).State = EntityState.Detached;
                throw;
            }

            OnAfterLaundryRateCreated(laundryrate);

            return laundryrate;
        }

        public async Task<Destination.Models.destinationTest.LaundryRate> CancelLaundryRateChanges(Destination.Models.destinationTest.LaundryRate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnLaundryRateUpdated(Destination.Models.destinationTest.LaundryRate item);
        partial void OnAfterLaundryRateUpdated(Destination.Models.destinationTest.LaundryRate item);

        public async Task<Destination.Models.destinationTest.LaundryRate> UpdateLaundryRate(int id, Destination.Models.destinationTest.LaundryRate laundryrate)
        {
            OnLaundryRateUpdated(laundryrate);

            var itemToUpdate = Context.LaundryRates
                              .Where(i => i.Id == laundryrate.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(laundryrate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterLaundryRateUpdated(laundryrate);

            return laundryrate;
        }

        partial void OnLaundryRateDeleted(Destination.Models.destinationTest.LaundryRate item);
        partial void OnAfterLaundryRateDeleted(Destination.Models.destinationTest.LaundryRate item);

        public async Task<Destination.Models.destinationTest.LaundryRate> DeleteLaundryRate(int id)
        {
            var itemToDelete = Context.LaundryRates
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnLaundryRateDeleted(itemToDelete);


            Context.LaundryRates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterLaundryRateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportLogEditPropertyDescriptionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/logeditpropertydescriptions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/logeditpropertydescriptions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportLogEditPropertyDescriptionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/logeditpropertydescriptions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/logeditpropertydescriptions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnLogEditPropertyDescriptionsRead(ref IQueryable<Destination.Models.destinationTest.LogEditPropertyDescription> items);

        public async Task<IQueryable<Destination.Models.destinationTest.LogEditPropertyDescription>> GetLogEditPropertyDescriptions(Query query = null)
        {
            var items = Context.LogEditPropertyDescriptions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnLogEditPropertyDescriptionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnLogEditPropertyDescriptionGet(Destination.Models.destinationTest.LogEditPropertyDescription item);
        partial void OnGetLogEditPropertyDescriptionById(ref IQueryable<Destination.Models.destinationTest.LogEditPropertyDescription> items);


        public async Task<Destination.Models.destinationTest.LogEditPropertyDescription> GetLogEditPropertyDescriptionById(int id)
        {
            var items = Context.LogEditPropertyDescriptions
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetLogEditPropertyDescriptionById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnLogEditPropertyDescriptionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnLogEditPropertyDescriptionCreated(Destination.Models.destinationTest.LogEditPropertyDescription item);
        partial void OnAfterLogEditPropertyDescriptionCreated(Destination.Models.destinationTest.LogEditPropertyDescription item);

        public async Task<Destination.Models.destinationTest.LogEditPropertyDescription> CreateLogEditPropertyDescription(Destination.Models.destinationTest.LogEditPropertyDescription logeditpropertydescription)
        {
            OnLogEditPropertyDescriptionCreated(logeditpropertydescription);

            var existingItem = Context.LogEditPropertyDescriptions
                              .Where(i => i.Id == logeditpropertydescription.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.LogEditPropertyDescriptions.Add(logeditpropertydescription);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(logeditpropertydescription).State = EntityState.Detached;
                throw;
            }

            OnAfterLogEditPropertyDescriptionCreated(logeditpropertydescription);

            return logeditpropertydescription;
        }

        public async Task<Destination.Models.destinationTest.LogEditPropertyDescription> CancelLogEditPropertyDescriptionChanges(Destination.Models.destinationTest.LogEditPropertyDescription item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnLogEditPropertyDescriptionUpdated(Destination.Models.destinationTest.LogEditPropertyDescription item);
        partial void OnAfterLogEditPropertyDescriptionUpdated(Destination.Models.destinationTest.LogEditPropertyDescription item);

        public async Task<Destination.Models.destinationTest.LogEditPropertyDescription> UpdateLogEditPropertyDescription(int id, Destination.Models.destinationTest.LogEditPropertyDescription logeditpropertydescription)
        {
            OnLogEditPropertyDescriptionUpdated(logeditpropertydescription);

            var itemToUpdate = Context.LogEditPropertyDescriptions
                              .Where(i => i.Id == logeditpropertydescription.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(logeditpropertydescription);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterLogEditPropertyDescriptionUpdated(logeditpropertydescription);

            return logeditpropertydescription;
        }

        partial void OnLogEditPropertyDescriptionDeleted(Destination.Models.destinationTest.LogEditPropertyDescription item);
        partial void OnAfterLogEditPropertyDescriptionDeleted(Destination.Models.destinationTest.LogEditPropertyDescription item);

        public async Task<Destination.Models.destinationTest.LogEditPropertyDescription> DeleteLogEditPropertyDescription(int id)
        {
            var itemToDelete = Context.LogEditPropertyDescriptions
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnLogEditPropertyDescriptionDeleted(itemToDelete);


            Context.LogEditPropertyDescriptions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterLogEditPropertyDescriptionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportLogDoorCodes2020SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/logdoorcodes2020s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/logdoorcodes2020s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportLogDoorCodes2020SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/logdoorcodes2020s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/logdoorcodes2020s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnLogDoorCodes2020SRead(ref IQueryable<Destination.Models.destinationTest.LogDoorCodes2020> items);

        public async Task<IQueryable<Destination.Models.destinationTest.LogDoorCodes2020>> GetLogDoorCodes2020S(Query query = null)
        {
            var items = Context.LogDoorCodes2020S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnLogDoorCodes2020SRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportMaintenanceActionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/maintenanceactions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/maintenanceactions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportMaintenanceActionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/maintenanceactions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/maintenanceactions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnMaintenanceActionsRead(ref IQueryable<Destination.Models.destinationTest.MaintenanceAction> items);

        public async Task<IQueryable<Destination.Models.destinationTest.MaintenanceAction>> GetMaintenanceActions(Query query = null)
        {
            var items = Context.MaintenanceActions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnMaintenanceActionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnMaintenanceActionGet(Destination.Models.destinationTest.MaintenanceAction item);
        partial void OnGetMaintenanceActionByIntMaintenanceActionId(ref IQueryable<Destination.Models.destinationTest.MaintenanceAction> items);


        public async Task<Destination.Models.destinationTest.MaintenanceAction> GetMaintenanceActionByIntMaintenanceActionId(int intmaintenanceactionid)
        {
            var items = Context.MaintenanceActions
                              .AsNoTracking()
                              .Where(i => i.IntMaintenanceActionId == intmaintenanceactionid);

 
            OnGetMaintenanceActionByIntMaintenanceActionId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnMaintenanceActionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnMaintenanceActionCreated(Destination.Models.destinationTest.MaintenanceAction item);
        partial void OnAfterMaintenanceActionCreated(Destination.Models.destinationTest.MaintenanceAction item);

        public async Task<Destination.Models.destinationTest.MaintenanceAction> CreateMaintenanceAction(Destination.Models.destinationTest.MaintenanceAction maintenanceaction)
        {
            OnMaintenanceActionCreated(maintenanceaction);

            var existingItem = Context.MaintenanceActions
                              .Where(i => i.IntMaintenanceActionId == maintenanceaction.IntMaintenanceActionId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.MaintenanceActions.Add(maintenanceaction);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(maintenanceaction).State = EntityState.Detached;
                throw;
            }

            OnAfterMaintenanceActionCreated(maintenanceaction);

            return maintenanceaction;
        }

        public async Task<Destination.Models.destinationTest.MaintenanceAction> CancelMaintenanceActionChanges(Destination.Models.destinationTest.MaintenanceAction item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnMaintenanceActionUpdated(Destination.Models.destinationTest.MaintenanceAction item);
        partial void OnAfterMaintenanceActionUpdated(Destination.Models.destinationTest.MaintenanceAction item);

        public async Task<Destination.Models.destinationTest.MaintenanceAction> UpdateMaintenanceAction(int intmaintenanceactionid, Destination.Models.destinationTest.MaintenanceAction maintenanceaction)
        {
            OnMaintenanceActionUpdated(maintenanceaction);

            var itemToUpdate = Context.MaintenanceActions
                              .Where(i => i.IntMaintenanceActionId == maintenanceaction.IntMaintenanceActionId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(maintenanceaction);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterMaintenanceActionUpdated(maintenanceaction);

            return maintenanceaction;
        }

        partial void OnMaintenanceActionDeleted(Destination.Models.destinationTest.MaintenanceAction item);
        partial void OnAfterMaintenanceActionDeleted(Destination.Models.destinationTest.MaintenanceAction item);

        public async Task<Destination.Models.destinationTest.MaintenanceAction> DeleteMaintenanceAction(int intmaintenanceactionid)
        {
            var itemToDelete = Context.MaintenanceActions
                              .Where(i => i.IntMaintenanceActionId == intmaintenanceactionid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnMaintenanceActionDeleted(itemToDelete);


            Context.MaintenanceActions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterMaintenanceActionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportMarketingReviewsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/marketingreviews/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/marketingreviews/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportMarketingReviewsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/marketingreviews/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/marketingreviews/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnMarketingReviewsRead(ref IQueryable<Destination.Models.destinationTest.MarketingReview> items);

        public async Task<IQueryable<Destination.Models.destinationTest.MarketingReview>> GetMarketingReviews(Query query = null)
        {
            var items = Context.MarketingReviews.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnMarketingReviewsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnMarketingReviewGet(Destination.Models.destinationTest.MarketingReview item);
        partial void OnGetMarketingReviewById(ref IQueryable<Destination.Models.destinationTest.MarketingReview> items);


        public async Task<Destination.Models.destinationTest.MarketingReview> GetMarketingReviewById(int id)
        {
            var items = Context.MarketingReviews
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetMarketingReviewById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnMarketingReviewGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnMarketingReviewCreated(Destination.Models.destinationTest.MarketingReview item);
        partial void OnAfterMarketingReviewCreated(Destination.Models.destinationTest.MarketingReview item);

        public async Task<Destination.Models.destinationTest.MarketingReview> CreateMarketingReview(Destination.Models.destinationTest.MarketingReview marketingreview)
        {
            OnMarketingReviewCreated(marketingreview);

            var existingItem = Context.MarketingReviews
                              .Where(i => i.Id == marketingreview.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.MarketingReviews.Add(marketingreview);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(marketingreview).State = EntityState.Detached;
                throw;
            }

            OnAfterMarketingReviewCreated(marketingreview);

            return marketingreview;
        }

        public async Task<Destination.Models.destinationTest.MarketingReview> CancelMarketingReviewChanges(Destination.Models.destinationTest.MarketingReview item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnMarketingReviewUpdated(Destination.Models.destinationTest.MarketingReview item);
        partial void OnAfterMarketingReviewUpdated(Destination.Models.destinationTest.MarketingReview item);

        public async Task<Destination.Models.destinationTest.MarketingReview> UpdateMarketingReview(int id, Destination.Models.destinationTest.MarketingReview marketingreview)
        {
            OnMarketingReviewUpdated(marketingreview);

            var itemToUpdate = Context.MarketingReviews
                              .Where(i => i.Id == marketingreview.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(marketingreview);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterMarketingReviewUpdated(marketingreview);

            return marketingreview;
        }

        partial void OnMarketingReviewDeleted(Destination.Models.destinationTest.MarketingReview item);
        partial void OnAfterMarketingReviewDeleted(Destination.Models.destinationTest.MarketingReview item);

        public async Task<Destination.Models.destinationTest.MarketingReview> DeleteMarketingReview(int id)
        {
            var itemToDelete = Context.MarketingReviews
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnMarketingReviewDeleted(itemToDelete);


            Context.MarketingReviews.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterMarketingReviewDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportMediaToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/media/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/media/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportMediaToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/media/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/media/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnMediaRead(ref IQueryable<Destination.Models.destinationTest.Medium> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Medium>> GetMedia(Query query = null)
        {
            var items = Context.Media.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnMediaRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnMediumGet(Destination.Models.destinationTest.Medium item);
        partial void OnGetMediumByMediaid(ref IQueryable<Destination.Models.destinationTest.Medium> items);


        public async Task<Destination.Models.destinationTest.Medium> GetMediumByMediaid(int mediaid)
        {
            var items = Context.Media
                              .AsNoTracking()
                              .Where(i => i.Mediaid == mediaid);

 
            OnGetMediumByMediaid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnMediumGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnMediumCreated(Destination.Models.destinationTest.Medium item);
        partial void OnAfterMediumCreated(Destination.Models.destinationTest.Medium item);

        public async Task<Destination.Models.destinationTest.Medium> CreateMedium(Destination.Models.destinationTest.Medium medium)
        {
            OnMediumCreated(medium);

            var existingItem = Context.Media
                              .Where(i => i.Mediaid == medium.Mediaid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Media.Add(medium);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(medium).State = EntityState.Detached;
                throw;
            }

            OnAfterMediumCreated(medium);

            return medium;
        }

        public async Task<Destination.Models.destinationTest.Medium> CancelMediumChanges(Destination.Models.destinationTest.Medium item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnMediumUpdated(Destination.Models.destinationTest.Medium item);
        partial void OnAfterMediumUpdated(Destination.Models.destinationTest.Medium item);

        public async Task<Destination.Models.destinationTest.Medium> UpdateMedium(int mediaid, Destination.Models.destinationTest.Medium medium)
        {
            OnMediumUpdated(medium);

            var itemToUpdate = Context.Media
                              .Where(i => i.Mediaid == medium.Mediaid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(medium);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterMediumUpdated(medium);

            return medium;
        }

        partial void OnMediumDeleted(Destination.Models.destinationTest.Medium item);
        partial void OnAfterMediumDeleted(Destination.Models.destinationTest.Medium item);

        public async Task<Destination.Models.destinationTest.Medium> DeleteMedium(int mediaid)
        {
            var itemToDelete = Context.Media
                              .Where(i => i.Mediaid == mediaid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnMediumDeleted(itemToDelete);


            Context.Media.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterMediumDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportMenuManagementsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/menumanagements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/menumanagements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportMenuManagementsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/menumanagements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/menumanagements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnMenuManagementsRead(ref IQueryable<Destination.Models.destinationTest.MenuManagement> items);

        public async Task<IQueryable<Destination.Models.destinationTest.MenuManagement>> GetMenuManagements(Query query = null)
        {
            var items = Context.MenuManagements.AsQueryable();

            items = items.Include(i => i.MenuMaster);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnMenuManagementsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnMenuManagementGet(Destination.Models.destinationTest.MenuManagement item);
        partial void OnGetMenuManagementById(ref IQueryable<Destination.Models.destinationTest.MenuManagement> items);


        public async Task<Destination.Models.destinationTest.MenuManagement> GetMenuManagementById(int id)
        {
            var items = Context.MenuManagements
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.MenuMaster);
 
            OnGetMenuManagementById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnMenuManagementGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnMenuManagementCreated(Destination.Models.destinationTest.MenuManagement item);
        partial void OnAfterMenuManagementCreated(Destination.Models.destinationTest.MenuManagement item);

        public async Task<Destination.Models.destinationTest.MenuManagement> CreateMenuManagement(Destination.Models.destinationTest.MenuManagement menumanagement)
        {
            OnMenuManagementCreated(menumanagement);

            var existingItem = Context.MenuManagements
                              .Where(i => i.Id == menumanagement.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.MenuManagements.Add(menumanagement);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(menumanagement).State = EntityState.Detached;
                throw;
            }

            OnAfterMenuManagementCreated(menumanagement);

            return menumanagement;
        }

        public async Task<Destination.Models.destinationTest.MenuManagement> CancelMenuManagementChanges(Destination.Models.destinationTest.MenuManagement item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnMenuManagementUpdated(Destination.Models.destinationTest.MenuManagement item);
        partial void OnAfterMenuManagementUpdated(Destination.Models.destinationTest.MenuManagement item);

        public async Task<Destination.Models.destinationTest.MenuManagement> UpdateMenuManagement(int id, Destination.Models.destinationTest.MenuManagement menumanagement)
        {
            OnMenuManagementUpdated(menumanagement);

            var itemToUpdate = Context.MenuManagements
                              .Where(i => i.Id == menumanagement.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(menumanagement);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterMenuManagementUpdated(menumanagement);

            return menumanagement;
        }

        partial void OnMenuManagementDeleted(Destination.Models.destinationTest.MenuManagement item);
        partial void OnAfterMenuManagementDeleted(Destination.Models.destinationTest.MenuManagement item);

        public async Task<Destination.Models.destinationTest.MenuManagement> DeleteMenuManagement(int id)
        {
            var itemToDelete = Context.MenuManagements
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnMenuManagementDeleted(itemToDelete);


            Context.MenuManagements.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterMenuManagementDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportMenuMastersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/menumasters/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/menumasters/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportMenuMastersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/menumasters/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/menumasters/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnMenuMastersRead(ref IQueryable<Destination.Models.destinationTest.MenuMaster> items);

        public async Task<IQueryable<Destination.Models.destinationTest.MenuMaster>> GetMenuMasters(Query query = null)
        {
            var items = Context.MenuMasters.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnMenuMastersRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnMenuMasterGet(Destination.Models.destinationTest.MenuMaster item);
        partial void OnGetMenuMasterById(ref IQueryable<Destination.Models.destinationTest.MenuMaster> items);


        public async Task<Destination.Models.destinationTest.MenuMaster> GetMenuMasterById(int id)
        {
            var items = Context.MenuMasters
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetMenuMasterById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnMenuMasterGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        public async Task<List<Destination.Models.destinationTest.MenuMasterDTO>> GetMenuHierarchyAsync(Query query = null)
        {
            // Start with your existing query logic
            var items = Context.MenuMasters.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnMenuMastersRead(ref items);

            // Execute the query and materialize results
            var allItems = await items.ToListAsync();

            // Transform to MenuItem model and build hierarchy
            var menuItems = allItems.Select(m => new Destination.Models.destinationTest.MenuMasterDTO
            {
                Id = m.Id,
                MenuText = m.MenuText,
                MenuUrl = m.MenuUrl,
                ParentId = m.ParentId
            }).ToList();

            // Build hierarchy
            var lookup = menuItems.ToLookup(item => item.ParentId);
            
            foreach (var item in menuItems)
            {
                item.Children.AddRange(lookup[item.Id]);
            }

            // Return top-level items where ParentId = 1
            return lookup[1].ToList();
        }


        public async Task<List<Destination.Models.destinationTest.MenuMasterDTO>> GetMenuHierarchyByIdAsync(int menuId)
        {
            Query query = null;
            var items = Context.MenuMasters.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnMenuMastersRead(ref items);

            // Execute the query and materialize results
            var allItems = await items.ToListAsync();

            // Transform to MenuItem model and build hierarchy
            var menuItems = allItems.Select(m => new Destination.Models.destinationTest.MenuMasterDTO
            {
                Id = m.Id,
                MenuText = m.MenuText,
                MenuUrl = m.MenuUrl,
                ParentId = m.ParentId
            }).ToList();

            // Build hierarchy
            var lookup = menuItems.ToLookup(item => item.ParentId);
            
            foreach (var item in menuItems)
            {
                item.Children.AddRange(lookup[item.Id]);
            }

            // Return top-level items where ParentId = 1
            return lookup[menuId].ToList();
        }

        partial void OnMenuMasterCreated(Destination.Models.destinationTest.MenuMaster item);
        partial void OnAfterMenuMasterCreated(Destination.Models.destinationTest.MenuMaster item);

        public async Task<Destination.Models.destinationTest.MenuMaster> CreateMenuMaster(Destination.Models.destinationTest.MenuMaster menumaster)
        {
            OnMenuMasterCreated(menumaster);

            var existingItem = Context.MenuMasters
                              .Where(i => i.Id == menumaster.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.MenuMasters.Add(menumaster);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(menumaster).State = EntityState.Detached;
                throw;
            }

            OnAfterMenuMasterCreated(menumaster);

            return menumaster;
        }

        public async Task<Destination.Models.destinationTest.MenuMaster> CancelMenuMasterChanges(Destination.Models.destinationTest.MenuMaster item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnMenuMasterUpdated(Destination.Models.destinationTest.MenuMaster item);
        partial void OnAfterMenuMasterUpdated(Destination.Models.destinationTest.MenuMaster item);

        public async Task<Destination.Models.destinationTest.MenuMaster> UpdateMenuMaster(int id, Destination.Models.destinationTest.MenuMaster menumaster)
        {
            OnMenuMasterUpdated(menumaster);

            var itemToUpdate = Context.MenuMasters
                              .Where(i => i.Id == menumaster.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(menumaster);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterMenuMasterUpdated(menumaster);

            return menumaster;
        }

        partial void OnMenuMasterDeleted(Destination.Models.destinationTest.MenuMaster item);
        partial void OnAfterMenuMasterDeleted(Destination.Models.destinationTest.MenuMaster item);

        public async Task<Destination.Models.destinationTest.MenuMaster> DeleteMenuMaster(int id)
        {
            var itemToDelete = Context.MenuMasters
                              .Where(i => i.Id == id)
                              .Include(i => i.MenuManagements)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnMenuMasterDeleted(itemToDelete);


            Context.MenuMasters.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterMenuMasterDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportMoreContentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/morecontents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/morecontents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportMoreContentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/morecontents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/morecontents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnMoreContentsRead(ref IQueryable<Destination.Models.destinationTest.MoreContent> items);

        public async Task<IQueryable<Destination.Models.destinationTest.MoreContent>> GetMoreContents(Query query = null)
        {
            var items = Context.MoreContents.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnMoreContentsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnMoreContentGet(Destination.Models.destinationTest.MoreContent item);
        partial void OnGetMoreContentByMoreContentId(ref IQueryable<Destination.Models.destinationTest.MoreContent> items);


        public async Task<Destination.Models.destinationTest.MoreContent> GetMoreContentByMoreContentId(int morecontentid)
        {
            var items = Context.MoreContents
                              .AsNoTracking()
                              .Where(i => i.MoreContentId == morecontentid);

 
            OnGetMoreContentByMoreContentId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnMoreContentGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnMoreContentCreated(Destination.Models.destinationTest.MoreContent item);
        partial void OnAfterMoreContentCreated(Destination.Models.destinationTest.MoreContent item);

        public async Task<Destination.Models.destinationTest.MoreContent> CreateMoreContent(Destination.Models.destinationTest.MoreContent morecontent)
        {
            OnMoreContentCreated(morecontent);

            var existingItem = Context.MoreContents
                              .Where(i => i.MoreContentId == morecontent.MoreContentId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.MoreContents.Add(morecontent);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(morecontent).State = EntityState.Detached;
                throw;
            }

            OnAfterMoreContentCreated(morecontent);

            return morecontent;
        }

        public async Task<Destination.Models.destinationTest.MoreContent> CancelMoreContentChanges(Destination.Models.destinationTest.MoreContent item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnMoreContentUpdated(Destination.Models.destinationTest.MoreContent item);
        partial void OnAfterMoreContentUpdated(Destination.Models.destinationTest.MoreContent item);

        public async Task<Destination.Models.destinationTest.MoreContent> UpdateMoreContent(int morecontentid, Destination.Models.destinationTest.MoreContent morecontent)
        {
            OnMoreContentUpdated(morecontent);

            var itemToUpdate = Context.MoreContents
                              .Where(i => i.MoreContentId == morecontent.MoreContentId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(morecontent);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterMoreContentUpdated(morecontent);

            return morecontent;
        }

        partial void OnMoreContentDeleted(Destination.Models.destinationTest.MoreContent item);
        partial void OnAfterMoreContentDeleted(Destination.Models.destinationTest.MoreContent item);

        public async Task<Destination.Models.destinationTest.MoreContent> DeleteMoreContent(int morecontentid)
        {
            var itemToDelete = Context.MoreContents
                              .Where(i => i.MoreContentId == morecontentid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnMoreContentDeleted(itemToDelete);


            Context.MoreContents.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterMoreContentDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportNeighborhoodsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/neighborhoods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/neighborhoods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportNeighborhoodsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/neighborhoods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/neighborhoods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnNeighborhoodsRead(ref IQueryable<Destination.Models.destinationTest.Neighborhood> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Neighborhood>> GetNeighborhoods(Query query = null)
        {
            var items = Context.Neighborhoods.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnNeighborhoodsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnNeighborhoodGet(Destination.Models.destinationTest.Neighborhood item);
        partial void OnGetNeighborhoodById(ref IQueryable<Destination.Models.destinationTest.Neighborhood> items);


        public async Task<Destination.Models.destinationTest.Neighborhood> GetNeighborhoodById(int id)
        {
            var items = Context.Neighborhoods
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetNeighborhoodById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnNeighborhoodGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnNeighborhoodCreated(Destination.Models.destinationTest.Neighborhood item);
        partial void OnAfterNeighborhoodCreated(Destination.Models.destinationTest.Neighborhood item);

        public async Task<Destination.Models.destinationTest.Neighborhood> CreateNeighborhood(Destination.Models.destinationTest.Neighborhood neighborhood)
        {
            OnNeighborhoodCreated(neighborhood);

            var existingItem = Context.Neighborhoods
                              .Where(i => i.Id == neighborhood.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Neighborhoods.Add(neighborhood);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(neighborhood).State = EntityState.Detached;
                throw;
            }

            OnAfterNeighborhoodCreated(neighborhood);

            return neighborhood;
        }

        public async Task<Destination.Models.destinationTest.Neighborhood> CancelNeighborhoodChanges(Destination.Models.destinationTest.Neighborhood item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnNeighborhoodUpdated(Destination.Models.destinationTest.Neighborhood item);
        partial void OnAfterNeighborhoodUpdated(Destination.Models.destinationTest.Neighborhood item);

        public async Task<Destination.Models.destinationTest.Neighborhood> UpdateNeighborhood(int id, Destination.Models.destinationTest.Neighborhood neighborhood)
        {
            OnNeighborhoodUpdated(neighborhood);

            var itemToUpdate = Context.Neighborhoods
                              .Where(i => i.Id == neighborhood.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(neighborhood);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterNeighborhoodUpdated(neighborhood);

            return neighborhood;
        }

        partial void OnNeighborhoodDeleted(Destination.Models.destinationTest.Neighborhood item);
        partial void OnAfterNeighborhoodDeleted(Destination.Models.destinationTest.Neighborhood item);

        public async Task<Destination.Models.destinationTest.Neighborhood> DeleteNeighborhood(int id)
        {
            var itemToDelete = Context.Neighborhoods
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnNeighborhoodDeleted(itemToDelete);


            Context.Neighborhoods.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterNeighborhoodDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportNoWordsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/nowords/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/nowords/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportNoWordsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/nowords/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/nowords/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnNoWordsRead(ref IQueryable<Destination.Models.destinationTest.NoWord> items);

        public async Task<IQueryable<Destination.Models.destinationTest.NoWord>> GetNoWords(Query query = null)
        {
            var items = Context.NoWords.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnNoWordsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnNoWordGet(Destination.Models.destinationTest.NoWord item);
        partial void OnGetNoWordById(ref IQueryable<Destination.Models.destinationTest.NoWord> items);


        public async Task<Destination.Models.destinationTest.NoWord> GetNoWordById(int id)
        {
            var items = Context.NoWords
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetNoWordById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnNoWordGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnNoWordCreated(Destination.Models.destinationTest.NoWord item);
        partial void OnAfterNoWordCreated(Destination.Models.destinationTest.NoWord item);

        public async Task<Destination.Models.destinationTest.NoWord> CreateNoWord(Destination.Models.destinationTest.NoWord noword)
        {
            OnNoWordCreated(noword);

            var existingItem = Context.NoWords
                              .Where(i => i.Id == noword.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.NoWords.Add(noword);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(noword).State = EntityState.Detached;
                throw;
            }

            OnAfterNoWordCreated(noword);

            return noword;
        }

        public async Task<Destination.Models.destinationTest.NoWord> CancelNoWordChanges(Destination.Models.destinationTest.NoWord item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnNoWordUpdated(Destination.Models.destinationTest.NoWord item);
        partial void OnAfterNoWordUpdated(Destination.Models.destinationTest.NoWord item);

        public async Task<Destination.Models.destinationTest.NoWord> UpdateNoWord(int id, Destination.Models.destinationTest.NoWord noword)
        {
            OnNoWordUpdated(noword);

            var itemToUpdate = Context.NoWords
                              .Where(i => i.Id == noword.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(noword);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterNoWordUpdated(noword);

            return noword;
        }

        partial void OnNoWordDeleted(Destination.Models.destinationTest.NoWord item);
        partial void OnAfterNoWordDeleted(Destination.Models.destinationTest.NoWord item);

        public async Task<Destination.Models.destinationTest.NoWord> DeleteNoWord(int id)
        {
            var itemToDelete = Context.NoWords
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnNoWordDeleted(itemToDelete);


            Context.NoWords.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterNoWordDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportOffhoursListForSmsroutinesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/offhourslistforsmsroutines/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/offhourslistforsmsroutines/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportOffhoursListForSmsroutinesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/offhourslistforsmsroutines/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/offhourslistforsmsroutines/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnOffhoursListForSmsroutinesRead(ref IQueryable<Destination.Models.destinationTest.OffhoursListForSmsroutine> items);

        public async Task<IQueryable<Destination.Models.destinationTest.OffhoursListForSmsroutine>> GetOffhoursListForSmsroutines(Query query = null)
        {
            var items = Context.OffhoursListForSmsroutines.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnOffhoursListForSmsroutinesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportOlarkZapiersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/olarkzapiers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/olarkzapiers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportOlarkZapiersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/olarkzapiers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/olarkzapiers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnOlarkZapiersRead(ref IQueryable<Destination.Models.destinationTest.OlarkZapier> items);

        public async Task<IQueryable<Destination.Models.destinationTest.OlarkZapier>> GetOlarkZapiers(Query query = null)
        {
            var items = Context.OlarkZapiers.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnOlarkZapiersRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnOlarkZapierGet(Destination.Models.destinationTest.OlarkZapier item);
        partial void OnGetOlarkZapierById(ref IQueryable<Destination.Models.destinationTest.OlarkZapier> items);


        public async Task<Destination.Models.destinationTest.OlarkZapier> GetOlarkZapierById(int id)
        {
            var items = Context.OlarkZapiers
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetOlarkZapierById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnOlarkZapierGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnOlarkZapierCreated(Destination.Models.destinationTest.OlarkZapier item);
        partial void OnAfterOlarkZapierCreated(Destination.Models.destinationTest.OlarkZapier item);

        public async Task<Destination.Models.destinationTest.OlarkZapier> CreateOlarkZapier(Destination.Models.destinationTest.OlarkZapier olarkzapier)
        {
            OnOlarkZapierCreated(olarkzapier);

            var existingItem = Context.OlarkZapiers
                              .Where(i => i.Id == olarkzapier.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.OlarkZapiers.Add(olarkzapier);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(olarkzapier).State = EntityState.Detached;
                throw;
            }

            OnAfterOlarkZapierCreated(olarkzapier);

            return olarkzapier;
        }

        public async Task<Destination.Models.destinationTest.OlarkZapier> CancelOlarkZapierChanges(Destination.Models.destinationTest.OlarkZapier item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnOlarkZapierUpdated(Destination.Models.destinationTest.OlarkZapier item);
        partial void OnAfterOlarkZapierUpdated(Destination.Models.destinationTest.OlarkZapier item);

        public async Task<Destination.Models.destinationTest.OlarkZapier> UpdateOlarkZapier(int id, Destination.Models.destinationTest.OlarkZapier olarkzapier)
        {
            OnOlarkZapierUpdated(olarkzapier);

            var itemToUpdate = Context.OlarkZapiers
                              .Where(i => i.Id == olarkzapier.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(olarkzapier);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterOlarkZapierUpdated(olarkzapier);

            return olarkzapier;
        }

        partial void OnOlarkZapierDeleted(Destination.Models.destinationTest.OlarkZapier item);
        partial void OnAfterOlarkZapierDeleted(Destination.Models.destinationTest.OlarkZapier item);

        public async Task<Destination.Models.destinationTest.OlarkZapier> DeleteOlarkZapier(int id)
        {
            var itemToDelete = Context.OlarkZapiers
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnOlarkZapierDeleted(itemToDelete);


            Context.OlarkZapiers.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterOlarkZapierDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportOlarkZapierNewsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/olarkzapiernews/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/olarkzapiernews/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportOlarkZapierNewsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/olarkzapiernews/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/olarkzapiernews/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnOlarkZapierNewsRead(ref IQueryable<Destination.Models.destinationTest.OlarkZapierNew> items);

        public async Task<IQueryable<Destination.Models.destinationTest.OlarkZapierNew>> GetOlarkZapierNews(Query query = null)
        {
            var items = Context.OlarkZapierNews.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnOlarkZapierNewsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnOlarkZapierNewGet(Destination.Models.destinationTest.OlarkZapierNew item);
        partial void OnGetOlarkZapierNewById(ref IQueryable<Destination.Models.destinationTest.OlarkZapierNew> items);


        public async Task<Destination.Models.destinationTest.OlarkZapierNew> GetOlarkZapierNewById(int id)
        {
            var items = Context.OlarkZapierNews
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetOlarkZapierNewById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnOlarkZapierNewGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnOlarkZapierNewCreated(Destination.Models.destinationTest.OlarkZapierNew item);
        partial void OnAfterOlarkZapierNewCreated(Destination.Models.destinationTest.OlarkZapierNew item);

        public async Task<Destination.Models.destinationTest.OlarkZapierNew> CreateOlarkZapierNew(Destination.Models.destinationTest.OlarkZapierNew olarkzapiernew)
        {
            OnOlarkZapierNewCreated(olarkzapiernew);

            var existingItem = Context.OlarkZapierNews
                              .Where(i => i.Id == olarkzapiernew.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.OlarkZapierNews.Add(olarkzapiernew);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(olarkzapiernew).State = EntityState.Detached;
                throw;
            }

            OnAfterOlarkZapierNewCreated(olarkzapiernew);

            return olarkzapiernew;
        }

        public async Task<Destination.Models.destinationTest.OlarkZapierNew> CancelOlarkZapierNewChanges(Destination.Models.destinationTest.OlarkZapierNew item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnOlarkZapierNewUpdated(Destination.Models.destinationTest.OlarkZapierNew item);
        partial void OnAfterOlarkZapierNewUpdated(Destination.Models.destinationTest.OlarkZapierNew item);

        public async Task<Destination.Models.destinationTest.OlarkZapierNew> UpdateOlarkZapierNew(int id, Destination.Models.destinationTest.OlarkZapierNew olarkzapiernew)
        {
            OnOlarkZapierNewUpdated(olarkzapiernew);

            var itemToUpdate = Context.OlarkZapierNews
                              .Where(i => i.Id == olarkzapiernew.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(olarkzapiernew);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterOlarkZapierNewUpdated(olarkzapiernew);

            return olarkzapiernew;
        }

        partial void OnOlarkZapierNewDeleted(Destination.Models.destinationTest.OlarkZapierNew item);
        partial void OnAfterOlarkZapierNewDeleted(Destination.Models.destinationTest.OlarkZapierNew item);

        public async Task<Destination.Models.destinationTest.OlarkZapierNew> DeleteOlarkZapierNew(int id)
        {
            var itemToDelete = Context.OlarkZapierNews
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnOlarkZapierNewDeleted(itemToDelete);


            Context.OlarkZapierNews.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterOlarkZapierNewDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportOpinionStageSurveyLeadsReporsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/opinionstagesurveyleadsrepors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/opinionstagesurveyleadsrepors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportOpinionStageSurveyLeadsReporsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/opinionstagesurveyleadsrepors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/opinionstagesurveyleadsrepors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnOpinionStageSurveyLeadsReporsRead(ref IQueryable<Destination.Models.destinationTest.OpinionStageSurveyLeadsRepor> items);

        public async Task<IQueryable<Destination.Models.destinationTest.OpinionStageSurveyLeadsRepor>> GetOpinionStageSurveyLeadsRepors(Query query = null)
        {
            var items = Context.OpinionStageSurveyLeadsRepors.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnOpinionStageSurveyLeadsReporsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportOwnerCommunicationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ownercommunications/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ownercommunications/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportOwnerCommunicationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ownercommunications/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ownercommunications/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnOwnerCommunicationsRead(ref IQueryable<Destination.Models.destinationTest.OwnerCommunication> items);

        public async Task<IQueryable<Destination.Models.destinationTest.OwnerCommunication>> GetOwnerCommunications(Query query = null)
        {
            var items = Context.OwnerCommunications.AsQueryable();

            items = items.Include(i => i.Agent1);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnOwnerCommunicationsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnOwnerCommunicationGet(Destination.Models.destinationTest.OwnerCommunication item);
        partial void OnGetOwnerCommunicationById(ref IQueryable<Destination.Models.destinationTest.OwnerCommunication> items);


        public async Task<Destination.Models.destinationTest.OwnerCommunication> GetOwnerCommunicationById(int id)
        {
            var items = Context.OwnerCommunications
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Agent1);
 
            OnGetOwnerCommunicationById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnOwnerCommunicationGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnOwnerCommunicationCreated(Destination.Models.destinationTest.OwnerCommunication item);
        partial void OnAfterOwnerCommunicationCreated(Destination.Models.destinationTest.OwnerCommunication item);

        public async Task<Destination.Models.destinationTest.OwnerCommunication> CreateOwnerCommunication(Destination.Models.destinationTest.OwnerCommunication ownercommunication)
        {
            OnOwnerCommunicationCreated(ownercommunication);

            var existingItem = Context.OwnerCommunications
                              .Where(i => i.Id == ownercommunication.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.OwnerCommunications.Add(ownercommunication);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ownercommunication).State = EntityState.Detached;
                throw;
            }

            OnAfterOwnerCommunicationCreated(ownercommunication);

            return ownercommunication;
        }

        public async Task<Destination.Models.destinationTest.OwnerCommunication> CancelOwnerCommunicationChanges(Destination.Models.destinationTest.OwnerCommunication item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnOwnerCommunicationUpdated(Destination.Models.destinationTest.OwnerCommunication item);
        partial void OnAfterOwnerCommunicationUpdated(Destination.Models.destinationTest.OwnerCommunication item);

        public async Task<Destination.Models.destinationTest.OwnerCommunication> UpdateOwnerCommunication(int id, Destination.Models.destinationTest.OwnerCommunication ownercommunication)
        {
            OnOwnerCommunicationUpdated(ownercommunication);

            var itemToUpdate = Context.OwnerCommunications
                              .Where(i => i.Id == ownercommunication.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ownercommunication);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterOwnerCommunicationUpdated(ownercommunication);

            return ownercommunication;
        }

        partial void OnOwnerCommunicationDeleted(Destination.Models.destinationTest.OwnerCommunication item);
        partial void OnAfterOwnerCommunicationDeleted(Destination.Models.destinationTest.OwnerCommunication item);

        public async Task<Destination.Models.destinationTest.OwnerCommunication> DeleteOwnerCommunication(int id)
        {
            var itemToDelete = Context.OwnerCommunications
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnOwnerCommunicationDeleted(itemToDelete);


            Context.OwnerCommunications.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterOwnerCommunicationDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportOwnerUpdatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ownerupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ownerupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportOwnerUpdatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ownerupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ownerupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnOwnerUpdatesRead(ref IQueryable<Destination.Models.destinationTest.OwnerUpdate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.OwnerUpdate>> GetOwnerUpdates(Query query = null)
        {
            var items = Context.OwnerUpdates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnOwnerUpdatesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPageEmailRecipientsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/pageemailrecipients/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/pageemailrecipients/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPageEmailRecipientsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/pageemailrecipients/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/pageemailrecipients/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPageEmailRecipientsRead(ref IQueryable<Destination.Models.destinationTest.PageEmailRecipient> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PageEmailRecipient>> GetPageEmailRecipients(Query query = null)
        {
            var items = Context.PageEmailRecipients.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPageEmailRecipientsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPageEmailRecipientGet(Destination.Models.destinationTest.PageEmailRecipient item);
        partial void OnGetPageEmailRecipientById(ref IQueryable<Destination.Models.destinationTest.PageEmailRecipient> items);


        public async Task<Destination.Models.destinationTest.PageEmailRecipient> GetPageEmailRecipientById(int id)
        {
            var items = Context.PageEmailRecipients
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPageEmailRecipientById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPageEmailRecipientGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPageEmailRecipientCreated(Destination.Models.destinationTest.PageEmailRecipient item);
        partial void OnAfterPageEmailRecipientCreated(Destination.Models.destinationTest.PageEmailRecipient item);

        public async Task<Destination.Models.destinationTest.PageEmailRecipient> CreatePageEmailRecipient(Destination.Models.destinationTest.PageEmailRecipient pageemailrecipient)
        {
            OnPageEmailRecipientCreated(pageemailrecipient);

            var existingItem = Context.PageEmailRecipients
                              .Where(i => i.Id == pageemailrecipient.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PageEmailRecipients.Add(pageemailrecipient);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(pageemailrecipient).State = EntityState.Detached;
                throw;
            }

            OnAfterPageEmailRecipientCreated(pageemailrecipient);

            return pageemailrecipient;
        }

        public async Task<Destination.Models.destinationTest.PageEmailRecipient> CancelPageEmailRecipientChanges(Destination.Models.destinationTest.PageEmailRecipient item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPageEmailRecipientUpdated(Destination.Models.destinationTest.PageEmailRecipient item);
        partial void OnAfterPageEmailRecipientUpdated(Destination.Models.destinationTest.PageEmailRecipient item);

        public async Task<Destination.Models.destinationTest.PageEmailRecipient> UpdatePageEmailRecipient(int id, Destination.Models.destinationTest.PageEmailRecipient pageemailrecipient)
        {
            OnPageEmailRecipientUpdated(pageemailrecipient);

            var itemToUpdate = Context.PageEmailRecipients
                              .Where(i => i.Id == pageemailrecipient.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(pageemailrecipient);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPageEmailRecipientUpdated(pageemailrecipient);

            return pageemailrecipient;
        }

        partial void OnPageEmailRecipientDeleted(Destination.Models.destinationTest.PageEmailRecipient item);
        partial void OnAfterPageEmailRecipientDeleted(Destination.Models.destinationTest.PageEmailRecipient item);

        public async Task<Destination.Models.destinationTest.PageEmailRecipient> DeletePageEmailRecipient(int id)
        {
            var itemToDelete = Context.PageEmailRecipients
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPageEmailRecipientDeleted(itemToDelete);


            Context.PageEmailRecipients.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPageEmailRecipientDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPaymentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/payments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/payments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPaymentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/payments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/payments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPaymentsRead(ref IQueryable<Destination.Models.destinationTest.Payment> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Payment>> GetPayments(Query query = null)
        {
            var items = Context.Payments.AsQueryable();

            items = items.Include(i => i.Booking);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPaymentsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPaymentGet(Destination.Models.destinationTest.Payment item);
        partial void OnGetPaymentByIntPaymentId(ref IQueryable<Destination.Models.destinationTest.Payment> items);


        public async Task<Destination.Models.destinationTest.Payment> GetPaymentByIntPaymentId(int intpaymentid)
        {
            var items = Context.Payments
                              .AsNoTracking()
                              .Where(i => i.IntPaymentId == intpaymentid);

            items = items.Include(i => i.Booking);
 
            OnGetPaymentByIntPaymentId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPaymentGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPaymentCreated(Destination.Models.destinationTest.Payment item);
        partial void OnAfterPaymentCreated(Destination.Models.destinationTest.Payment item);

        public async Task<Destination.Models.destinationTest.Payment> CreatePayment(Destination.Models.destinationTest.Payment payment)
        {
            OnPaymentCreated(payment);

            var existingItem = Context.Payments
                              .Where(i => i.IntPaymentId == payment.IntPaymentId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Payments.Add(payment);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(payment).State = EntityState.Detached;
                throw;
            }

            OnAfterPaymentCreated(payment);

            return payment;
        }

        public async Task<Destination.Models.destinationTest.Payment> CancelPaymentChanges(Destination.Models.destinationTest.Payment item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPaymentUpdated(Destination.Models.destinationTest.Payment item);
        partial void OnAfterPaymentUpdated(Destination.Models.destinationTest.Payment item);

        public async Task<Destination.Models.destinationTest.Payment> UpdatePayment(int intpaymentid, Destination.Models.destinationTest.Payment payment)
        {
            OnPaymentUpdated(payment);

            var itemToUpdate = Context.Payments
                              .Where(i => i.IntPaymentId == payment.IntPaymentId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(payment);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPaymentUpdated(payment);

            return payment;
        }

        partial void OnPaymentDeleted(Destination.Models.destinationTest.Payment item);
        partial void OnAfterPaymentDeleted(Destination.Models.destinationTest.Payment item);

        public async Task<Destination.Models.destinationTest.Payment> DeletePayment(int intpaymentid)
        {
            var itemToDelete = Context.Payments
                              .Where(i => i.IntPaymentId == intpaymentid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPaymentDeleted(itemToDelete);


            Context.Payments.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPaymentDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPaymentLogDoubleRefundedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/paymentlogdoublerefundeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/paymentlogdoublerefundeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPaymentLogDoubleRefundedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/paymentlogdoublerefundeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/paymentlogdoublerefundeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPaymentLogDoubleRefundedsRead(ref IQueryable<Destination.Models.destinationTest.PaymentLogDoubleRefunded> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PaymentLogDoubleRefunded>> GetPaymentLogDoubleRefundeds(Query query = null)
        {
            var items = Context.PaymentLogDoubleRefundeds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPaymentLogDoubleRefundedsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPerformasToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/performas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/performas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPerformasToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/performas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/performas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPerformasRead(ref IQueryable<Destination.Models.destinationTest.Performa> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Performa>> GetPerformas(Query query = null)
        {
            var items = Context.Performas.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPerformasRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPerformaGet(Destination.Models.destinationTest.Performa item);
        partial void OnGetPerformaByPerformaId(ref IQueryable<Destination.Models.destinationTest.Performa> items);


        public async Task<Destination.Models.destinationTest.Performa> GetPerformaByPerformaId(int performaid)
        {
            var items = Context.Performas
                              .AsNoTracking()
                              .Where(i => i.PerformaId == performaid);

            items = items.Include(i => i.Property);
 
            OnGetPerformaByPerformaId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPerformaGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPerformaCreated(Destination.Models.destinationTest.Performa item);
        partial void OnAfterPerformaCreated(Destination.Models.destinationTest.Performa item);

        public async Task<Destination.Models.destinationTest.Performa> CreatePerforma(Destination.Models.destinationTest.Performa performa)
        {
            OnPerformaCreated(performa);

            var existingItem = Context.Performas
                              .Where(i => i.PerformaId == performa.PerformaId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Performas.Add(performa);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(performa).State = EntityState.Detached;
                throw;
            }

            OnAfterPerformaCreated(performa);

            return performa;
        }

        public async Task<Destination.Models.destinationTest.Performa> CancelPerformaChanges(Destination.Models.destinationTest.Performa item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPerformaUpdated(Destination.Models.destinationTest.Performa item);
        partial void OnAfterPerformaUpdated(Destination.Models.destinationTest.Performa item);

        public async Task<Destination.Models.destinationTest.Performa> UpdatePerforma(int performaid, Destination.Models.destinationTest.Performa performa)
        {
            OnPerformaUpdated(performa);

            var itemToUpdate = Context.Performas
                              .Where(i => i.PerformaId == performa.PerformaId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(performa);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPerformaUpdated(performa);

            return performa;
        }

        partial void OnPerformaDeleted(Destination.Models.destinationTest.Performa item);
        partial void OnAfterPerformaDeleted(Destination.Models.destinationTest.Performa item);

        public async Task<Destination.Models.destinationTest.Performa> DeletePerforma(int performaid)
        {
            var itemToDelete = Context.Performas
                              .Where(i => i.PerformaId == performaid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPerformaDeleted(itemToDelete);


            Context.Performas.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPerformaDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPerformaCompsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/performacomps/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/performacomps/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPerformaCompsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/performacomps/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/performacomps/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPerformaCompsRead(ref IQueryable<Destination.Models.destinationTest.PerformaComp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PerformaComp>> GetPerformaComps(Query query = null)
        {
            var items = Context.PerformaComps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPerformaCompsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPerformaCompGet(Destination.Models.destinationTest.PerformaComp item);
        partial void OnGetPerformaCompById(ref IQueryable<Destination.Models.destinationTest.PerformaComp> items);


        public async Task<Destination.Models.destinationTest.PerformaComp> GetPerformaCompById(int id)
        {
            var items = Context.PerformaComps
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPerformaCompById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPerformaCompGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPerformaCompCreated(Destination.Models.destinationTest.PerformaComp item);
        partial void OnAfterPerformaCompCreated(Destination.Models.destinationTest.PerformaComp item);

        public async Task<Destination.Models.destinationTest.PerformaComp> CreatePerformaComp(Destination.Models.destinationTest.PerformaComp performacomp)
        {
            OnPerformaCompCreated(performacomp);

            var existingItem = Context.PerformaComps
                              .Where(i => i.Id == performacomp.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PerformaComps.Add(performacomp);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(performacomp).State = EntityState.Detached;
                throw;
            }

            OnAfterPerformaCompCreated(performacomp);

            return performacomp;
        }

        public async Task<Destination.Models.destinationTest.PerformaComp> CancelPerformaCompChanges(Destination.Models.destinationTest.PerformaComp item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPerformaCompUpdated(Destination.Models.destinationTest.PerformaComp item);
        partial void OnAfterPerformaCompUpdated(Destination.Models.destinationTest.PerformaComp item);

        public async Task<Destination.Models.destinationTest.PerformaComp> UpdatePerformaComp(int id, Destination.Models.destinationTest.PerformaComp performacomp)
        {
            OnPerformaCompUpdated(performacomp);

            var itemToUpdate = Context.PerformaComps
                              .Where(i => i.Id == performacomp.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(performacomp);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPerformaCompUpdated(performacomp);

            return performacomp;
        }

        partial void OnPerformaCompDeleted(Destination.Models.destinationTest.PerformaComp item);
        partial void OnAfterPerformaCompDeleted(Destination.Models.destinationTest.PerformaComp item);

        public async Task<Destination.Models.destinationTest.PerformaComp> DeletePerformaComp(int id)
        {
            var itemToDelete = Context.PerformaComps
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPerformaCompDeleted(itemToDelete);


            Context.PerformaComps.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPerformaCompDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPermitsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/permits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/permits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPermitsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/permits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/permits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPermitsRead(ref IQueryable<Destination.Models.destinationTest.Permit> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Permit>> GetPermits(Query query = null)
        {
            var items = Context.Permits.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPermitsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPhoneCallLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/phonecalllogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/phonecalllogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPhoneCallLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/phonecalllogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/phonecalllogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPhoneCallLogsRead(ref IQueryable<Destination.Models.destinationTest.PhoneCallLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PhoneCallLog>> GetPhoneCallLogs(Query query = null)
        {
            var items = Context.PhoneCallLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPhoneCallLogsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPinkSheetNotesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/pinksheetnotes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/pinksheetnotes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPinkSheetNotesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/pinksheetnotes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/pinksheetnotes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPinkSheetNotesRead(ref IQueryable<Destination.Models.destinationTest.PinkSheetNote> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PinkSheetNote>> GetPinkSheetNotes(Query query = null)
        {
            var items = Context.PinkSheetNotes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPinkSheetNotesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPinkSheetNoteGet(Destination.Models.destinationTest.PinkSheetNote item);
        partial void OnGetPinkSheetNoteById(ref IQueryable<Destination.Models.destinationTest.PinkSheetNote> items);


        public async Task<Destination.Models.destinationTest.PinkSheetNote> GetPinkSheetNoteById(int id)
        {
            var items = Context.PinkSheetNotes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPinkSheetNoteById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPinkSheetNoteGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPinkSheetNoteCreated(Destination.Models.destinationTest.PinkSheetNote item);
        partial void OnAfterPinkSheetNoteCreated(Destination.Models.destinationTest.PinkSheetNote item);

        public async Task<Destination.Models.destinationTest.PinkSheetNote> CreatePinkSheetNote(Destination.Models.destinationTest.PinkSheetNote pinksheetnote)
        {
            OnPinkSheetNoteCreated(pinksheetnote);

            var existingItem = Context.PinkSheetNotes
                              .Where(i => i.Id == pinksheetnote.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PinkSheetNotes.Add(pinksheetnote);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(pinksheetnote).State = EntityState.Detached;
                throw;
            }

            OnAfterPinkSheetNoteCreated(pinksheetnote);

            return pinksheetnote;
        }

        public async Task<Destination.Models.destinationTest.PinkSheetNote> CancelPinkSheetNoteChanges(Destination.Models.destinationTest.PinkSheetNote item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPinkSheetNoteUpdated(Destination.Models.destinationTest.PinkSheetNote item);
        partial void OnAfterPinkSheetNoteUpdated(Destination.Models.destinationTest.PinkSheetNote item);

        public async Task<Destination.Models.destinationTest.PinkSheetNote> UpdatePinkSheetNote(int id, Destination.Models.destinationTest.PinkSheetNote pinksheetnote)
        {
            OnPinkSheetNoteUpdated(pinksheetnote);

            var itemToUpdate = Context.PinkSheetNotes
                              .Where(i => i.Id == pinksheetnote.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(pinksheetnote);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPinkSheetNoteUpdated(pinksheetnote);

            return pinksheetnote;
        }

        partial void OnPinkSheetNoteDeleted(Destination.Models.destinationTest.PinkSheetNote item);
        partial void OnAfterPinkSheetNoteDeleted(Destination.Models.destinationTest.PinkSheetNote item);

        public async Task<Destination.Models.destinationTest.PinkSheetNote> DeletePinkSheetNote(int id)
        {
            var itemToDelete = Context.PinkSheetNotes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPinkSheetNoteDeleted(itemToDelete);


            Context.PinkSheetNotes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPinkSheetNoteDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProcGetLastBookingDetailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/procgetlastbookingdetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/procgetlastbookingdetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProcGetLastBookingDetailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/procgetlastbookingdetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/procgetlastbookingdetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProcGetLastBookingDetailsRead(ref IQueryable<Destination.Models.destinationTest.ProcGetLastBookingDetail> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ProcGetLastBookingDetail>> GetProcGetLastBookingDetails(Query query = null)
        {
            var items = Context.ProcGetLastBookingDetails.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnProcGetLastBookingDetailsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPromoCodesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/promocodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/promocodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPromoCodesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/promocodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/promocodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPromoCodesRead(ref IQueryable<Destination.Models.destinationTest.PromoCode> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PromoCode>> GetPromoCodes(Query query = null)
        {
            var items = Context.PromoCodes.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPromoCodesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPromoCodeGet(Destination.Models.destinationTest.PromoCode item);
        partial void OnGetPromoCodeById(ref IQueryable<Destination.Models.destinationTest.PromoCode> items);


        public async Task<Destination.Models.destinationTest.PromoCode> GetPromoCodeById(int id)
        {
            var items = Context.PromoCodes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPromoCodeById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPromoCodeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPromoCodeCreated(Destination.Models.destinationTest.PromoCode item);
        partial void OnAfterPromoCodeCreated(Destination.Models.destinationTest.PromoCode item);

        public async Task<Destination.Models.destinationTest.PromoCode> CreatePromoCode(Destination.Models.destinationTest.PromoCode promocode)
        {
            OnPromoCodeCreated(promocode);

            var existingItem = Context.PromoCodes
                              .Where(i => i.Id == promocode.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PromoCodes.Add(promocode);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(promocode).State = EntityState.Detached;
                throw;
            }

            OnAfterPromoCodeCreated(promocode);

            return promocode;
        }

        public async Task<Destination.Models.destinationTest.PromoCode> CancelPromoCodeChanges(Destination.Models.destinationTest.PromoCode item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPromoCodeUpdated(Destination.Models.destinationTest.PromoCode item);
        partial void OnAfterPromoCodeUpdated(Destination.Models.destinationTest.PromoCode item);

        public async Task<Destination.Models.destinationTest.PromoCode> UpdatePromoCode(int id, Destination.Models.destinationTest.PromoCode promocode)
        {
            OnPromoCodeUpdated(promocode);

            var itemToUpdate = Context.PromoCodes
                              .Where(i => i.Id == promocode.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(promocode);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPromoCodeUpdated(promocode);

            return promocode;
        }

        partial void OnPromoCodeDeleted(Destination.Models.destinationTest.PromoCode item);
        partial void OnAfterPromoCodeDeleted(Destination.Models.destinationTest.PromoCode item);

        public async Task<Destination.Models.destinationTest.PromoCode> DeletePromoCode(int id)
        {
            var itemToDelete = Context.PromoCodes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPromoCodeDeleted(itemToDelete);


            Context.PromoCodes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPromoCodeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPromotionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/promotions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/promotions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPromotionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/promotions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/promotions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPromotionsRead(ref IQueryable<Destination.Models.destinationTest.Promotion> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Promotion>> GetPromotions(Query query = null)
        {
            var items = Context.Promotions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPromotionsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/properties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/properties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/properties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/properties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertiesRead(ref IQueryable<Destination.Models.destinationTest.Property> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Property>> GetProperties(Query query = null)
        {
            var items = Context.Properties.AsQueryable();

            items = items.Include(i => i.Agent);
            items = items.Include(i => i.PropertyCleaner);
            items = items.Include(i => i.Status1);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertiesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyGet(Destination.Models.destinationTest.Property item);
        partial void OnGetPropertyByPropid(ref IQueryable<Destination.Models.destinationTest.Property> items);


        public async Task<Destination.Models.destinationTest.Property> GetPropertyByPropid(int propid)
        {
            var items = Context.Properties
                              .AsNoTracking()
                              .Where(i => i.Propid == propid);

            items = items.Include(i => i.Agent);
            items = items.Include(i => i.PropertyCleaner);
            items = items.Include(i => i.Status1);
 
            OnGetPropertyByPropid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyCreated(Destination.Models.destinationTest.Property item);
        partial void OnAfterPropertyCreated(Destination.Models.destinationTest.Property item);

        public async Task<Destination.Models.destinationTest.Property> CreateProperty(Destination.Models.destinationTest.Property property)
        {
            OnPropertyCreated(property);

            var existingItem = Context.Properties
                              .Where(i => i.Propid == property.Propid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Properties.Add(property);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(property).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyCreated(property);

            return property;
        }

        public async Task<Destination.Models.destinationTest.Property> CancelPropertyChanges(Destination.Models.destinationTest.Property item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyUpdated(Destination.Models.destinationTest.Property item);
        partial void OnAfterPropertyUpdated(Destination.Models.destinationTest.Property item);

        public async Task<Destination.Models.destinationTest.Property> UpdateProperty(int propid, Destination.Models.destinationTest.Property property)
        {
            OnPropertyUpdated(property);

            var itemToUpdate = Context.Properties
                              .Where(i => i.Propid == property.Propid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(property);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyUpdated(property);

            return property;
        }

        partial void OnPropertyDeleted(Destination.Models.destinationTest.Property item);
        partial void OnAfterPropertyDeleted(Destination.Models.destinationTest.Property item);

        public async Task<Destination.Models.destinationTest.Property> DeleteProperty(int propid)
        {
            var itemToDelete = Context.Properties
                              .Where(i => i.Propid == propid)
                              .Include(i => i.AnnualSurveys)
                              .Include(i => i.Bookings)
                              .Include(i => i.BookingsLogics)
                              .Include(i => i.Channels)
                              .Include(i => i.Currentdiscounts)
                              .Include(i => i.DailyRatesBasedOnPropertyRates)
                              .Include(i => i.FilterDataForBulkSmsMails)
                              .Include(i => i.MarketingReviews)
                              .Include(i => i.Performas)
                              .Include(i => i.PromoCodes)
                              .Include(i => i.PropertyBeds)
                              .Include(i => i.PropertyExpenses)
                              .Include(i => i.PropertyImprovements)
                              .Include(i => i.PropertyMgts)
                              .Include(i => i.PropertyRates)
                              .Include(i => i.PropertyRatesVrbos)
                              .Include(i => i.PropertyWarnings)
                              .Include(i => i.PropertyBackToBackBookingsRestricts)
                              .Include(i => i.PropertyRatesDailies)
                              .Include(i => i.PropertyVisitCounts)
                              .Include(i => i.TblMultiDayDiscounts)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyDeleted(itemToDelete);


            Context.Properties.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyActivationDatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyactivationdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyactivationdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyActivationDatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyactivationdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyactivationdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyActivationDatesRead(ref IQueryable<Destination.Models.destinationTest.PropertyActivationDate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyActivationDate>> GetPropertyActivationDates(Query query = null)
        {
            var items = Context.PropertyActivationDates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyActivationDatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyActivationDateGet(Destination.Models.destinationTest.PropertyActivationDate item);
        partial void OnGetPropertyActivationDateById(ref IQueryable<Destination.Models.destinationTest.PropertyActivationDate> items);


        public async Task<Destination.Models.destinationTest.PropertyActivationDate> GetPropertyActivationDateById(int id)
        {
            var items = Context.PropertyActivationDates
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyActivationDateById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyActivationDateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyActivationDateCreated(Destination.Models.destinationTest.PropertyActivationDate item);
        partial void OnAfterPropertyActivationDateCreated(Destination.Models.destinationTest.PropertyActivationDate item);

        public async Task<Destination.Models.destinationTest.PropertyActivationDate> CreatePropertyActivationDate(Destination.Models.destinationTest.PropertyActivationDate propertyactivationdate)
        {
            OnPropertyActivationDateCreated(propertyactivationdate);

            var existingItem = Context.PropertyActivationDates
                              .Where(i => i.Id == propertyactivationdate.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyActivationDates.Add(propertyactivationdate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyactivationdate).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyActivationDateCreated(propertyactivationdate);

            return propertyactivationdate;
        }

        public async Task<Destination.Models.destinationTest.PropertyActivationDate> CancelPropertyActivationDateChanges(Destination.Models.destinationTest.PropertyActivationDate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyActivationDateUpdated(Destination.Models.destinationTest.PropertyActivationDate item);
        partial void OnAfterPropertyActivationDateUpdated(Destination.Models.destinationTest.PropertyActivationDate item);

        public async Task<Destination.Models.destinationTest.PropertyActivationDate> UpdatePropertyActivationDate(int id, Destination.Models.destinationTest.PropertyActivationDate propertyactivationdate)
        {
            OnPropertyActivationDateUpdated(propertyactivationdate);

            var itemToUpdate = Context.PropertyActivationDates
                              .Where(i => i.Id == propertyactivationdate.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyactivationdate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyActivationDateUpdated(propertyactivationdate);

            return propertyactivationdate;
        }

        partial void OnPropertyActivationDateDeleted(Destination.Models.destinationTest.PropertyActivationDate item);
        partial void OnAfterPropertyActivationDateDeleted(Destination.Models.destinationTest.PropertyActivationDate item);

        public async Task<Destination.Models.destinationTest.PropertyActivationDate> DeletePropertyActivationDate(int id)
        {
            var itemToDelete = Context.PropertyActivationDates
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyActivationDateDeleted(itemToDelete);


            Context.PropertyActivationDates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyActivationDateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyBedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertybeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertybeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyBedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertybeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertybeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyBedsRead(ref IQueryable<Destination.Models.destinationTest.PropertyBed> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyBed>> GetPropertyBeds(Query query = null)
        {
            var items = Context.PropertyBeds.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyBedsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyBedGet(Destination.Models.destinationTest.PropertyBed item);
        partial void OnGetPropertyBedById(ref IQueryable<Destination.Models.destinationTest.PropertyBed> items);


        public async Task<Destination.Models.destinationTest.PropertyBed> GetPropertyBedById(int id)
        {
            var items = Context.PropertyBeds
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPropertyBedById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyBedGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyBedCreated(Destination.Models.destinationTest.PropertyBed item);
        partial void OnAfterPropertyBedCreated(Destination.Models.destinationTest.PropertyBed item);

        public async Task<Destination.Models.destinationTest.PropertyBed> CreatePropertyBed(Destination.Models.destinationTest.PropertyBed propertybed)
        {
            OnPropertyBedCreated(propertybed);

            var existingItem = Context.PropertyBeds
                              .Where(i => i.Id == propertybed.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyBeds.Add(propertybed);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertybed).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyBedCreated(propertybed);

            return propertybed;
        }

        public async Task<Destination.Models.destinationTest.PropertyBed> CancelPropertyBedChanges(Destination.Models.destinationTest.PropertyBed item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyBedUpdated(Destination.Models.destinationTest.PropertyBed item);
        partial void OnAfterPropertyBedUpdated(Destination.Models.destinationTest.PropertyBed item);

        public async Task<Destination.Models.destinationTest.PropertyBed> UpdatePropertyBed(int id, Destination.Models.destinationTest.PropertyBed propertybed)
        {
            OnPropertyBedUpdated(propertybed);

            var itemToUpdate = Context.PropertyBeds
                              .Where(i => i.Id == propertybed.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertybed);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyBedUpdated(propertybed);

            return propertybed;
        }

        partial void OnPropertyBedDeleted(Destination.Models.destinationTest.PropertyBed item);
        partial void OnAfterPropertyBedDeleted(Destination.Models.destinationTest.PropertyBed item);

        public async Task<Destination.Models.destinationTest.PropertyBed> DeletePropertyBed(int id)
        {
            var itemToDelete = Context.PropertyBeds
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyBedDeleted(itemToDelete);


            Context.PropertyBeds.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyBedDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyCleanersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertycleaners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertycleaners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyCleanersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertycleaners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertycleaners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyCleanersRead(ref IQueryable<Destination.Models.destinationTest.PropertyCleaner> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyCleaner>> GetPropertyCleaners(Query query = null)
        {
            var items = Context.PropertyCleaners.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyCleanersRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyCleanerGet(Destination.Models.destinationTest.PropertyCleaner item);
        partial void OnGetPropertyCleanerByCleanerid(ref IQueryable<Destination.Models.destinationTest.PropertyCleaner> items);


        public async Task<Destination.Models.destinationTest.PropertyCleaner> GetPropertyCleanerByCleanerid(int cleanerid)
        {
            var items = Context.PropertyCleaners
                              .AsNoTracking()
                              .Where(i => i.Cleanerid == cleanerid);

 
            OnGetPropertyCleanerByCleanerid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyCleanerGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyCleanerCreated(Destination.Models.destinationTest.PropertyCleaner item);
        partial void OnAfterPropertyCleanerCreated(Destination.Models.destinationTest.PropertyCleaner item);

        public async Task<Destination.Models.destinationTest.PropertyCleaner> CreatePropertyCleaner(Destination.Models.destinationTest.PropertyCleaner propertycleaner)
        {
            OnPropertyCleanerCreated(propertycleaner);

            var existingItem = Context.PropertyCleaners
                              .Where(i => i.Cleanerid == propertycleaner.Cleanerid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyCleaners.Add(propertycleaner);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertycleaner).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyCleanerCreated(propertycleaner);

            return propertycleaner;
        }

        public async Task<Destination.Models.destinationTest.PropertyCleaner> CancelPropertyCleanerChanges(Destination.Models.destinationTest.PropertyCleaner item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyCleanerUpdated(Destination.Models.destinationTest.PropertyCleaner item);
        partial void OnAfterPropertyCleanerUpdated(Destination.Models.destinationTest.PropertyCleaner item);

        public async Task<Destination.Models.destinationTest.PropertyCleaner> UpdatePropertyCleaner(int cleanerid, Destination.Models.destinationTest.PropertyCleaner propertycleaner)
        {
            OnPropertyCleanerUpdated(propertycleaner);

            var itemToUpdate = Context.PropertyCleaners
                              .Where(i => i.Cleanerid == propertycleaner.Cleanerid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertycleaner);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyCleanerUpdated(propertycleaner);

            return propertycleaner;
        }

        partial void OnPropertyCleanerDeleted(Destination.Models.destinationTest.PropertyCleaner item);
        partial void OnAfterPropertyCleanerDeleted(Destination.Models.destinationTest.PropertyCleaner item);

        public async Task<Destination.Models.destinationTest.PropertyCleaner> DeletePropertyCleaner(int cleanerid)
        {
            var itemToDelete = Context.PropertyCleaners
                              .Where(i => i.Cleanerid == cleanerid)
                              .Include(i => i.Properties)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyCleanerDeleted(itemToDelete);


            Context.PropertyCleaners.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyCleanerDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyConductsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyconducts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyconducts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyConductsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyconducts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyconducts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyConductsRead(ref IQueryable<Destination.Models.destinationTest.PropertyConduct> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyConduct>> GetPropertyConducts(Query query = null)
        {
            var items = Context.PropertyConducts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyConductsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyConductGet(Destination.Models.destinationTest.PropertyConduct item);
        partial void OnGetPropertyConductById(ref IQueryable<Destination.Models.destinationTest.PropertyConduct> items);


        public async Task<Destination.Models.destinationTest.PropertyConduct> GetPropertyConductById(int id)
        {
            var items = Context.PropertyConducts
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyConductById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyConductGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyConductCreated(Destination.Models.destinationTest.PropertyConduct item);
        partial void OnAfterPropertyConductCreated(Destination.Models.destinationTest.PropertyConduct item);

        public async Task<Destination.Models.destinationTest.PropertyConduct> CreatePropertyConduct(Destination.Models.destinationTest.PropertyConduct propertyconduct)
        {
            OnPropertyConductCreated(propertyconduct);

            var existingItem = Context.PropertyConducts
                              .Where(i => i.Id == propertyconduct.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyConducts.Add(propertyconduct);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyconduct).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyConductCreated(propertyconduct);

            return propertyconduct;
        }

        public async Task<Destination.Models.destinationTest.PropertyConduct> CancelPropertyConductChanges(Destination.Models.destinationTest.PropertyConduct item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyConductUpdated(Destination.Models.destinationTest.PropertyConduct item);
        partial void OnAfterPropertyConductUpdated(Destination.Models.destinationTest.PropertyConduct item);

        public async Task<Destination.Models.destinationTest.PropertyConduct> UpdatePropertyConduct(int id, Destination.Models.destinationTest.PropertyConduct propertyconduct)
        {
            OnPropertyConductUpdated(propertyconduct);

            var itemToUpdate = Context.PropertyConducts
                              .Where(i => i.Id == propertyconduct.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyconduct);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyConductUpdated(propertyconduct);

            return propertyconduct;
        }

        partial void OnPropertyConductDeleted(Destination.Models.destinationTest.PropertyConduct item);
        partial void OnAfterPropertyConductDeleted(Destination.Models.destinationTest.PropertyConduct item);

        public async Task<Destination.Models.destinationTest.PropertyConduct> DeletePropertyConduct(int id)
        {
            var itemToDelete = Context.PropertyConducts
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyConductDeleted(itemToDelete);


            Context.PropertyConducts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyConductDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyContentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertycontents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertycontents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyContentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertycontents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertycontents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyContentsRead(ref IQueryable<Destination.Models.destinationTest.PropertyContent> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyContent>> GetPropertyContents(Query query = null)
        {
            var items = Context.PropertyContents.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyContentsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyContentGet(Destination.Models.destinationTest.PropertyContent item);
        partial void OnGetPropertyContentByContentId(ref IQueryable<Destination.Models.destinationTest.PropertyContent> items);


        public async Task<Destination.Models.destinationTest.PropertyContent> GetPropertyContentByContentId(int contentid)
        {
            var items = Context.PropertyContents
                              .AsNoTracking()
                              .Where(i => i.ContentId == contentid);

 
            OnGetPropertyContentByContentId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyContentGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyContentCreated(Destination.Models.destinationTest.PropertyContent item);
        partial void OnAfterPropertyContentCreated(Destination.Models.destinationTest.PropertyContent item);

        public async Task<Destination.Models.destinationTest.PropertyContent> CreatePropertyContent(Destination.Models.destinationTest.PropertyContent propertycontent)
        {
            OnPropertyContentCreated(propertycontent);

            var existingItem = Context.PropertyContents
                              .Where(i => i.ContentId == propertycontent.ContentId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyContents.Add(propertycontent);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertycontent).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyContentCreated(propertycontent);

            return propertycontent;
        }

        public async Task<Destination.Models.destinationTest.PropertyContent> CancelPropertyContentChanges(Destination.Models.destinationTest.PropertyContent item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyContentUpdated(Destination.Models.destinationTest.PropertyContent item);
        partial void OnAfterPropertyContentUpdated(Destination.Models.destinationTest.PropertyContent item);

        public async Task<Destination.Models.destinationTest.PropertyContent> UpdatePropertyContent(int contentid, Destination.Models.destinationTest.PropertyContent propertycontent)
        {
            OnPropertyContentUpdated(propertycontent);

            var itemToUpdate = Context.PropertyContents
                              .Where(i => i.ContentId == propertycontent.ContentId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertycontent);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyContentUpdated(propertycontent);

            return propertycontent;
        }

        partial void OnPropertyContentDeleted(Destination.Models.destinationTest.PropertyContent item);
        partial void OnAfterPropertyContentDeleted(Destination.Models.destinationTest.PropertyContent item);

        public async Task<Destination.Models.destinationTest.PropertyContent> DeletePropertyContent(int contentid)
        {
            var itemToDelete = Context.PropertyContents
                              .Where(i => i.ContentId == contentid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyContentDeleted(itemToDelete);


            Context.PropertyContents.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyContentDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyExpenseBlankRecordsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyexpenseblankrecords/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyexpenseblankrecords/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyExpenseBlankRecordsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyexpenseblankrecords/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyexpenseblankrecords/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyExpenseBlankRecordsRead(ref IQueryable<Destination.Models.destinationTest.PropertyExpenseBlankRecord> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyExpenseBlankRecord>> GetPropertyExpenseBlankRecords(Query query = null)
        {
            var items = Context.PropertyExpenseBlankRecords.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyExpenseBlankRecordsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyExpensesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyExpensesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyExpensesRead(ref IQueryable<Destination.Models.destinationTest.PropertyExpense> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyExpense>> GetPropertyExpenses(Query query = null)
        {
            var items = Context.PropertyExpenses.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyExpensesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyExpenseGet(Destination.Models.destinationTest.PropertyExpense item);
        partial void OnGetPropertyExpenseByPropexpid(ref IQueryable<Destination.Models.destinationTest.PropertyExpense> items);


        public async Task<Destination.Models.destinationTest.PropertyExpense> GetPropertyExpenseByPropexpid(int propexpid)
        {
            var items = Context.PropertyExpenses
                              .AsNoTracking()
                              .Where(i => i.Propexpid == propexpid);

            items = items.Include(i => i.Property);
 
            OnGetPropertyExpenseByPropexpid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyExpenseGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyExpenseCreated(Destination.Models.destinationTest.PropertyExpense item);
        partial void OnAfterPropertyExpenseCreated(Destination.Models.destinationTest.PropertyExpense item);

        public async Task<Destination.Models.destinationTest.PropertyExpense> CreatePropertyExpense(Destination.Models.destinationTest.PropertyExpense propertyexpense)
        {
            OnPropertyExpenseCreated(propertyexpense);

            var existingItem = Context.PropertyExpenses
                              .Where(i => i.Propexpid == propertyexpense.Propexpid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyExpenses.Add(propertyexpense);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyexpense).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyExpenseCreated(propertyexpense);

            return propertyexpense;
        }

        public async Task<Destination.Models.destinationTest.PropertyExpense> CancelPropertyExpenseChanges(Destination.Models.destinationTest.PropertyExpense item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyExpenseUpdated(Destination.Models.destinationTest.PropertyExpense item);
        partial void OnAfterPropertyExpenseUpdated(Destination.Models.destinationTest.PropertyExpense item);

        public async Task<Destination.Models.destinationTest.PropertyExpense> UpdatePropertyExpense(int propexpid, Destination.Models.destinationTest.PropertyExpense propertyexpense)
        {
            OnPropertyExpenseUpdated(propertyexpense);

            var itemToUpdate = Context.PropertyExpenses
                              .Where(i => i.Propexpid == propertyexpense.Propexpid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyexpense);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyExpenseUpdated(propertyexpense);

            return propertyexpense;
        }

        partial void OnPropertyExpenseDeleted(Destination.Models.destinationTest.PropertyExpense item);
        partial void OnAfterPropertyExpenseDeleted(Destination.Models.destinationTest.PropertyExpense item);

        public async Task<Destination.Models.destinationTest.PropertyExpense> DeletePropertyExpense(int propexpid)
        {
            var itemToDelete = Context.PropertyExpenses
                              .Where(i => i.Propexpid == propexpid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyExpenseDeleted(itemToDelete);


            Context.PropertyExpenses.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyExpenseDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyExpensesDeletedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyexpensesdeleteds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyexpensesdeleteds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyExpensesDeletedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyexpensesdeleteds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyexpensesdeleteds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyExpensesDeletedsRead(ref IQueryable<Destination.Models.destinationTest.PropertyExpensesDeleted> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyExpensesDeleted>> GetPropertyExpensesDeleteds(Query query = null)
        {
            var items = Context.PropertyExpensesDeleteds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyExpensesDeletedsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyImprovementsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyimprovements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyimprovements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyImprovementsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyimprovements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyimprovements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyImprovementsRead(ref IQueryable<Destination.Models.destinationTest.PropertyImprovement> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyImprovement>> GetPropertyImprovements(Query query = null)
        {
            var items = Context.PropertyImprovements.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyImprovementsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyImprovementGet(Destination.Models.destinationTest.PropertyImprovement item);
        partial void OnGetPropertyImprovementByPropimproveid(ref IQueryable<Destination.Models.destinationTest.PropertyImprovement> items);


        public async Task<Destination.Models.destinationTest.PropertyImprovement> GetPropertyImprovementByPropimproveid(int propimproveid)
        {
            var items = Context.PropertyImprovements
                              .AsNoTracking()
                              .Where(i => i.Propimproveid == propimproveid);

            items = items.Include(i => i.Property);
 
            OnGetPropertyImprovementByPropimproveid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyImprovementGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyImprovementCreated(Destination.Models.destinationTest.PropertyImprovement item);
        partial void OnAfterPropertyImprovementCreated(Destination.Models.destinationTest.PropertyImprovement item);

        public async Task<Destination.Models.destinationTest.PropertyImprovement> CreatePropertyImprovement(Destination.Models.destinationTest.PropertyImprovement propertyimprovement)
        {
            OnPropertyImprovementCreated(propertyimprovement);

            var existingItem = Context.PropertyImprovements
                              .Where(i => i.Propimproveid == propertyimprovement.Propimproveid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyImprovements.Add(propertyimprovement);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyimprovement).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyImprovementCreated(propertyimprovement);

            return propertyimprovement;
        }

        public async Task<Destination.Models.destinationTest.PropertyImprovement> CancelPropertyImprovementChanges(Destination.Models.destinationTest.PropertyImprovement item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyImprovementUpdated(Destination.Models.destinationTest.PropertyImprovement item);
        partial void OnAfterPropertyImprovementUpdated(Destination.Models.destinationTest.PropertyImprovement item);

        public async Task<Destination.Models.destinationTest.PropertyImprovement> UpdatePropertyImprovement(int propimproveid, Destination.Models.destinationTest.PropertyImprovement propertyimprovement)
        {
            OnPropertyImprovementUpdated(propertyimprovement);

            var itemToUpdate = Context.PropertyImprovements
                              .Where(i => i.Propimproveid == propertyimprovement.Propimproveid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyimprovement);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyImprovementUpdated(propertyimprovement);

            return propertyimprovement;
        }

        partial void OnPropertyImprovementDeleted(Destination.Models.destinationTest.PropertyImprovement item);
        partial void OnAfterPropertyImprovementDeleted(Destination.Models.destinationTest.PropertyImprovement item);

        public async Task<Destination.Models.destinationTest.PropertyImprovement> DeletePropertyImprovement(int propimproveid)
        {
            var itemToDelete = Context.PropertyImprovements
                              .Where(i => i.Propimproveid == propimproveid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyImprovementDeleted(itemToDelete);


            Context.PropertyImprovements.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyImprovementDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyImprovementTypesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyimprovementtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyimprovementtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyImprovementTypesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyimprovementtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyimprovementtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyImprovementTypesRead(ref IQueryable<Destination.Models.destinationTest.PropertyImprovementType> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyImprovementType>> GetPropertyImprovementTypes(Query query = null)
        {
            var items = Context.PropertyImprovementTypes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyImprovementTypesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyImprovementTypeGet(Destination.Models.destinationTest.PropertyImprovementType item);
        partial void OnGetPropertyImprovementTypeById(ref IQueryable<Destination.Models.destinationTest.PropertyImprovementType> items);


        public async Task<Destination.Models.destinationTest.PropertyImprovementType> GetPropertyImprovementTypeById(int id)
        {
            var items = Context.PropertyImprovementTypes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyImprovementTypeById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyImprovementTypeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyImprovementTypeCreated(Destination.Models.destinationTest.PropertyImprovementType item);
        partial void OnAfterPropertyImprovementTypeCreated(Destination.Models.destinationTest.PropertyImprovementType item);

        public async Task<Destination.Models.destinationTest.PropertyImprovementType> CreatePropertyImprovementType(Destination.Models.destinationTest.PropertyImprovementType propertyimprovementtype)
        {
            OnPropertyImprovementTypeCreated(propertyimprovementtype);

            var existingItem = Context.PropertyImprovementTypes
                              .Where(i => i.Id == propertyimprovementtype.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyImprovementTypes.Add(propertyimprovementtype);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyimprovementtype).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyImprovementTypeCreated(propertyimprovementtype);

            return propertyimprovementtype;
        }

        public async Task<Destination.Models.destinationTest.PropertyImprovementType> CancelPropertyImprovementTypeChanges(Destination.Models.destinationTest.PropertyImprovementType item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyImprovementTypeUpdated(Destination.Models.destinationTest.PropertyImprovementType item);
        partial void OnAfterPropertyImprovementTypeUpdated(Destination.Models.destinationTest.PropertyImprovementType item);

        public async Task<Destination.Models.destinationTest.PropertyImprovementType> UpdatePropertyImprovementType(int id, Destination.Models.destinationTest.PropertyImprovementType propertyimprovementtype)
        {
            OnPropertyImprovementTypeUpdated(propertyimprovementtype);

            var itemToUpdate = Context.PropertyImprovementTypes
                              .Where(i => i.Id == propertyimprovementtype.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyimprovementtype);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyImprovementTypeUpdated(propertyimprovementtype);

            return propertyimprovementtype;
        }

        partial void OnPropertyImprovementTypeDeleted(Destination.Models.destinationTest.PropertyImprovementType item);
        partial void OnAfterPropertyImprovementTypeDeleted(Destination.Models.destinationTest.PropertyImprovementType item);

        public async Task<Destination.Models.destinationTest.PropertyImprovementType> DeletePropertyImprovementType(int id)
        {
            var itemToDelete = Context.PropertyImprovementTypes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyImprovementTypeDeleted(itemToDelete);


            Context.PropertyImprovementTypes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyImprovementTypeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyLastNextBookingDetailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertylastnextbookingdetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertylastnextbookingdetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyLastNextBookingDetailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertylastnextbookingdetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertylastnextbookingdetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyLastNextBookingDetailsRead(ref IQueryable<Destination.Models.destinationTest.PropertyLastNextBookingDetail> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyLastNextBookingDetail>> GetPropertyLastNextBookingDetails(Query query = null)
        {
            var items = Context.PropertyLastNextBookingDetails.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyLastNextBookingDetailsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyMgtsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertymgts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertymgts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyMgtsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertymgts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertymgts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyMgtsRead(ref IQueryable<Destination.Models.destinationTest.PropertyMgt> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyMgt>> GetPropertyMgts(Query query = null)
        {
            var items = Context.PropertyMgts.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyMgtsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyMgtGet(Destination.Models.destinationTest.PropertyMgt item);
        partial void OnGetPropertyMgtById(ref IQueryable<Destination.Models.destinationTest.PropertyMgt> items);


        public async Task<Destination.Models.destinationTest.PropertyMgt> GetPropertyMgtById(int id)
        {
            var items = Context.PropertyMgts
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPropertyMgtById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyMgtGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyMgtCreated(Destination.Models.destinationTest.PropertyMgt item);
        partial void OnAfterPropertyMgtCreated(Destination.Models.destinationTest.PropertyMgt item);

        public async Task<Destination.Models.destinationTest.PropertyMgt> CreatePropertyMgt(Destination.Models.destinationTest.PropertyMgt propertymgt)
        {
            OnPropertyMgtCreated(propertymgt);

            var existingItem = Context.PropertyMgts
                              .Where(i => i.Id == propertymgt.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyMgts.Add(propertymgt);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertymgt).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyMgtCreated(propertymgt);

            return propertymgt;
        }

        public async Task<Destination.Models.destinationTest.PropertyMgt> CancelPropertyMgtChanges(Destination.Models.destinationTest.PropertyMgt item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyMgtUpdated(Destination.Models.destinationTest.PropertyMgt item);
        partial void OnAfterPropertyMgtUpdated(Destination.Models.destinationTest.PropertyMgt item);

        public async Task<Destination.Models.destinationTest.PropertyMgt> UpdatePropertyMgt(int id, Destination.Models.destinationTest.PropertyMgt propertymgt)
        {
            OnPropertyMgtUpdated(propertymgt);

            var itemToUpdate = Context.PropertyMgts
                              .Where(i => i.Id == propertymgt.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertymgt);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyMgtUpdated(propertymgt);

            return propertymgt;
        }

        partial void OnPropertyMgtDeleted(Destination.Models.destinationTest.PropertyMgt item);
        partial void OnAfterPropertyMgtDeleted(Destination.Models.destinationTest.PropertyMgt item);

        public async Task<Destination.Models.destinationTest.PropertyMgt> DeletePropertyMgt(int id)
        {
            var itemToDelete = Context.PropertyMgts
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyMgtDeleted(itemToDelete);


            Context.PropertyMgts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyMgtDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyNeighborsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyneighbors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyneighbors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyNeighborsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyneighbors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyneighbors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyNeighborsRead(ref IQueryable<Destination.Models.destinationTest.PropertyNeighbor> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyNeighbor>> GetPropertyNeighbors(Query query = null)
        {
            var items = Context.PropertyNeighbors.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyNeighborsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyNeighborGet(Destination.Models.destinationTest.PropertyNeighbor item);
        partial void OnGetPropertyNeighborById(ref IQueryable<Destination.Models.destinationTest.PropertyNeighbor> items);


        public async Task<Destination.Models.destinationTest.PropertyNeighbor> GetPropertyNeighborById(int id)
        {
            var items = Context.PropertyNeighbors
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyNeighborById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyNeighborGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyNeighborCreated(Destination.Models.destinationTest.PropertyNeighbor item);
        partial void OnAfterPropertyNeighborCreated(Destination.Models.destinationTest.PropertyNeighbor item);

        public async Task<Destination.Models.destinationTest.PropertyNeighbor> CreatePropertyNeighbor(Destination.Models.destinationTest.PropertyNeighbor propertyneighbor)
        {
            OnPropertyNeighborCreated(propertyneighbor);

            var existingItem = Context.PropertyNeighbors
                              .Where(i => i.Id == propertyneighbor.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyNeighbors.Add(propertyneighbor);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyneighbor).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyNeighborCreated(propertyneighbor);

            return propertyneighbor;
        }

        public async Task<Destination.Models.destinationTest.PropertyNeighbor> CancelPropertyNeighborChanges(Destination.Models.destinationTest.PropertyNeighbor item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyNeighborUpdated(Destination.Models.destinationTest.PropertyNeighbor item);
        partial void OnAfterPropertyNeighborUpdated(Destination.Models.destinationTest.PropertyNeighbor item);

        public async Task<Destination.Models.destinationTest.PropertyNeighbor> UpdatePropertyNeighbor(int id, Destination.Models.destinationTest.PropertyNeighbor propertyneighbor)
        {
            OnPropertyNeighborUpdated(propertyneighbor);

            var itemToUpdate = Context.PropertyNeighbors
                              .Where(i => i.Id == propertyneighbor.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyneighbor);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyNeighborUpdated(propertyneighbor);

            return propertyneighbor;
        }

        partial void OnPropertyNeighborDeleted(Destination.Models.destinationTest.PropertyNeighbor item);
        partial void OnAfterPropertyNeighborDeleted(Destination.Models.destinationTest.PropertyNeighbor item);

        public async Task<Destination.Models.destinationTest.PropertyNeighbor> DeletePropertyNeighbor(int id)
        {
            var itemToDelete = Context.PropertyNeighbors
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyNeighborDeleted(itemToDelete);


            Context.PropertyNeighbors.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyNeighborDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyOwnerInstructionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyownerinstructions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyownerinstructions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyOwnerInstructionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyownerinstructions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyownerinstructions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyOwnerInstructionsRead(ref IQueryable<Destination.Models.destinationTest.PropertyOwnerInstruction> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyOwnerInstruction>> GetPropertyOwnerInstructions(Query query = null)
        {
            var items = Context.PropertyOwnerInstructions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyOwnerInstructionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyOwnerInstructionGet(Destination.Models.destinationTest.PropertyOwnerInstruction item);
        partial void OnGetPropertyOwnerInstructionById(ref IQueryable<Destination.Models.destinationTest.PropertyOwnerInstruction> items);


        public async Task<Destination.Models.destinationTest.PropertyOwnerInstruction> GetPropertyOwnerInstructionById(int id)
        {
            var items = Context.PropertyOwnerInstructions
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyOwnerInstructionById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyOwnerInstructionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyOwnerInstructionCreated(Destination.Models.destinationTest.PropertyOwnerInstruction item);
        partial void OnAfterPropertyOwnerInstructionCreated(Destination.Models.destinationTest.PropertyOwnerInstruction item);

        public async Task<Destination.Models.destinationTest.PropertyOwnerInstruction> CreatePropertyOwnerInstruction(Destination.Models.destinationTest.PropertyOwnerInstruction propertyownerinstruction)
        {
            OnPropertyOwnerInstructionCreated(propertyownerinstruction);

            var existingItem = Context.PropertyOwnerInstructions
                              .Where(i => i.Id == propertyownerinstruction.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyOwnerInstructions.Add(propertyownerinstruction);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyownerinstruction).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyOwnerInstructionCreated(propertyownerinstruction);

            return propertyownerinstruction;
        }

        public async Task<Destination.Models.destinationTest.PropertyOwnerInstruction> CancelPropertyOwnerInstructionChanges(Destination.Models.destinationTest.PropertyOwnerInstruction item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyOwnerInstructionUpdated(Destination.Models.destinationTest.PropertyOwnerInstruction item);
        partial void OnAfterPropertyOwnerInstructionUpdated(Destination.Models.destinationTest.PropertyOwnerInstruction item);

        public async Task<Destination.Models.destinationTest.PropertyOwnerInstruction> UpdatePropertyOwnerInstruction(int id, Destination.Models.destinationTest.PropertyOwnerInstruction propertyownerinstruction)
        {
            OnPropertyOwnerInstructionUpdated(propertyownerinstruction);

            var itemToUpdate = Context.PropertyOwnerInstructions
                              .Where(i => i.Id == propertyownerinstruction.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyownerinstruction);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyOwnerInstructionUpdated(propertyownerinstruction);

            return propertyownerinstruction;
        }

        partial void OnPropertyOwnerInstructionDeleted(Destination.Models.destinationTest.PropertyOwnerInstruction item);
        partial void OnAfterPropertyOwnerInstructionDeleted(Destination.Models.destinationTest.PropertyOwnerInstruction item);

        public async Task<Destination.Models.destinationTest.PropertyOwnerInstruction> DeletePropertyOwnerInstruction(int id)
        {
            var itemToDelete = Context.PropertyOwnerInstructions
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyOwnerInstructionDeleted(itemToDelete);


            Context.PropertyOwnerInstructions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyOwnerInstructionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyRatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesRead(ref IQueryable<Destination.Models.destinationTest.PropertyRate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRate>> GetPropertyRates(Query query = null)
        {
            var items = Context.PropertyRates.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRateGet(Destination.Models.destinationTest.PropertyRate item);
        partial void OnGetPropertyRateById(ref IQueryable<Destination.Models.destinationTest.PropertyRate> items);


        public async Task<Destination.Models.destinationTest.PropertyRate> GetPropertyRateById(int id)
        {
            var items = Context.PropertyRates
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPropertyRateById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRateCreated(Destination.Models.destinationTest.PropertyRate item);
        partial void OnAfterPropertyRateCreated(Destination.Models.destinationTest.PropertyRate item);

        public async Task<Destination.Models.destinationTest.PropertyRate> CreatePropertyRate(Destination.Models.destinationTest.PropertyRate propertyrate)
        {
            OnPropertyRateCreated(propertyrate);

            var existingItem = Context.PropertyRates
                              .Where(i => i.Id == propertyrate.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRates.Add(propertyrate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyrate).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRateCreated(propertyrate);

            return propertyrate;
        }

        public async Task<Destination.Models.destinationTest.PropertyRate> CancelPropertyRateChanges(Destination.Models.destinationTest.PropertyRate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRateUpdated(Destination.Models.destinationTest.PropertyRate item);
        partial void OnAfterPropertyRateUpdated(Destination.Models.destinationTest.PropertyRate item);

        public async Task<Destination.Models.destinationTest.PropertyRate> UpdatePropertyRate(int id, Destination.Models.destinationTest.PropertyRate propertyrate)
        {
            OnPropertyRateUpdated(propertyrate);

            var itemToUpdate = Context.PropertyRates
                              .Where(i => i.Id == propertyrate.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyrate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRateUpdated(propertyrate);

            return propertyrate;
        }

        partial void OnPropertyRateDeleted(Destination.Models.destinationTest.PropertyRate item);
        partial void OnAfterPropertyRateDeleted(Destination.Models.destinationTest.PropertyRate item);

        public async Task<Destination.Models.destinationTest.PropertyRate> DeletePropertyRate(int id)
        {
            var itemToDelete = Context.PropertyRates
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRateDeleted(itemToDelete);


            Context.PropertyRates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyRatesAirbnbsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesairbnbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesairbnbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesAirbnbsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesairbnbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesairbnbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesAirbnbsRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesAirbnb> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesAirbnb>> GetPropertyRatesAirbnbs(Query query = null)
        {
            var items = Context.PropertyRatesAirbnbs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesAirbnbsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRatesAirbnbGet(Destination.Models.destinationTest.PropertyRatesAirbnb item);
        partial void OnGetPropertyRatesAirbnbById(ref IQueryable<Destination.Models.destinationTest.PropertyRatesAirbnb> items);


        public async Task<Destination.Models.destinationTest.PropertyRatesAirbnb> GetPropertyRatesAirbnbById(int id)
        {
            var items = Context.PropertyRatesAirbnbs
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyRatesAirbnbById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRatesAirbnbGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRatesAirbnbCreated(Destination.Models.destinationTest.PropertyRatesAirbnb item);
        partial void OnAfterPropertyRatesAirbnbCreated(Destination.Models.destinationTest.PropertyRatesAirbnb item);

        public async Task<Destination.Models.destinationTest.PropertyRatesAirbnb> CreatePropertyRatesAirbnb(Destination.Models.destinationTest.PropertyRatesAirbnb propertyratesairbnb)
        {
            OnPropertyRatesAirbnbCreated(propertyratesairbnb);

            var existingItem = Context.PropertyRatesAirbnbs
                              .Where(i => i.Id == propertyratesairbnb.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRatesAirbnbs.Add(propertyratesairbnb);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyratesairbnb).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRatesAirbnbCreated(propertyratesairbnb);

            return propertyratesairbnb;
        }

        public async Task<Destination.Models.destinationTest.PropertyRatesAirbnb> CancelPropertyRatesAirbnbChanges(Destination.Models.destinationTest.PropertyRatesAirbnb item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRatesAirbnbUpdated(Destination.Models.destinationTest.PropertyRatesAirbnb item);
        partial void OnAfterPropertyRatesAirbnbUpdated(Destination.Models.destinationTest.PropertyRatesAirbnb item);

        public async Task<Destination.Models.destinationTest.PropertyRatesAirbnb> UpdatePropertyRatesAirbnb(int id, Destination.Models.destinationTest.PropertyRatesAirbnb propertyratesairbnb)
        {
            OnPropertyRatesAirbnbUpdated(propertyratesairbnb);

            var itemToUpdate = Context.PropertyRatesAirbnbs
                              .Where(i => i.Id == propertyratesairbnb.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyratesairbnb);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRatesAirbnbUpdated(propertyratesairbnb);

            return propertyratesairbnb;
        }

        partial void OnPropertyRatesAirbnbDeleted(Destination.Models.destinationTest.PropertyRatesAirbnb item);
        partial void OnAfterPropertyRatesAirbnbDeleted(Destination.Models.destinationTest.PropertyRatesAirbnb item);

        public async Task<Destination.Models.destinationTest.PropertyRatesAirbnb> DeletePropertyRatesAirbnb(int id)
        {
            var itemToDelete = Context.PropertyRatesAirbnbs
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRatesAirbnbDeleted(itemToDelete);


            Context.PropertyRatesAirbnbs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRatesAirbnbDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyRatesBasesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesbases/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesbases/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesBasesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesbases/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesbases/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesBasesRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesBase> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesBase>> GetPropertyRatesBases(Query query = null)
        {
            var items = Context.PropertyRatesBases.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesBasesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRatesBaseGet(Destination.Models.destinationTest.PropertyRatesBase item);
        partial void OnGetPropertyRatesBaseById(ref IQueryable<Destination.Models.destinationTest.PropertyRatesBase> items);


        public async Task<Destination.Models.destinationTest.PropertyRatesBase> GetPropertyRatesBaseById(int id)
        {
            var items = Context.PropertyRatesBases
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyRatesBaseById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRatesBaseGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRatesBaseCreated(Destination.Models.destinationTest.PropertyRatesBase item);
        partial void OnAfterPropertyRatesBaseCreated(Destination.Models.destinationTest.PropertyRatesBase item);

        public async Task<Destination.Models.destinationTest.PropertyRatesBase> CreatePropertyRatesBase(Destination.Models.destinationTest.PropertyRatesBase propertyratesbase)
        {
            OnPropertyRatesBaseCreated(propertyratesbase);

            var existingItem = Context.PropertyRatesBases
                              .Where(i => i.Id == propertyratesbase.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRatesBases.Add(propertyratesbase);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyratesbase).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRatesBaseCreated(propertyratesbase);

            return propertyratesbase;
        }

        public async Task<Destination.Models.destinationTest.PropertyRatesBase> CancelPropertyRatesBaseChanges(Destination.Models.destinationTest.PropertyRatesBase item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRatesBaseUpdated(Destination.Models.destinationTest.PropertyRatesBase item);
        partial void OnAfterPropertyRatesBaseUpdated(Destination.Models.destinationTest.PropertyRatesBase item);

        public async Task<Destination.Models.destinationTest.PropertyRatesBase> UpdatePropertyRatesBase(int id, Destination.Models.destinationTest.PropertyRatesBase propertyratesbase)
        {
            OnPropertyRatesBaseUpdated(propertyratesbase);

            var itemToUpdate = Context.PropertyRatesBases
                              .Where(i => i.Id == propertyratesbase.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyratesbase);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRatesBaseUpdated(propertyratesbase);

            return propertyratesbase;
        }

        partial void OnPropertyRatesBaseDeleted(Destination.Models.destinationTest.PropertyRatesBase item);
        partial void OnAfterPropertyRatesBaseDeleted(Destination.Models.destinationTest.PropertyRatesBase item);

        public async Task<Destination.Models.destinationTest.PropertyRatesBase> DeletePropertyRatesBase(int id)
        {
            var itemToDelete = Context.PropertyRatesBases
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRatesBaseDeleted(itemToDelete);


            Context.PropertyRatesBases.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRatesBaseDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyRatesBbsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesbbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesbbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesBbsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesbbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesbbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesBbsRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesBb> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesBb>> GetPropertyRatesBbs(Query query = null)
        {
            var items = Context.PropertyRatesBbs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesBbsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRatesBbGet(Destination.Models.destinationTest.PropertyRatesBb item);
        partial void OnGetPropertyRatesBbById(ref IQueryable<Destination.Models.destinationTest.PropertyRatesBb> items);


        public async Task<Destination.Models.destinationTest.PropertyRatesBb> GetPropertyRatesBbById(int id)
        {
            var items = Context.PropertyRatesBbs
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyRatesBbById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRatesBbGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRatesBbCreated(Destination.Models.destinationTest.PropertyRatesBb item);
        partial void OnAfterPropertyRatesBbCreated(Destination.Models.destinationTest.PropertyRatesBb item);

        public async Task<Destination.Models.destinationTest.PropertyRatesBb> CreatePropertyRatesBb(Destination.Models.destinationTest.PropertyRatesBb propertyratesbb)
        {
            OnPropertyRatesBbCreated(propertyratesbb);

            var existingItem = Context.PropertyRatesBbs
                              .Where(i => i.Id == propertyratesbb.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRatesBbs.Add(propertyratesbb);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyratesbb).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRatesBbCreated(propertyratesbb);

            return propertyratesbb;
        }

        public async Task<Destination.Models.destinationTest.PropertyRatesBb> CancelPropertyRatesBbChanges(Destination.Models.destinationTest.PropertyRatesBb item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRatesBbUpdated(Destination.Models.destinationTest.PropertyRatesBb item);
        partial void OnAfterPropertyRatesBbUpdated(Destination.Models.destinationTest.PropertyRatesBb item);

        public async Task<Destination.Models.destinationTest.PropertyRatesBb> UpdatePropertyRatesBb(int id, Destination.Models.destinationTest.PropertyRatesBb propertyratesbb)
        {
            OnPropertyRatesBbUpdated(propertyratesbb);

            var itemToUpdate = Context.PropertyRatesBbs
                              .Where(i => i.Id == propertyratesbb.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyratesbb);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRatesBbUpdated(propertyratesbb);

            return propertyratesbb;
        }

        partial void OnPropertyRatesBbDeleted(Destination.Models.destinationTest.PropertyRatesBb item);
        partial void OnAfterPropertyRatesBbDeleted(Destination.Models.destinationTest.PropertyRatesBb item);

        public async Task<Destination.Models.destinationTest.PropertyRatesBb> DeletePropertyRatesBb(int id)
        {
            var itemToDelete = Context.PropertyRatesBbs
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRatesBbDeleted(itemToDelete);


            Context.PropertyRatesBbs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRatesBbDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyRatesTrackingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratestrackings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratestrackings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesTrackingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratestrackings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratestrackings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesTrackingsRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesTracking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesTracking>> GetPropertyRatesTrackings(Query query = null)
        {
            var items = Context.PropertyRatesTrackings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesTrackingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRatesTrackingGet(Destination.Models.destinationTest.PropertyRatesTracking item);
        partial void OnGetPropertyRatesTrackingByPropertyRatesTrackingId(ref IQueryable<Destination.Models.destinationTest.PropertyRatesTracking> items);


        public async Task<Destination.Models.destinationTest.PropertyRatesTracking> GetPropertyRatesTrackingByPropertyRatesTrackingId(long propertyratestrackingid)
        {
            var items = Context.PropertyRatesTrackings
                              .AsNoTracking()
                              .Where(i => i.PropertyRatesTrackingId == propertyratestrackingid);

 
            OnGetPropertyRatesTrackingByPropertyRatesTrackingId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRatesTrackingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRatesTrackingCreated(Destination.Models.destinationTest.PropertyRatesTracking item);
        partial void OnAfterPropertyRatesTrackingCreated(Destination.Models.destinationTest.PropertyRatesTracking item);

        public async Task<Destination.Models.destinationTest.PropertyRatesTracking> CreatePropertyRatesTracking(Destination.Models.destinationTest.PropertyRatesTracking propertyratestracking)
        {
            OnPropertyRatesTrackingCreated(propertyratestracking);

            var existingItem = Context.PropertyRatesTrackings
                              .Where(i => i.PropertyRatesTrackingId == propertyratestracking.PropertyRatesTrackingId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRatesTrackings.Add(propertyratestracking);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyratestracking).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRatesTrackingCreated(propertyratestracking);

            return propertyratestracking;
        }

        public async Task<Destination.Models.destinationTest.PropertyRatesTracking> CancelPropertyRatesTrackingChanges(Destination.Models.destinationTest.PropertyRatesTracking item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRatesTrackingUpdated(Destination.Models.destinationTest.PropertyRatesTracking item);
        partial void OnAfterPropertyRatesTrackingUpdated(Destination.Models.destinationTest.PropertyRatesTracking item);

        public async Task<Destination.Models.destinationTest.PropertyRatesTracking> UpdatePropertyRatesTracking(long propertyratestrackingid, Destination.Models.destinationTest.PropertyRatesTracking propertyratestracking)
        {
            OnPropertyRatesTrackingUpdated(propertyratestracking);

            var itemToUpdate = Context.PropertyRatesTrackings
                              .Where(i => i.PropertyRatesTrackingId == propertyratestracking.PropertyRatesTrackingId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyratestracking);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRatesTrackingUpdated(propertyratestracking);

            return propertyratestracking;
        }

        partial void OnPropertyRatesTrackingDeleted(Destination.Models.destinationTest.PropertyRatesTracking item);
        partial void OnAfterPropertyRatesTrackingDeleted(Destination.Models.destinationTest.PropertyRatesTracking item);

        public async Task<Destination.Models.destinationTest.PropertyRatesTracking> DeletePropertyRatesTracking(long propertyratestrackingid)
        {
            var itemToDelete = Context.PropertyRatesTrackings
                              .Where(i => i.PropertyRatesTrackingId == propertyratestrackingid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRatesTrackingDeleted(itemToDelete);


            Context.PropertyRatesTrackings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRatesTrackingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyRatesVrbosToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesvrbos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesvrbos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesVrbosToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesvrbos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesvrbos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesVrbosRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesVrbo> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesVrbo>> GetPropertyRatesVrbos(Query query = null)
        {
            var items = Context.PropertyRatesVrbos.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesVrbosRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRatesVrboGet(Destination.Models.destinationTest.PropertyRatesVrbo item);
        partial void OnGetPropertyRatesVrboById(ref IQueryable<Destination.Models.destinationTest.PropertyRatesVrbo> items);


        public async Task<Destination.Models.destinationTest.PropertyRatesVrbo> GetPropertyRatesVrboById(int id)
        {
            var items = Context.PropertyRatesVrbos
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPropertyRatesVrboById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRatesVrboGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRatesVrboCreated(Destination.Models.destinationTest.PropertyRatesVrbo item);
        partial void OnAfterPropertyRatesVrboCreated(Destination.Models.destinationTest.PropertyRatesVrbo item);

        public async Task<Destination.Models.destinationTest.PropertyRatesVrbo> CreatePropertyRatesVrbo(Destination.Models.destinationTest.PropertyRatesVrbo propertyratesvrbo)
        {
            OnPropertyRatesVrboCreated(propertyratesvrbo);

            var existingItem = Context.PropertyRatesVrbos
                              .Where(i => i.Id == propertyratesvrbo.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRatesVrbos.Add(propertyratesvrbo);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyratesvrbo).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRatesVrboCreated(propertyratesvrbo);

            return propertyratesvrbo;
        }

        public async Task<Destination.Models.destinationTest.PropertyRatesVrbo> CancelPropertyRatesVrboChanges(Destination.Models.destinationTest.PropertyRatesVrbo item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRatesVrboUpdated(Destination.Models.destinationTest.PropertyRatesVrbo item);
        partial void OnAfterPropertyRatesVrboUpdated(Destination.Models.destinationTest.PropertyRatesVrbo item);

        public async Task<Destination.Models.destinationTest.PropertyRatesVrbo> UpdatePropertyRatesVrbo(int id, Destination.Models.destinationTest.PropertyRatesVrbo propertyratesvrbo)
        {
            OnPropertyRatesVrboUpdated(propertyratesvrbo);

            var itemToUpdate = Context.PropertyRatesVrbos
                              .Where(i => i.Id == propertyratesvrbo.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyratesvrbo);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRatesVrboUpdated(propertyratesvrbo);

            return propertyratesvrbo;
        }

        partial void OnPropertyRatesVrboDeleted(Destination.Models.destinationTest.PropertyRatesVrbo item);
        partial void OnAfterPropertyRatesVrboDeleted(Destination.Models.destinationTest.PropertyRatesVrbo item);

        public async Task<Destination.Models.destinationTest.PropertyRatesVrbo> DeletePropertyRatesVrbo(int id)
        {
            var itemToDelete = Context.PropertyRatesVrbos
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRatesVrboDeleted(itemToDelete);


            Context.PropertyRatesVrbos.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRatesVrboDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertySourcesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertysources/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertysources/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertySourcesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertysources/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertysources/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertySourcesRead(ref IQueryable<Destination.Models.destinationTest.PropertySource> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertySource>> GetPropertySources(Query query = null)
        {
            var items = Context.PropertySources.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertySourcesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertySourceGet(Destination.Models.destinationTest.PropertySource item);
        partial void OnGetPropertySourceById(ref IQueryable<Destination.Models.destinationTest.PropertySource> items);


        public async Task<Destination.Models.destinationTest.PropertySource> GetPropertySourceById(int id)
        {
            var items = Context.PropertySources
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertySourceById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertySourceGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertySourceCreated(Destination.Models.destinationTest.PropertySource item);
        partial void OnAfterPropertySourceCreated(Destination.Models.destinationTest.PropertySource item);

        public async Task<Destination.Models.destinationTest.PropertySource> CreatePropertySource(Destination.Models.destinationTest.PropertySource propertysource)
        {
            OnPropertySourceCreated(propertysource);

            var existingItem = Context.PropertySources
                              .Where(i => i.Id == propertysource.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertySources.Add(propertysource);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertysource).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertySourceCreated(propertysource);

            return propertysource;
        }

        public async Task<Destination.Models.destinationTest.PropertySource> CancelPropertySourceChanges(Destination.Models.destinationTest.PropertySource item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertySourceUpdated(Destination.Models.destinationTest.PropertySource item);
        partial void OnAfterPropertySourceUpdated(Destination.Models.destinationTest.PropertySource item);

        public async Task<Destination.Models.destinationTest.PropertySource> UpdatePropertySource(int id, Destination.Models.destinationTest.PropertySource propertysource)
        {
            OnPropertySourceUpdated(propertysource);

            var itemToUpdate = Context.PropertySources
                              .Where(i => i.Id == propertysource.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertysource);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertySourceUpdated(propertysource);

            return propertysource;
        }

        partial void OnPropertySourceDeleted(Destination.Models.destinationTest.PropertySource item);
        partial void OnAfterPropertySourceDeleted(Destination.Models.destinationTest.PropertySource item);

        public async Task<Destination.Models.destinationTest.PropertySource> DeletePropertySource(int id)
        {
            var itemToDelete = Context.PropertySources
                              .Where(i => i.Id == id)
                              .Include(i => i.Bookings)
                              .Include(i => i.FilterDataForBulkSmsMails)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertySourceDeleted(itemToDelete);


            Context.PropertySources.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertySourceDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyTypesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertytypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertytypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyTypesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertytypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertytypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyTypesRead(ref IQueryable<Destination.Models.destinationTest.PropertyType> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyType>> GetPropertyTypes(Query query = null)
        {
            var items = Context.PropertyTypes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyTypesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyTypeGet(Destination.Models.destinationTest.PropertyType item);
        partial void OnGetPropertyTypeByTypeid(ref IQueryable<Destination.Models.destinationTest.PropertyType> items);


        public async Task<Destination.Models.destinationTest.PropertyType> GetPropertyTypeByTypeid(int typeid)
        {
            var items = Context.PropertyTypes
                              .AsNoTracking()
                              .Where(i => i.Typeid == typeid);

 
            OnGetPropertyTypeByTypeid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyTypeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyTypeCreated(Destination.Models.destinationTest.PropertyType item);
        partial void OnAfterPropertyTypeCreated(Destination.Models.destinationTest.PropertyType item);

        public async Task<Destination.Models.destinationTest.PropertyType> CreatePropertyType(Destination.Models.destinationTest.PropertyType propertytype)
        {
            OnPropertyTypeCreated(propertytype);

            var existingItem = Context.PropertyTypes
                              .Where(i => i.Typeid == propertytype.Typeid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyTypes.Add(propertytype);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertytype).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyTypeCreated(propertytype);

            return propertytype;
        }

        public async Task<Destination.Models.destinationTest.PropertyType> CancelPropertyTypeChanges(Destination.Models.destinationTest.PropertyType item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyTypeUpdated(Destination.Models.destinationTest.PropertyType item);
        partial void OnAfterPropertyTypeUpdated(Destination.Models.destinationTest.PropertyType item);

        public async Task<Destination.Models.destinationTest.PropertyType> UpdatePropertyType(int typeid, Destination.Models.destinationTest.PropertyType propertytype)
        {
            OnPropertyTypeUpdated(propertytype);

            var itemToUpdate = Context.PropertyTypes
                              .Where(i => i.Typeid == propertytype.Typeid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertytype);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyTypeUpdated(propertytype);

            return propertytype;
        }

        partial void OnPropertyTypeDeleted(Destination.Models.destinationTest.PropertyType item);
        partial void OnAfterPropertyTypeDeleted(Destination.Models.destinationTest.PropertyType item);

        public async Task<Destination.Models.destinationTest.PropertyType> DeletePropertyType(int typeid)
        {
            var itemToDelete = Context.PropertyTypes
                              .Where(i => i.Typeid == typeid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyTypeDeleted(itemToDelete);


            Context.PropertyTypes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyTypeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyWarningsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertywarnings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertywarnings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyWarningsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertywarnings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertywarnings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyWarningsRead(ref IQueryable<Destination.Models.destinationTest.PropertyWarning> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyWarning>> GetPropertyWarnings(Query query = null)
        {
            var items = Context.PropertyWarnings.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyWarningsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyWarningGet(Destination.Models.destinationTest.PropertyWarning item);
        partial void OnGetPropertyWarningById(ref IQueryable<Destination.Models.destinationTest.PropertyWarning> items);


        public async Task<Destination.Models.destinationTest.PropertyWarning> GetPropertyWarningById(int id)
        {
            var items = Context.PropertyWarnings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPropertyWarningById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyWarningGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyWarningCreated(Destination.Models.destinationTest.PropertyWarning item);
        partial void OnAfterPropertyWarningCreated(Destination.Models.destinationTest.PropertyWarning item);

        public async Task<Destination.Models.destinationTest.PropertyWarning> CreatePropertyWarning(Destination.Models.destinationTest.PropertyWarning propertywarning)
        {
            OnPropertyWarningCreated(propertywarning);

            var existingItem = Context.PropertyWarnings
                              .Where(i => i.Id == propertywarning.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyWarnings.Add(propertywarning);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertywarning).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyWarningCreated(propertywarning);

            return propertywarning;
        }

        public async Task<Destination.Models.destinationTest.PropertyWarning> CancelPropertyWarningChanges(Destination.Models.destinationTest.PropertyWarning item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyWarningUpdated(Destination.Models.destinationTest.PropertyWarning item);
        partial void OnAfterPropertyWarningUpdated(Destination.Models.destinationTest.PropertyWarning item);

        public async Task<Destination.Models.destinationTest.PropertyWarning> UpdatePropertyWarning(int id, Destination.Models.destinationTest.PropertyWarning propertywarning)
        {
            OnPropertyWarningUpdated(propertywarning);

            var itemToUpdate = Context.PropertyWarnings
                              .Where(i => i.Id == propertywarning.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertywarning);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyWarningUpdated(propertywarning);

            return propertywarning;
        }

        partial void OnPropertyWarningDeleted(Destination.Models.destinationTest.PropertyWarning item);
        partial void OnAfterPropertyWarningDeleted(Destination.Models.destinationTest.PropertyWarning item);

        public async Task<Destination.Models.destinationTest.PropertyWarning> DeletePropertyWarning(int id)
        {
            var itemToDelete = Context.PropertyWarnings
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyWarningDeleted(itemToDelete);


            Context.PropertyWarnings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyWarningDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyAnnualLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyannuallogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyannuallogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyAnnualLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyannuallogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyannuallogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyAnnualLogsRead(ref IQueryable<Destination.Models.destinationTest.PropertyAnnualLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyAnnualLog>> GetPropertyAnnualLogs(Query query = null)
        {
            var items = Context.PropertyAnnualLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyAnnualLogsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyBackToBackBookingsRestrictsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertybacktobackbookingsrestricts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertybacktobackbookingsrestricts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyBackToBackBookingsRestrictsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertybacktobackbookingsrestricts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertybacktobackbookingsrestricts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyBackToBackBookingsRestrictsRead(ref IQueryable<Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict>> GetPropertyBackToBackBookingsRestricts(Query query = null)
        {
            var items = Context.PropertyBackToBackBookingsRestricts.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyBackToBackBookingsRestrictsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyBackToBackBookingsRestrictGet(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict item);
        partial void OnGetPropertyBackToBackBookingsRestrictById(ref IQueryable<Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict> items);


        public async Task<Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict> GetPropertyBackToBackBookingsRestrictById(int id)
        {
            var items = Context.PropertyBackToBackBookingsRestricts
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPropertyBackToBackBookingsRestrictById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyBackToBackBookingsRestrictGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyBackToBackBookingsRestrictCreated(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict item);
        partial void OnAfterPropertyBackToBackBookingsRestrictCreated(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict item);

        public async Task<Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict> CreatePropertyBackToBackBookingsRestrict(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict propertybacktobackbookingsrestrict)
        {
            OnPropertyBackToBackBookingsRestrictCreated(propertybacktobackbookingsrestrict);

            var existingItem = Context.PropertyBackToBackBookingsRestricts
                              .Where(i => i.Id == propertybacktobackbookingsrestrict.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyBackToBackBookingsRestricts.Add(propertybacktobackbookingsrestrict);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertybacktobackbookingsrestrict).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyBackToBackBookingsRestrictCreated(propertybacktobackbookingsrestrict);

            return propertybacktobackbookingsrestrict;
        }

        public async Task<Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict> CancelPropertyBackToBackBookingsRestrictChanges(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyBackToBackBookingsRestrictUpdated(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict item);
        partial void OnAfterPropertyBackToBackBookingsRestrictUpdated(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict item);

        public async Task<Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict> UpdatePropertyBackToBackBookingsRestrict(int id, Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict propertybacktobackbookingsrestrict)
        {
            OnPropertyBackToBackBookingsRestrictUpdated(propertybacktobackbookingsrestrict);

            var itemToUpdate = Context.PropertyBackToBackBookingsRestricts
                              .Where(i => i.Id == propertybacktobackbookingsrestrict.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertybacktobackbookingsrestrict);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyBackToBackBookingsRestrictUpdated(propertybacktobackbookingsrestrict);

            return propertybacktobackbookingsrestrict;
        }

        partial void OnPropertyBackToBackBookingsRestrictDeleted(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict item);
        partial void OnAfterPropertyBackToBackBookingsRestrictDeleted(Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict item);

        public async Task<Destination.Models.destinationTest.PropertyBackToBackBookingsRestrict> DeletePropertyBackToBackBookingsRestrict(int id)
        {
            var itemToDelete = Context.PropertyBackToBackBookingsRestricts
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyBackToBackBookingsRestrictDeleted(itemToDelete);


            Context.PropertyBackToBackBookingsRestricts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyBackToBackBookingsRestrictDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertycontenttypesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertycontenttypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertycontenttypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertycontenttypesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertycontenttypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertycontenttypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertycontenttypesRead(ref IQueryable<Destination.Models.destinationTest.Propertycontenttype> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Propertycontenttype>> GetPropertycontenttypes(Query query = null)
        {
            var items = Context.Propertycontenttypes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertycontenttypesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertycontenttypeGet(Destination.Models.destinationTest.Propertycontenttype item);
        partial void OnGetPropertycontenttypeByPropconttypeid(ref IQueryable<Destination.Models.destinationTest.Propertycontenttype> items);


        public async Task<Destination.Models.destinationTest.Propertycontenttype> GetPropertycontenttypeByPropconttypeid(int propconttypeid)
        {
            var items = Context.Propertycontenttypes
                              .AsNoTracking()
                              .Where(i => i.Propconttypeid == propconttypeid);

 
            OnGetPropertycontenttypeByPropconttypeid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertycontenttypeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertycontenttypeCreated(Destination.Models.destinationTest.Propertycontenttype item);
        partial void OnAfterPropertycontenttypeCreated(Destination.Models.destinationTest.Propertycontenttype item);

        public async Task<Destination.Models.destinationTest.Propertycontenttype> CreatePropertycontenttype(Destination.Models.destinationTest.Propertycontenttype propertycontenttype)
        {
            OnPropertycontenttypeCreated(propertycontenttype);

            var existingItem = Context.Propertycontenttypes
                              .Where(i => i.Propconttypeid == propertycontenttype.Propconttypeid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Propertycontenttypes.Add(propertycontenttype);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertycontenttype).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertycontenttypeCreated(propertycontenttype);

            return propertycontenttype;
        }

        public async Task<Destination.Models.destinationTest.Propertycontenttype> CancelPropertycontenttypeChanges(Destination.Models.destinationTest.Propertycontenttype item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertycontenttypeUpdated(Destination.Models.destinationTest.Propertycontenttype item);
        partial void OnAfterPropertycontenttypeUpdated(Destination.Models.destinationTest.Propertycontenttype item);

        public async Task<Destination.Models.destinationTest.Propertycontenttype> UpdatePropertycontenttype(int propconttypeid, Destination.Models.destinationTest.Propertycontenttype propertycontenttype)
        {
            OnPropertycontenttypeUpdated(propertycontenttype);

            var itemToUpdate = Context.Propertycontenttypes
                              .Where(i => i.Propconttypeid == propertycontenttype.Propconttypeid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertycontenttype);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertycontenttypeUpdated(propertycontenttype);

            return propertycontenttype;
        }

        partial void OnPropertycontenttypeDeleted(Destination.Models.destinationTest.Propertycontenttype item);
        partial void OnAfterPropertycontenttypeDeleted(Destination.Models.destinationTest.Propertycontenttype item);

        public async Task<Destination.Models.destinationTest.Propertycontenttype> DeletePropertycontenttype(int propconttypeid)
        {
            var itemToDelete = Context.Propertycontenttypes
                              .Where(i => i.Propconttypeid == propconttypeid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertycontenttypeDeleted(itemToDelete);


            Context.Propertycontenttypes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertycontenttypeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyDepositsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertydeposits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertydeposits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyDepositsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertydeposits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertydeposits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyDepositsRead(ref IQueryable<Destination.Models.destinationTest.PropertyDeposit> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyDeposit>> GetPropertyDeposits(Query query = null)
        {
            var items = Context.PropertyDeposits.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyDepositsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyDepositGet(Destination.Models.destinationTest.PropertyDeposit item);
        partial void OnGetPropertyDepositById(ref IQueryable<Destination.Models.destinationTest.PropertyDeposit> items);


        public async Task<Destination.Models.destinationTest.PropertyDeposit> GetPropertyDepositById(int id)
        {
            var items = Context.PropertyDeposits
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyDepositById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyDepositGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyDepositCreated(Destination.Models.destinationTest.PropertyDeposit item);
        partial void OnAfterPropertyDepositCreated(Destination.Models.destinationTest.PropertyDeposit item);

        public async Task<Destination.Models.destinationTest.PropertyDeposit> CreatePropertyDeposit(Destination.Models.destinationTest.PropertyDeposit propertydeposit)
        {
            OnPropertyDepositCreated(propertydeposit);

            var existingItem = Context.PropertyDeposits
                              .Where(i => i.Id == propertydeposit.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyDeposits.Add(propertydeposit);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertydeposit).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyDepositCreated(propertydeposit);

            return propertydeposit;
        }

        public async Task<Destination.Models.destinationTest.PropertyDeposit> CancelPropertyDepositChanges(Destination.Models.destinationTest.PropertyDeposit item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyDepositUpdated(Destination.Models.destinationTest.PropertyDeposit item);
        partial void OnAfterPropertyDepositUpdated(Destination.Models.destinationTest.PropertyDeposit item);

        public async Task<Destination.Models.destinationTest.PropertyDeposit> UpdatePropertyDeposit(int id, Destination.Models.destinationTest.PropertyDeposit propertydeposit)
        {
            OnPropertyDepositUpdated(propertydeposit);

            var itemToUpdate = Context.PropertyDeposits
                              .Where(i => i.Id == propertydeposit.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertydeposit);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyDepositUpdated(propertydeposit);

            return propertydeposit;
        }

        partial void OnPropertyDepositDeleted(Destination.Models.destinationTest.PropertyDeposit item);
        partial void OnAfterPropertyDepositDeleted(Destination.Models.destinationTest.PropertyDeposit item);

        public async Task<Destination.Models.destinationTest.PropertyDeposit> DeletePropertyDeposit(int id)
        {
            var itemToDelete = Context.PropertyDeposits
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyDepositDeleted(itemToDelete);


            Context.PropertyDeposits.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyDepositDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyFulltimesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyfulltimes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyfulltimes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyFulltimesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyfulltimes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyfulltimes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyFulltimesRead(ref IQueryable<Destination.Models.destinationTest.PropertyFulltime> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyFulltime>> GetPropertyFulltimes(Query query = null)
        {
            var items = Context.PropertyFulltimes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyFulltimesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyInsurancesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyinsurances/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyinsurances/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyInsurancesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyinsurances/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyinsurances/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyInsurancesRead(ref IQueryable<Destination.Models.destinationTest.PropertyInsurance> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyInsurance>> GetPropertyInsurances(Query query = null)
        {
            var items = Context.PropertyInsurances.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyInsurancesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyInsuranceCitiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyinsurancecities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyinsurancecities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyInsuranceCitiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyinsurancecities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyinsurancecities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyInsuranceCitiesRead(ref IQueryable<Destination.Models.destinationTest.PropertyInsuranceCity> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyInsuranceCity>> GetPropertyInsuranceCities(Query query = null)
        {
            var items = Context.PropertyInsuranceCities.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyInsuranceCitiesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyInsuranceCountiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyinsurancecounties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyinsurancecounties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyInsuranceCountiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyinsurancecounties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyinsurancecounties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyInsuranceCountiesRead(ref IQueryable<Destination.Models.destinationTest.PropertyInsuranceCounty> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyInsuranceCounty>> GetPropertyInsuranceCounties(Query query = null)
        {
            var items = Context.PropertyInsuranceCounties.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyInsuranceCountiesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyRatesDailiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesdailies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesdailies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesDailiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesdailies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesdailies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesDailiesRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesDaily> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesDaily>> GetPropertyRatesDailies(Query query = null)
        {
            var items = Context.PropertyRatesDailies.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesDailiesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRatesDailyGet(Destination.Models.destinationTest.PropertyRatesDaily item);
        partial void OnGetPropertyRatesDailyById(ref IQueryable<Destination.Models.destinationTest.PropertyRatesDaily> items);


        public async Task<Destination.Models.destinationTest.PropertyRatesDaily> GetPropertyRatesDailyById(int id)
        {
            var items = Context.PropertyRatesDailies
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPropertyRatesDailyById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRatesDailyGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRatesDailyCreated(Destination.Models.destinationTest.PropertyRatesDaily item);
        partial void OnAfterPropertyRatesDailyCreated(Destination.Models.destinationTest.PropertyRatesDaily item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDaily> CreatePropertyRatesDaily(Destination.Models.destinationTest.PropertyRatesDaily propertyratesdaily)
        {
            OnPropertyRatesDailyCreated(propertyratesdaily);

            var existingItem = Context.PropertyRatesDailies
                              .Where(i => i.Id == propertyratesdaily.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRatesDailies.Add(propertyratesdaily);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyratesdaily).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRatesDailyCreated(propertyratesdaily);

            return propertyratesdaily;
        }

        public async Task<Destination.Models.destinationTest.PropertyRatesDaily> CancelPropertyRatesDailyChanges(Destination.Models.destinationTest.PropertyRatesDaily item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRatesDailyUpdated(Destination.Models.destinationTest.PropertyRatesDaily item);
        partial void OnAfterPropertyRatesDailyUpdated(Destination.Models.destinationTest.PropertyRatesDaily item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDaily> UpdatePropertyRatesDaily(int id, Destination.Models.destinationTest.PropertyRatesDaily propertyratesdaily)
        {
            OnPropertyRatesDailyUpdated(propertyratesdaily);

            var itemToUpdate = Context.PropertyRatesDailies
                              .Where(i => i.Id == propertyratesdaily.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyratesdaily);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRatesDailyUpdated(propertyratesdaily);

            return propertyratesdaily;
        }

        partial void OnPropertyRatesDailyDeleted(Destination.Models.destinationTest.PropertyRatesDaily item);
        partial void OnAfterPropertyRatesDailyDeleted(Destination.Models.destinationTest.PropertyRatesDaily item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDaily> DeletePropertyRatesDaily(int id)
        {
            var itemToDelete = Context.PropertyRatesDailies
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRatesDailyDeleted(itemToDelete);


            Context.PropertyRatesDailies.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRatesDailyDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyRatesDailySinglePropsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesdailysingleprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesdailysingleprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesDailySinglePropsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesdailysingleprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesdailysingleprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesDailySinglePropsRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesDailySingleProp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesDailySingleProp>> GetPropertyRatesDailySingleProps(Query query = null)
        {
            var items = Context.PropertyRatesDailySingleProps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesDailySinglePropsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportPropertyRatesDailyTempsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesdailytemps/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesdailytemps/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesDailyTempsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesdailytemps/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesdailytemps/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesDailyTempsRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesDailyTemp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesDailyTemp>> GetPropertyRatesDailyTemps(Query query = null)
        {
            var items = Context.PropertyRatesDailyTemps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesDailyTempsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRatesDailyTempGet(Destination.Models.destinationTest.PropertyRatesDailyTemp item);
        partial void OnGetPropertyRatesDailyTempById(ref IQueryable<Destination.Models.destinationTest.PropertyRatesDailyTemp> items);


        public async Task<Destination.Models.destinationTest.PropertyRatesDailyTemp> GetPropertyRatesDailyTempById(int id)
        {
            var items = Context.PropertyRatesDailyTemps
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyRatesDailyTempById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRatesDailyTempGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRatesDailyTempCreated(Destination.Models.destinationTest.PropertyRatesDailyTemp item);
        partial void OnAfterPropertyRatesDailyTempCreated(Destination.Models.destinationTest.PropertyRatesDailyTemp item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDailyTemp> CreatePropertyRatesDailyTemp(Destination.Models.destinationTest.PropertyRatesDailyTemp propertyratesdailytemp)
        {
            OnPropertyRatesDailyTempCreated(propertyratesdailytemp);

            var existingItem = Context.PropertyRatesDailyTemps
                              .Where(i => i.Id == propertyratesdailytemp.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRatesDailyTemps.Add(propertyratesdailytemp);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyratesdailytemp).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRatesDailyTempCreated(propertyratesdailytemp);

            return propertyratesdailytemp;
        }

        public async Task<Destination.Models.destinationTest.PropertyRatesDailyTemp> CancelPropertyRatesDailyTempChanges(Destination.Models.destinationTest.PropertyRatesDailyTemp item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRatesDailyTempUpdated(Destination.Models.destinationTest.PropertyRatesDailyTemp item);
        partial void OnAfterPropertyRatesDailyTempUpdated(Destination.Models.destinationTest.PropertyRatesDailyTemp item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDailyTemp> UpdatePropertyRatesDailyTemp(int id, Destination.Models.destinationTest.PropertyRatesDailyTemp propertyratesdailytemp)
        {
            OnPropertyRatesDailyTempUpdated(propertyratesdailytemp);

            var itemToUpdate = Context.PropertyRatesDailyTemps
                              .Where(i => i.Id == propertyratesdailytemp.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyratesdailytemp);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRatesDailyTempUpdated(propertyratesdailytemp);

            return propertyratesdailytemp;
        }

        partial void OnPropertyRatesDailyTempDeleted(Destination.Models.destinationTest.PropertyRatesDailyTemp item);
        partial void OnAfterPropertyRatesDailyTempDeleted(Destination.Models.destinationTest.PropertyRatesDailyTemp item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDailyTemp> DeletePropertyRatesDailyTemp(int id)
        {
            var itemToDelete = Context.PropertyRatesDailyTemps
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRatesDailyTempDeleted(itemToDelete);


            Context.PropertyRatesDailyTemps.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRatesDailyTempDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyRatesDailyMinRatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesdailyminrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesdailyminrates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyRatesDailyMinRatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyratesdailyminrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyratesdailyminrates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyRatesDailyMinRatesRead(ref IQueryable<Destination.Models.destinationTest.PropertyRatesDailyMinRate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyRatesDailyMinRate>> GetPropertyRatesDailyMinRates(Query query = null)
        {
            var items = Context.PropertyRatesDailyMinRates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyRatesDailyMinRatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyRatesDailyMinRateGet(Destination.Models.destinationTest.PropertyRatesDailyMinRate item);
        partial void OnGetPropertyRatesDailyMinRateById(ref IQueryable<Destination.Models.destinationTest.PropertyRatesDailyMinRate> items);


        public async Task<Destination.Models.destinationTest.PropertyRatesDailyMinRate> GetPropertyRatesDailyMinRateById(int id)
        {
            var items = Context.PropertyRatesDailyMinRates
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyRatesDailyMinRateById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyRatesDailyMinRateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyRatesDailyMinRateCreated(Destination.Models.destinationTest.PropertyRatesDailyMinRate item);
        partial void OnAfterPropertyRatesDailyMinRateCreated(Destination.Models.destinationTest.PropertyRatesDailyMinRate item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDailyMinRate> CreatePropertyRatesDailyMinRate(Destination.Models.destinationTest.PropertyRatesDailyMinRate propertyratesdailyminrate)
        {
            OnPropertyRatesDailyMinRateCreated(propertyratesdailyminrate);

            var existingItem = Context.PropertyRatesDailyMinRates
                              .Where(i => i.Id == propertyratesdailyminrate.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyRatesDailyMinRates.Add(propertyratesdailyminrate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyratesdailyminrate).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyRatesDailyMinRateCreated(propertyratesdailyminrate);

            return propertyratesdailyminrate;
        }

        public async Task<Destination.Models.destinationTest.PropertyRatesDailyMinRate> CancelPropertyRatesDailyMinRateChanges(Destination.Models.destinationTest.PropertyRatesDailyMinRate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyRatesDailyMinRateUpdated(Destination.Models.destinationTest.PropertyRatesDailyMinRate item);
        partial void OnAfterPropertyRatesDailyMinRateUpdated(Destination.Models.destinationTest.PropertyRatesDailyMinRate item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDailyMinRate> UpdatePropertyRatesDailyMinRate(int id, Destination.Models.destinationTest.PropertyRatesDailyMinRate propertyratesdailyminrate)
        {
            OnPropertyRatesDailyMinRateUpdated(propertyratesdailyminrate);

            var itemToUpdate = Context.PropertyRatesDailyMinRates
                              .Where(i => i.Id == propertyratesdailyminrate.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyratesdailyminrate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyRatesDailyMinRateUpdated(propertyratesdailyminrate);

            return propertyratesdailyminrate;
        }

        partial void OnPropertyRatesDailyMinRateDeleted(Destination.Models.destinationTest.PropertyRatesDailyMinRate item);
        partial void OnAfterPropertyRatesDailyMinRateDeleted(Destination.Models.destinationTest.PropertyRatesDailyMinRate item);

        public async Task<Destination.Models.destinationTest.PropertyRatesDailyMinRate> DeletePropertyRatesDailyMinRate(int id)
        {
            var itemToDelete = Context.PropertyRatesDailyMinRates
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyRatesDailyMinRateDeleted(itemToDelete);


            Context.PropertyRatesDailyMinRates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyRatesDailyMinRateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyVisitCountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyvisitcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyvisitcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyVisitCountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertyvisitcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertyvisitcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyVisitCountsRead(ref IQueryable<Destination.Models.destinationTest.PropertyVisitCount> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyVisitCount>> GetPropertyVisitCounts(Query query = null)
        {
            var items = Context.PropertyVisitCounts.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyVisitCountsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyVisitCountGet(Destination.Models.destinationTest.PropertyVisitCount item);
        partial void OnGetPropertyVisitCountById(ref IQueryable<Destination.Models.destinationTest.PropertyVisitCount> items);


        public async Task<Destination.Models.destinationTest.PropertyVisitCount> GetPropertyVisitCountById(int id)
        {
            var items = Context.PropertyVisitCounts
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetPropertyVisitCountById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyVisitCountGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyVisitCountCreated(Destination.Models.destinationTest.PropertyVisitCount item);
        partial void OnAfterPropertyVisitCountCreated(Destination.Models.destinationTest.PropertyVisitCount item);

        public async Task<Destination.Models.destinationTest.PropertyVisitCount> CreatePropertyVisitCount(Destination.Models.destinationTest.PropertyVisitCount propertyvisitcount)
        {
            OnPropertyVisitCountCreated(propertyvisitcount);

            var existingItem = Context.PropertyVisitCounts
                              .Where(i => i.Id == propertyvisitcount.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyVisitCounts.Add(propertyvisitcount);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertyvisitcount).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyVisitCountCreated(propertyvisitcount);

            return propertyvisitcount;
        }

        public async Task<Destination.Models.destinationTest.PropertyVisitCount> CancelPropertyVisitCountChanges(Destination.Models.destinationTest.PropertyVisitCount item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyVisitCountUpdated(Destination.Models.destinationTest.PropertyVisitCount item);
        partial void OnAfterPropertyVisitCountUpdated(Destination.Models.destinationTest.PropertyVisitCount item);

        public async Task<Destination.Models.destinationTest.PropertyVisitCount> UpdatePropertyVisitCount(int id, Destination.Models.destinationTest.PropertyVisitCount propertyvisitcount)
        {
            OnPropertyVisitCountUpdated(propertyvisitcount);

            var itemToUpdate = Context.PropertyVisitCounts
                              .Where(i => i.Id == propertyvisitcount.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertyvisitcount);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyVisitCountUpdated(propertyvisitcount);

            return propertyvisitcount;
        }

        partial void OnPropertyVisitCountDeleted(Destination.Models.destinationTest.PropertyVisitCount item);
        partial void OnAfterPropertyVisitCountDeleted(Destination.Models.destinationTest.PropertyVisitCount item);

        public async Task<Destination.Models.destinationTest.PropertyVisitCount> DeletePropertyVisitCount(int id)
        {
            var itemToDelete = Context.PropertyVisitCounts
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyVisitCountDeleted(itemToDelete);


            Context.PropertyVisitCounts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyVisitCountDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropertyWatchListsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertywatchlists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertywatchlists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropertyWatchListsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propertywatchlists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propertywatchlists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropertyWatchListsRead(ref IQueryable<Destination.Models.destinationTest.PropertyWatchList> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropertyWatchList>> GetPropertyWatchLists(Query query = null)
        {
            var items = Context.PropertyWatchLists.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropertyWatchListsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropertyWatchListGet(Destination.Models.destinationTest.PropertyWatchList item);
        partial void OnGetPropertyWatchListById(ref IQueryable<Destination.Models.destinationTest.PropertyWatchList> items);


        public async Task<Destination.Models.destinationTest.PropertyWatchList> GetPropertyWatchListById(int id)
        {
            var items = Context.PropertyWatchLists
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetPropertyWatchListById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropertyWatchListGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropertyWatchListCreated(Destination.Models.destinationTest.PropertyWatchList item);
        partial void OnAfterPropertyWatchListCreated(Destination.Models.destinationTest.PropertyWatchList item);

        public async Task<Destination.Models.destinationTest.PropertyWatchList> CreatePropertyWatchList(Destination.Models.destinationTest.PropertyWatchList propertywatchlist)
        {
            OnPropertyWatchListCreated(propertywatchlist);

            var existingItem = Context.PropertyWatchLists
                              .Where(i => i.Id == propertywatchlist.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropertyWatchLists.Add(propertywatchlist);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propertywatchlist).State = EntityState.Detached;
                throw;
            }

            OnAfterPropertyWatchListCreated(propertywatchlist);

            return propertywatchlist;
        }

        public async Task<Destination.Models.destinationTest.PropertyWatchList> CancelPropertyWatchListChanges(Destination.Models.destinationTest.PropertyWatchList item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropertyWatchListUpdated(Destination.Models.destinationTest.PropertyWatchList item);
        partial void OnAfterPropertyWatchListUpdated(Destination.Models.destinationTest.PropertyWatchList item);

        public async Task<Destination.Models.destinationTest.PropertyWatchList> UpdatePropertyWatchList(int id, Destination.Models.destinationTest.PropertyWatchList propertywatchlist)
        {
            OnPropertyWatchListUpdated(propertywatchlist);

            var itemToUpdate = Context.PropertyWatchLists
                              .Where(i => i.Id == propertywatchlist.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propertywatchlist);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropertyWatchListUpdated(propertywatchlist);

            return propertywatchlist;
        }

        partial void OnPropertyWatchListDeleted(Destination.Models.destinationTest.PropertyWatchList item);
        partial void OnAfterPropertyWatchListDeleted(Destination.Models.destinationTest.PropertyWatchList item);

        public async Task<Destination.Models.destinationTest.PropertyWatchList> DeletePropertyWatchList(int id)
        {
            var itemToDelete = Context.PropertyWatchLists
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropertyWatchListDeleted(itemToDelete);


            Context.PropertyWatchLists.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropertyWatchListDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportPropExpMgrsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propexpmgrs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propexpmgrs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportPropExpMgrsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/propexpmgrs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/propexpmgrs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnPropExpMgrsRead(ref IQueryable<Destination.Models.destinationTest.PropExpMgr> items);

        public async Task<IQueryable<Destination.Models.destinationTest.PropExpMgr>> GetPropExpMgrs(Query query = null)
        {
            var items = Context.PropExpMgrs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnPropExpMgrsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnPropExpMgrGet(Destination.Models.destinationTest.PropExpMgr item);
        partial void OnGetPropExpMgrByMgrid(ref IQueryable<Destination.Models.destinationTest.PropExpMgr> items);


        public async Task<Destination.Models.destinationTest.PropExpMgr> GetPropExpMgrByMgrid(int mgrid)
        {
            var items = Context.PropExpMgrs
                              .AsNoTracking()
                              .Where(i => i.Mgrid == mgrid);

 
            OnGetPropExpMgrByMgrid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnPropExpMgrGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnPropExpMgrCreated(Destination.Models.destinationTest.PropExpMgr item);
        partial void OnAfterPropExpMgrCreated(Destination.Models.destinationTest.PropExpMgr item);

        public async Task<Destination.Models.destinationTest.PropExpMgr> CreatePropExpMgr(Destination.Models.destinationTest.PropExpMgr propexpmgr)
        {
            OnPropExpMgrCreated(propexpmgr);

            var existingItem = Context.PropExpMgrs
                              .Where(i => i.Mgrid == propexpmgr.Mgrid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.PropExpMgrs.Add(propexpmgr);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(propexpmgr).State = EntityState.Detached;
                throw;
            }

            OnAfterPropExpMgrCreated(propexpmgr);

            return propexpmgr;
        }

        public async Task<Destination.Models.destinationTest.PropExpMgr> CancelPropExpMgrChanges(Destination.Models.destinationTest.PropExpMgr item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnPropExpMgrUpdated(Destination.Models.destinationTest.PropExpMgr item);
        partial void OnAfterPropExpMgrUpdated(Destination.Models.destinationTest.PropExpMgr item);

        public async Task<Destination.Models.destinationTest.PropExpMgr> UpdatePropExpMgr(int mgrid, Destination.Models.destinationTest.PropExpMgr propexpmgr)
        {
            OnPropExpMgrUpdated(propexpmgr);

            var itemToUpdate = Context.PropExpMgrs
                              .Where(i => i.Mgrid == propexpmgr.Mgrid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(propexpmgr);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterPropExpMgrUpdated(propexpmgr);

            return propexpmgr;
        }

        partial void OnPropExpMgrDeleted(Destination.Models.destinationTest.PropExpMgr item);
        partial void OnAfterPropExpMgrDeleted(Destination.Models.destinationTest.PropExpMgr item);

        public async Task<Destination.Models.destinationTest.PropExpMgr> DeletePropExpMgr(int mgrid)
        {
            var itemToDelete = Context.PropExpMgrs
                              .Where(i => i.Mgrid == mgrid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnPropExpMgrDeleted(itemToDelete);


            Context.PropExpMgrs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterPropExpMgrDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRamQuestionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramquestions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramquestions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRamQuestionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramquestions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramquestions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRamQuestionsRead(ref IQueryable<Destination.Models.destinationTest.RamQuestion> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RamQuestion>> GetRamQuestions(Query query = null)
        {
            var items = Context.RamQuestions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRamQuestionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnRamQuestionGet(Destination.Models.destinationTest.RamQuestion item);
        partial void OnGetRamQuestionById(ref IQueryable<Destination.Models.destinationTest.RamQuestion> items);


        public async Task<Destination.Models.destinationTest.RamQuestion> GetRamQuestionById(int id)
        {
            var items = Context.RamQuestions
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetRamQuestionById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnRamQuestionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnRamQuestionCreated(Destination.Models.destinationTest.RamQuestion item);
        partial void OnAfterRamQuestionCreated(Destination.Models.destinationTest.RamQuestion item);

        public async Task<Destination.Models.destinationTest.RamQuestion> CreateRamQuestion(Destination.Models.destinationTest.RamQuestion ramquestion)
        {
            OnRamQuestionCreated(ramquestion);

            var existingItem = Context.RamQuestions
                              .Where(i => i.Id == ramquestion.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.RamQuestions.Add(ramquestion);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ramquestion).State = EntityState.Detached;
                throw;
            }

            OnAfterRamQuestionCreated(ramquestion);

            return ramquestion;
        }

        public async Task<Destination.Models.destinationTest.RamQuestion> CancelRamQuestionChanges(Destination.Models.destinationTest.RamQuestion item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnRamQuestionUpdated(Destination.Models.destinationTest.RamQuestion item);
        partial void OnAfterRamQuestionUpdated(Destination.Models.destinationTest.RamQuestion item);

        public async Task<Destination.Models.destinationTest.RamQuestion> UpdateRamQuestion(int id, Destination.Models.destinationTest.RamQuestion ramquestion)
        {
            OnRamQuestionUpdated(ramquestion);

            var itemToUpdate = Context.RamQuestions
                              .Where(i => i.Id == ramquestion.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ramquestion);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterRamQuestionUpdated(ramquestion);

            return ramquestion;
        }

        partial void OnRamQuestionDeleted(Destination.Models.destinationTest.RamQuestion item);
        partial void OnAfterRamQuestionDeleted(Destination.Models.destinationTest.RamQuestion item);

        public async Task<Destination.Models.destinationTest.RamQuestion> DeleteRamQuestion(int id)
        {
            var itemToDelete = Context.RamQuestions
                              .Where(i => i.Id == id)
                              .Include(i => i.RamTestUserResults)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnRamQuestionDeleted(itemToDelete);


            Context.RamQuestions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterRamQuestionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRamTestsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramtests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramtests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRamTestsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramtests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramtests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRamTestsRead(ref IQueryable<Destination.Models.destinationTest.RamTest> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RamTest>> GetRamTests(Query query = null)
        {
            var items = Context.RamTests.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRamTestsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnRamTestGet(Destination.Models.destinationTest.RamTest item);
        partial void OnGetRamTestByTestId(ref IQueryable<Destination.Models.destinationTest.RamTest> items);


        public async Task<Destination.Models.destinationTest.RamTest> GetRamTestByTestId(int testid)
        {
            var items = Context.RamTests
                              .AsNoTracking()
                              .Where(i => i.TestId == testid);

 
            OnGetRamTestByTestId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnRamTestGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnRamTestCreated(Destination.Models.destinationTest.RamTest item);
        partial void OnAfterRamTestCreated(Destination.Models.destinationTest.RamTest item);

        public async Task<Destination.Models.destinationTest.RamTest> CreateRamTest(Destination.Models.destinationTest.RamTest ramtest)
        {
            OnRamTestCreated(ramtest);

            var existingItem = Context.RamTests
                              .Where(i => i.TestId == ramtest.TestId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.RamTests.Add(ramtest);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ramtest).State = EntityState.Detached;
                throw;
            }

            OnAfterRamTestCreated(ramtest);

            return ramtest;
        }

        public async Task<Destination.Models.destinationTest.RamTest> CancelRamTestChanges(Destination.Models.destinationTest.RamTest item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnRamTestUpdated(Destination.Models.destinationTest.RamTest item);
        partial void OnAfterRamTestUpdated(Destination.Models.destinationTest.RamTest item);

        public async Task<Destination.Models.destinationTest.RamTest> UpdateRamTest(int testid, Destination.Models.destinationTest.RamTest ramtest)
        {
            OnRamTestUpdated(ramtest);

            var itemToUpdate = Context.RamTests
                              .Where(i => i.TestId == ramtest.TestId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ramtest);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterRamTestUpdated(ramtest);

            return ramtest;
        }

        partial void OnRamTestDeleted(Destination.Models.destinationTest.RamTest item);
        partial void OnAfterRamTestDeleted(Destination.Models.destinationTest.RamTest item);

        public async Task<Destination.Models.destinationTest.RamTest> DeleteRamTest(int testid)
        {
            var itemToDelete = Context.RamTests
                              .Where(i => i.TestId == testid)
                              .Include(i => i.RamTestUsers)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnRamTestDeleted(itemToDelete);


            Context.RamTests.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterRamTestDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRamTestResultsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramtestresults/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramtestresults/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRamTestResultsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramtestresults/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramtestresults/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRamTestResultsRead(ref IQueryable<Destination.Models.destinationTest.RamTestResult> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RamTestResult>> GetRamTestResults(Query query = null)
        {
            var items = Context.RamTestResults.AsQueryable();

            items = items.Include(i => i.RamTestUser);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRamTestResultsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnRamTestResultGet(Destination.Models.destinationTest.RamTestResult item);
        partial void OnGetRamTestResultById(ref IQueryable<Destination.Models.destinationTest.RamTestResult> items);


        public async Task<Destination.Models.destinationTest.RamTestResult> GetRamTestResultById(int id)
        {
            var items = Context.RamTestResults
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.RamTestUser);
 
            OnGetRamTestResultById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnRamTestResultGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnRamTestResultCreated(Destination.Models.destinationTest.RamTestResult item);
        partial void OnAfterRamTestResultCreated(Destination.Models.destinationTest.RamTestResult item);

        public async Task<Destination.Models.destinationTest.RamTestResult> CreateRamTestResult(Destination.Models.destinationTest.RamTestResult ramtestresult)
        {
            OnRamTestResultCreated(ramtestresult);

            var existingItem = Context.RamTestResults
                              .Where(i => i.Id == ramtestresult.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.RamTestResults.Add(ramtestresult);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ramtestresult).State = EntityState.Detached;
                throw;
            }

            OnAfterRamTestResultCreated(ramtestresult);

            return ramtestresult;
        }

        public async Task<Destination.Models.destinationTest.RamTestResult> CancelRamTestResultChanges(Destination.Models.destinationTest.RamTestResult item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnRamTestResultUpdated(Destination.Models.destinationTest.RamTestResult item);
        partial void OnAfterRamTestResultUpdated(Destination.Models.destinationTest.RamTestResult item);

        public async Task<Destination.Models.destinationTest.RamTestResult> UpdateRamTestResult(int id, Destination.Models.destinationTest.RamTestResult ramtestresult)
        {
            OnRamTestResultUpdated(ramtestresult);

            var itemToUpdate = Context.RamTestResults
                              .Where(i => i.Id == ramtestresult.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ramtestresult);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterRamTestResultUpdated(ramtestresult);

            return ramtestresult;
        }

        partial void OnRamTestResultDeleted(Destination.Models.destinationTest.RamTestResult item);
        partial void OnAfterRamTestResultDeleted(Destination.Models.destinationTest.RamTestResult item);

        public async Task<Destination.Models.destinationTest.RamTestResult> DeleteRamTestResult(int id)
        {
            var itemToDelete = Context.RamTestResults
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnRamTestResultDeleted(itemToDelete);


            Context.RamTestResults.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterRamTestResultDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRamTestUserResultsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramtestuserresults/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramtestuserresults/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRamTestUserResultsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramtestuserresults/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramtestuserresults/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRamTestUserResultsRead(ref IQueryable<Destination.Models.destinationTest.RamTestUserResult> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RamTestUserResult>> GetRamTestUserResults(Query query = null)
        {
            var items = Context.RamTestUserResults.AsQueryable();

            items = items.Include(i => i.RamQuestion);
            items = items.Include(i => i.RamTestUser);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRamTestUserResultsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnRamTestUserResultGet(Destination.Models.destinationTest.RamTestUserResult item);
        partial void OnGetRamTestUserResultById(ref IQueryable<Destination.Models.destinationTest.RamTestUserResult> items);


        public async Task<Destination.Models.destinationTest.RamTestUserResult> GetRamTestUserResultById(int id)
        {
            var items = Context.RamTestUserResults
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.RamQuestion);
            items = items.Include(i => i.RamTestUser);
 
            OnGetRamTestUserResultById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnRamTestUserResultGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnRamTestUserResultCreated(Destination.Models.destinationTest.RamTestUserResult item);
        partial void OnAfterRamTestUserResultCreated(Destination.Models.destinationTest.RamTestUserResult item);

        public async Task<Destination.Models.destinationTest.RamTestUserResult> CreateRamTestUserResult(Destination.Models.destinationTest.RamTestUserResult ramtestuserresult)
        {
            OnRamTestUserResultCreated(ramtestuserresult);

            var existingItem = Context.RamTestUserResults
                              .Where(i => i.Id == ramtestuserresult.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.RamTestUserResults.Add(ramtestuserresult);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ramtestuserresult).State = EntityState.Detached;
                throw;
            }

            OnAfterRamTestUserResultCreated(ramtestuserresult);

            return ramtestuserresult;
        }

        public async Task<Destination.Models.destinationTest.RamTestUserResult> CancelRamTestUserResultChanges(Destination.Models.destinationTest.RamTestUserResult item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnRamTestUserResultUpdated(Destination.Models.destinationTest.RamTestUserResult item);
        partial void OnAfterRamTestUserResultUpdated(Destination.Models.destinationTest.RamTestUserResult item);

        public async Task<Destination.Models.destinationTest.RamTestUserResult> UpdateRamTestUserResult(int id, Destination.Models.destinationTest.RamTestUserResult ramtestuserresult)
        {
            OnRamTestUserResultUpdated(ramtestuserresult);

            var itemToUpdate = Context.RamTestUserResults
                              .Where(i => i.Id == ramtestuserresult.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ramtestuserresult);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterRamTestUserResultUpdated(ramtestuserresult);

            return ramtestuserresult;
        }

        partial void OnRamTestUserResultDeleted(Destination.Models.destinationTest.RamTestUserResult item);
        partial void OnAfterRamTestUserResultDeleted(Destination.Models.destinationTest.RamTestUserResult item);

        public async Task<Destination.Models.destinationTest.RamTestUserResult> DeleteRamTestUserResult(int id)
        {
            var itemToDelete = Context.RamTestUserResults
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnRamTestUserResultDeleted(itemToDelete);


            Context.RamTestUserResults.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterRamTestUserResultDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRamTestUsersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramtestusers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramtestusers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRamTestUsersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ramtestusers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ramtestusers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRamTestUsersRead(ref IQueryable<Destination.Models.destinationTest.RamTestUser> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RamTestUser>> GetRamTestUsers(Query query = null)
        {
            var items = Context.RamTestUsers.AsQueryable();

            items = items.Include(i => i.RamTest);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRamTestUsersRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnRamTestUserGet(Destination.Models.destinationTest.RamTestUser item);
        partial void OnGetRamTestUserById(ref IQueryable<Destination.Models.destinationTest.RamTestUser> items);


        public async Task<Destination.Models.destinationTest.RamTestUser> GetRamTestUserById(int id)
        {
            var items = Context.RamTestUsers
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.RamTest);
 
            OnGetRamTestUserById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnRamTestUserGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnRamTestUserCreated(Destination.Models.destinationTest.RamTestUser item);
        partial void OnAfterRamTestUserCreated(Destination.Models.destinationTest.RamTestUser item);

        public async Task<Destination.Models.destinationTest.RamTestUser> CreateRamTestUser(Destination.Models.destinationTest.RamTestUser ramtestuser)
        {
            OnRamTestUserCreated(ramtestuser);

            var existingItem = Context.RamTestUsers
                              .Where(i => i.Id == ramtestuser.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.RamTestUsers.Add(ramtestuser);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ramtestuser).State = EntityState.Detached;
                throw;
            }

            OnAfterRamTestUserCreated(ramtestuser);

            return ramtestuser;
        }

        public async Task<Destination.Models.destinationTest.RamTestUser> CancelRamTestUserChanges(Destination.Models.destinationTest.RamTestUser item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnRamTestUserUpdated(Destination.Models.destinationTest.RamTestUser item);
        partial void OnAfterRamTestUserUpdated(Destination.Models.destinationTest.RamTestUser item);

        public async Task<Destination.Models.destinationTest.RamTestUser> UpdateRamTestUser(int id, Destination.Models.destinationTest.RamTestUser ramtestuser)
        {
            OnRamTestUserUpdated(ramtestuser);

            var itemToUpdate = Context.RamTestUsers
                              .Where(i => i.Id == ramtestuser.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ramtestuser);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterRamTestUserUpdated(ramtestuser);

            return ramtestuser;
        }

        partial void OnRamTestUserDeleted(Destination.Models.destinationTest.RamTestUser item);
        partial void OnAfterRamTestUserDeleted(Destination.Models.destinationTest.RamTestUser item);

        public async Task<Destination.Models.destinationTest.RamTestUser> DeleteRamTestUser(int id)
        {
            var itemToDelete = Context.RamTestUsers
                              .Where(i => i.Id == id)
                              .Include(i => i.RamTestResults)
                              .Include(i => i.RamTestUserResults)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnRamTestUserDeleted(itemToDelete);


            Context.RamTestUsers.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterRamTestUserDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRateReviewsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ratereviews/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ratereviews/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRateReviewsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ratereviews/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ratereviews/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRateReviewsRead(ref IQueryable<Destination.Models.destinationTest.RateReview> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RateReview>> GetRateReviews(Query query = null)
        {
            var items = Context.RateReviews.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRateReviewsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnRateReviewGet(Destination.Models.destinationTest.RateReview item);
        partial void OnGetRateReviewById(ref IQueryable<Destination.Models.destinationTest.RateReview> items);


        public async Task<Destination.Models.destinationTest.RateReview> GetRateReviewById(int id)
        {
            var items = Context.RateReviews
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetRateReviewById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnRateReviewGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnRateReviewCreated(Destination.Models.destinationTest.RateReview item);
        partial void OnAfterRateReviewCreated(Destination.Models.destinationTest.RateReview item);

        public async Task<Destination.Models.destinationTest.RateReview> CreateRateReview(Destination.Models.destinationTest.RateReview ratereview)
        {
            OnRateReviewCreated(ratereview);

            var existingItem = Context.RateReviews
                              .Where(i => i.Id == ratereview.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.RateReviews.Add(ratereview);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ratereview).State = EntityState.Detached;
                throw;
            }

            OnAfterRateReviewCreated(ratereview);

            return ratereview;
        }

        public async Task<Destination.Models.destinationTest.RateReview> CancelRateReviewChanges(Destination.Models.destinationTest.RateReview item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnRateReviewUpdated(Destination.Models.destinationTest.RateReview item);
        partial void OnAfterRateReviewUpdated(Destination.Models.destinationTest.RateReview item);

        public async Task<Destination.Models.destinationTest.RateReview> UpdateRateReview(int id, Destination.Models.destinationTest.RateReview ratereview)
        {
            OnRateReviewUpdated(ratereview);

            var itemToUpdate = Context.RateReviews
                              .Where(i => i.Id == ratereview.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ratereview);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterRateReviewUpdated(ratereview);

            return ratereview;
        }

        partial void OnRateReviewDeleted(Destination.Models.destinationTest.RateReview item);
        partial void OnAfterRateReviewDeleted(Destination.Models.destinationTest.RateReview item);

        public async Task<Destination.Models.destinationTest.RateReview> DeleteRateReview(int id)
        {
            var itemToDelete = Context.RateReviews
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnRateReviewDeleted(itemToDelete);


            Context.RateReviews.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterRateReviewDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRateSettingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ratesettings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ratesettings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRateSettingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ratesettings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ratesettings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRateSettingsRead(ref IQueryable<Destination.Models.destinationTest.RateSetting> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RateSetting>> GetRateSettings(Query query = null)
        {
            var items = Context.RateSettings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRateSettingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnRateSettingGet(Destination.Models.destinationTest.RateSetting item);
        partial void OnGetRateSettingByTaxRate(ref IQueryable<Destination.Models.destinationTest.RateSetting> items);


        public async Task<Destination.Models.destinationTest.RateSetting> GetRateSettingByTaxRate(double taxrate)
        {
            var items = Context.RateSettings
                              .AsNoTracking()
                              .Where(i => i.TaxRate == taxrate);

 
            OnGetRateSettingByTaxRate(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnRateSettingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnRateSettingCreated(Destination.Models.destinationTest.RateSetting item);
        partial void OnAfterRateSettingCreated(Destination.Models.destinationTest.RateSetting item);

        public async Task<Destination.Models.destinationTest.RateSetting> CreateRateSetting(Destination.Models.destinationTest.RateSetting ratesetting)
        {
            OnRateSettingCreated(ratesetting);

            var existingItem = Context.RateSettings
                              .Where(i => i.TaxRate == ratesetting.TaxRate)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.RateSettings.Add(ratesetting);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ratesetting).State = EntityState.Detached;
                throw;
            }

            OnAfterRateSettingCreated(ratesetting);

            return ratesetting;
        }

        public async Task<Destination.Models.destinationTest.RateSetting> CancelRateSettingChanges(Destination.Models.destinationTest.RateSetting item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnRateSettingUpdated(Destination.Models.destinationTest.RateSetting item);
        partial void OnAfterRateSettingUpdated(Destination.Models.destinationTest.RateSetting item);

        public async Task<Destination.Models.destinationTest.RateSetting> UpdateRateSetting(double taxrate, Destination.Models.destinationTest.RateSetting ratesetting)
        {
            OnRateSettingUpdated(ratesetting);

            var itemToUpdate = Context.RateSettings
                              .Where(i => i.TaxRate == ratesetting.TaxRate)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ratesetting);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterRateSettingUpdated(ratesetting);

            return ratesetting;
        }

        partial void OnRateSettingDeleted(Destination.Models.destinationTest.RateSetting item);
        partial void OnAfterRateSettingDeleted(Destination.Models.destinationTest.RateSetting item);

        public async Task<Destination.Models.destinationTest.RateSetting> DeleteRateSetting(double taxrate)
        {
            var itemToDelete = Context.RateSettings
                              .Where(i => i.TaxRate == taxrate)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnRateSettingDeleted(itemToDelete);


            Context.RateSettings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterRateSettingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRatesMinsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ratesmins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ratesmins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRatesMinsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/ratesmins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/ratesmins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRatesMinsRead(ref IQueryable<Destination.Models.destinationTest.RatesMin> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RatesMin>> GetRatesMins(Query query = null)
        {
            var items = Context.RatesMins.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRatesMinsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnRatesMinGet(Destination.Models.destinationTest.RatesMin item);
        partial void OnGetRatesMinById(ref IQueryable<Destination.Models.destinationTest.RatesMin> items);


        public async Task<Destination.Models.destinationTest.RatesMin> GetRatesMinById(int id)
        {
            var items = Context.RatesMins
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetRatesMinById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnRatesMinGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnRatesMinCreated(Destination.Models.destinationTest.RatesMin item);
        partial void OnAfterRatesMinCreated(Destination.Models.destinationTest.RatesMin item);

        public async Task<Destination.Models.destinationTest.RatesMin> CreateRatesMin(Destination.Models.destinationTest.RatesMin ratesmin)
        {
            OnRatesMinCreated(ratesmin);

            var existingItem = Context.RatesMins
                              .Where(i => i.Id == ratesmin.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.RatesMins.Add(ratesmin);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(ratesmin).State = EntityState.Detached;
                throw;
            }

            OnAfterRatesMinCreated(ratesmin);

            return ratesmin;
        }

        public async Task<Destination.Models.destinationTest.RatesMin> CancelRatesMinChanges(Destination.Models.destinationTest.RatesMin item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnRatesMinUpdated(Destination.Models.destinationTest.RatesMin item);
        partial void OnAfterRatesMinUpdated(Destination.Models.destinationTest.RatesMin item);

        public async Task<Destination.Models.destinationTest.RatesMin> UpdateRatesMin(int id, Destination.Models.destinationTest.RatesMin ratesmin)
        {
            OnRatesMinUpdated(ratesmin);

            var itemToUpdate = Context.RatesMins
                              .Where(i => i.Id == ratesmin.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(ratesmin);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterRatesMinUpdated(ratesmin);

            return ratesmin;
        }

        partial void OnRatesMinDeleted(Destination.Models.destinationTest.RatesMin item);
        partial void OnAfterRatesMinDeleted(Destination.Models.destinationTest.RatesMin item);

        public async Task<Destination.Models.destinationTest.RatesMin> DeleteRatesMin(int id)
        {
            var itemToDelete = Context.RatesMins
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnRatesMinDeleted(itemToDelete);


            Context.RatesMins.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterRatesMinDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportRestrictionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/restrictions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/restrictions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRestrictionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/restrictions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/restrictions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRestrictionsRead(ref IQueryable<Destination.Models.destinationTest.Restriction> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Restriction>> GetRestrictions(Query query = null)
        {
            var items = Context.Restrictions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRestrictionsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportReviewMappingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/reviewmappings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/reviewmappings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportReviewMappingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/reviewmappings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/reviewmappings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnReviewMappingsRead(ref IQueryable<Destination.Models.destinationTest.ReviewMapping> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ReviewMapping>> GetReviewMappings(Query query = null)
        {
            var items = Context.ReviewMappings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnReviewMappingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnReviewMappingGet(Destination.Models.destinationTest.ReviewMapping item);
        partial void OnGetReviewMappingById(ref IQueryable<Destination.Models.destinationTest.ReviewMapping> items);


        public async Task<Destination.Models.destinationTest.ReviewMapping> GetReviewMappingById(int id)
        {
            var items = Context.ReviewMappings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetReviewMappingById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnReviewMappingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnReviewMappingCreated(Destination.Models.destinationTest.ReviewMapping item);
        partial void OnAfterReviewMappingCreated(Destination.Models.destinationTest.ReviewMapping item);

        public async Task<Destination.Models.destinationTest.ReviewMapping> CreateReviewMapping(Destination.Models.destinationTest.ReviewMapping reviewmapping)
        {
            OnReviewMappingCreated(reviewmapping);

            var existingItem = Context.ReviewMappings
                              .Where(i => i.Id == reviewmapping.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ReviewMappings.Add(reviewmapping);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(reviewmapping).State = EntityState.Detached;
                throw;
            }

            OnAfterReviewMappingCreated(reviewmapping);

            return reviewmapping;
        }

        public async Task<Destination.Models.destinationTest.ReviewMapping> CancelReviewMappingChanges(Destination.Models.destinationTest.ReviewMapping item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnReviewMappingUpdated(Destination.Models.destinationTest.ReviewMapping item);
        partial void OnAfterReviewMappingUpdated(Destination.Models.destinationTest.ReviewMapping item);

        public async Task<Destination.Models.destinationTest.ReviewMapping> UpdateReviewMapping(int id, Destination.Models.destinationTest.ReviewMapping reviewmapping)
        {
            OnReviewMappingUpdated(reviewmapping);

            var itemToUpdate = Context.ReviewMappings
                              .Where(i => i.Id == reviewmapping.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(reviewmapping);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterReviewMappingUpdated(reviewmapping);

            return reviewmapping;
        }

        partial void OnReviewMappingDeleted(Destination.Models.destinationTest.ReviewMapping item);
        partial void OnAfterReviewMappingDeleted(Destination.Models.destinationTest.ReviewMapping item);

        public async Task<Destination.Models.destinationTest.ReviewMapping> DeleteReviewMapping(int id)
        {
            var itemToDelete = Context.ReviewMappings
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnReviewMappingDeleted(itemToDelete);


            Context.ReviewMappings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterReviewMappingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportReviewsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/reviews/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/reviews/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportReviewsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/reviews/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/reviews/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnReviewsRead(ref IQueryable<Destination.Models.destinationTest.Review> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Review>> GetReviews(Query query = null)
        {
            var items = Context.Reviews.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnReviewsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnReviewGet(Destination.Models.destinationTest.Review item);
        partial void OnGetReviewById(ref IQueryable<Destination.Models.destinationTest.Review> items);


        public async Task<Destination.Models.destinationTest.Review> GetReviewById(int id)
        {
            var items = Context.Reviews
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetReviewById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnReviewGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnReviewCreated(Destination.Models.destinationTest.Review item);
        partial void OnAfterReviewCreated(Destination.Models.destinationTest.Review item);

        public async Task<Destination.Models.destinationTest.Review> CreateReview(Destination.Models.destinationTest.Review review)
        {
            OnReviewCreated(review);

            var existingItem = Context.Reviews
                              .Where(i => i.Id == review.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Reviews.Add(review);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(review).State = EntityState.Detached;
                throw;
            }

            OnAfterReviewCreated(review);

            return review;
        }

        public async Task<Destination.Models.destinationTest.Review> CancelReviewChanges(Destination.Models.destinationTest.Review item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnReviewUpdated(Destination.Models.destinationTest.Review item);
        partial void OnAfterReviewUpdated(Destination.Models.destinationTest.Review item);

        public async Task<Destination.Models.destinationTest.Review> UpdateReview(int id, Destination.Models.destinationTest.Review review)
        {
            OnReviewUpdated(review);

            var itemToUpdate = Context.Reviews
                              .Where(i => i.Id == review.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(review);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterReviewUpdated(review);

            return review;
        }

        partial void OnReviewDeleted(Destination.Models.destinationTest.Review item);
        partial void OnAfterReviewDeleted(Destination.Models.destinationTest.Review item);

        public async Task<Destination.Models.destinationTest.Review> DeleteReview(int id)
        {
            var itemToDelete = Context.Reviews
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnReviewDeleted(itemToDelete);


            Context.Reviews.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterReviewDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSample23SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sample23s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sample23s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSample23SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sample23s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sample23s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSample23SRead(ref IQueryable<Destination.Models.destinationTest.Sample23> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Sample23>> GetSample23S(Query query = null)
        {
            var items = Context.Sample23S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSample23SRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportSearchesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/searches/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/searches/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSearchesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/searches/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/searches/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSearchesRead(ref IQueryable<Destination.Models.destinationTest.Search> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Search>> GetSearches(Query query = null)
        {
            var items = Context.Searches.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSearchesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSearchGet(Destination.Models.destinationTest.Search item);
        partial void OnGetSearchByIntSearchId(ref IQueryable<Destination.Models.destinationTest.Search> items);


        public async Task<Destination.Models.destinationTest.Search> GetSearchByIntSearchId(int intsearchid)
        {
            var items = Context.Searches
                              .AsNoTracking()
                              .Where(i => i.IntSearchId == intsearchid);

 
            OnGetSearchByIntSearchId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSearchGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSearchCreated(Destination.Models.destinationTest.Search item);
        partial void OnAfterSearchCreated(Destination.Models.destinationTest.Search item);

        public async Task<Destination.Models.destinationTest.Search> CreateSearch(Destination.Models.destinationTest.Search search)
        {
            OnSearchCreated(search);

            var existingItem = Context.Searches
                              .Where(i => i.IntSearchId == search.IntSearchId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Searches.Add(search);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(search).State = EntityState.Detached;
                throw;
            }

            OnAfterSearchCreated(search);

            return search;
        }

        public async Task<Destination.Models.destinationTest.Search> CancelSearchChanges(Destination.Models.destinationTest.Search item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSearchUpdated(Destination.Models.destinationTest.Search item);
        partial void OnAfterSearchUpdated(Destination.Models.destinationTest.Search item);

        public async Task<Destination.Models.destinationTest.Search> UpdateSearch(int intsearchid, Destination.Models.destinationTest.Search search)
        {
            OnSearchUpdated(search);

            var itemToUpdate = Context.Searches
                              .Where(i => i.IntSearchId == search.IntSearchId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(search);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSearchUpdated(search);

            return search;
        }

        partial void OnSearchDeleted(Destination.Models.destinationTest.Search item);
        partial void OnAfterSearchDeleted(Destination.Models.destinationTest.Search item);

        public async Task<Destination.Models.destinationTest.Search> DeleteSearch(int intsearchid)
        {
            var itemToDelete = Context.Searches
                              .Where(i => i.IntSearchId == intsearchid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSearchDeleted(itemToDelete);


            Context.Searches.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSearchDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSendAirbnbCheckOutRepliesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sendairbnbcheckoutreplies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sendairbnbcheckoutreplies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSendAirbnbCheckOutRepliesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sendairbnbcheckoutreplies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sendairbnbcheckoutreplies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSendAirbnbCheckOutRepliesRead(ref IQueryable<Destination.Models.destinationTest.SendAirbnbCheckOutReply> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SendAirbnbCheckOutReply>> GetSendAirbnbCheckOutReplies(Query query = null)
        {
            var items = Context.SendAirbnbCheckOutReplies.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSendAirbnbCheckOutRepliesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportSendToEmailForNotificationPagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sendtoemailfornotificationpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sendtoemailfornotificationpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSendToEmailForNotificationPagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sendtoemailfornotificationpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sendtoemailfornotificationpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSendToEmailForNotificationPagesRead(ref IQueryable<Destination.Models.destinationTest.SendToEmailForNotificationPage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SendToEmailForNotificationPage>> GetSendToEmailForNotificationPages(Query query = null)
        {
            var items = Context.SendToEmailForNotificationPages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSendToEmailForNotificationPagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSendToEmailForNotificationPageGet(Destination.Models.destinationTest.SendToEmailForNotificationPage item);
        partial void OnGetSendToEmailForNotificationPageById(ref IQueryable<Destination.Models.destinationTest.SendToEmailForNotificationPage> items);


        public async Task<Destination.Models.destinationTest.SendToEmailForNotificationPage> GetSendToEmailForNotificationPageById(int id)
        {
            var items = Context.SendToEmailForNotificationPages
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetSendToEmailForNotificationPageById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSendToEmailForNotificationPageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSendToEmailForNotificationPageCreated(Destination.Models.destinationTest.SendToEmailForNotificationPage item);
        partial void OnAfterSendToEmailForNotificationPageCreated(Destination.Models.destinationTest.SendToEmailForNotificationPage item);

        public async Task<Destination.Models.destinationTest.SendToEmailForNotificationPage> CreateSendToEmailForNotificationPage(Destination.Models.destinationTest.SendToEmailForNotificationPage sendtoemailfornotificationpage)
        {
            OnSendToEmailForNotificationPageCreated(sendtoemailfornotificationpage);

            var existingItem = Context.SendToEmailForNotificationPages
                              .Where(i => i.Id == sendtoemailfornotificationpage.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.SendToEmailForNotificationPages.Add(sendtoemailfornotificationpage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(sendtoemailfornotificationpage).State = EntityState.Detached;
                throw;
            }

            OnAfterSendToEmailForNotificationPageCreated(sendtoemailfornotificationpage);

            return sendtoemailfornotificationpage;
        }

        public async Task<Destination.Models.destinationTest.SendToEmailForNotificationPage> CancelSendToEmailForNotificationPageChanges(Destination.Models.destinationTest.SendToEmailForNotificationPage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSendToEmailForNotificationPageUpdated(Destination.Models.destinationTest.SendToEmailForNotificationPage item);
        partial void OnAfterSendToEmailForNotificationPageUpdated(Destination.Models.destinationTest.SendToEmailForNotificationPage item);

        public async Task<Destination.Models.destinationTest.SendToEmailForNotificationPage> UpdateSendToEmailForNotificationPage(int id, Destination.Models.destinationTest.SendToEmailForNotificationPage sendtoemailfornotificationpage)
        {
            OnSendToEmailForNotificationPageUpdated(sendtoemailfornotificationpage);

            var itemToUpdate = Context.SendToEmailForNotificationPages
                              .Where(i => i.Id == sendtoemailfornotificationpage.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(sendtoemailfornotificationpage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSendToEmailForNotificationPageUpdated(sendtoemailfornotificationpage);

            return sendtoemailfornotificationpage;
        }

        partial void OnSendToEmailForNotificationPageDeleted(Destination.Models.destinationTest.SendToEmailForNotificationPage item);
        partial void OnAfterSendToEmailForNotificationPageDeleted(Destination.Models.destinationTest.SendToEmailForNotificationPage item);

        public async Task<Destination.Models.destinationTest.SendToEmailForNotificationPage> DeleteSendToEmailForNotificationPage(int id)
        {
            var itemToDelete = Context.SendToEmailForNotificationPages
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSendToEmailForNotificationPageDeleted(itemToDelete);


            Context.SendToEmailForNotificationPages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSendToEmailForNotificationPageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSendTwilioSmsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sendtwiliosms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sendtwiliosms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSendTwilioSmsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sendtwiliosms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sendtwiliosms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSendTwilioSmsRead(ref IQueryable<Destination.Models.destinationTest.SendTwilioSm> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SendTwilioSm>> GetSendTwilioSms(Query query = null)
        {
            var items = Context.SendTwilioSms.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSendTwilioSmsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSendTwilioSmGet(Destination.Models.destinationTest.SendTwilioSm item);
        partial void OnGetSendTwilioSmBySmsid(ref IQueryable<Destination.Models.destinationTest.SendTwilioSm> items);


        public async Task<Destination.Models.destinationTest.SendTwilioSm> GetSendTwilioSmBySmsid(long smsid)
        {
            var items = Context.SendTwilioSms
                              .AsNoTracking()
                              .Where(i => i.Smsid == smsid);

 
            OnGetSendTwilioSmBySmsid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSendTwilioSmGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSendTwilioSmCreated(Destination.Models.destinationTest.SendTwilioSm item);
        partial void OnAfterSendTwilioSmCreated(Destination.Models.destinationTest.SendTwilioSm item);

        public async Task<Destination.Models.destinationTest.SendTwilioSm> CreateSendTwilioSm(Destination.Models.destinationTest.SendTwilioSm sendtwiliosm)
        {
            OnSendTwilioSmCreated(sendtwiliosm);

            var existingItem = Context.SendTwilioSms
                              .Where(i => i.Smsid == sendtwiliosm.Smsid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.SendTwilioSms.Add(sendtwiliosm);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(sendtwiliosm).State = EntityState.Detached;
                throw;
            }

            OnAfterSendTwilioSmCreated(sendtwiliosm);

            return sendtwiliosm;
        }

        public async Task<Destination.Models.destinationTest.SendTwilioSm> CancelSendTwilioSmChanges(Destination.Models.destinationTest.SendTwilioSm item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSendTwilioSmUpdated(Destination.Models.destinationTest.SendTwilioSm item);
        partial void OnAfterSendTwilioSmUpdated(Destination.Models.destinationTest.SendTwilioSm item);

        public async Task<Destination.Models.destinationTest.SendTwilioSm> UpdateSendTwilioSm(long smsid, Destination.Models.destinationTest.SendTwilioSm sendtwiliosm)
        {
            OnSendTwilioSmUpdated(sendtwiliosm);

            var itemToUpdate = Context.SendTwilioSms
                              .Where(i => i.Smsid == sendtwiliosm.Smsid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(sendtwiliosm);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSendTwilioSmUpdated(sendtwiliosm);

            return sendtwiliosm;
        }

        partial void OnSendTwilioSmDeleted(Destination.Models.destinationTest.SendTwilioSm item);
        partial void OnAfterSendTwilioSmDeleted(Destination.Models.destinationTest.SendTwilioSm item);

        public async Task<Destination.Models.destinationTest.SendTwilioSm> DeleteSendTwilioSm(long smsid)
        {
            var itemToDelete = Context.SendTwilioSms
                              .Where(i => i.Smsid == smsid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSendTwilioSmDeleted(itemToDelete);


            Context.SendTwilioSms.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSendTwilioSmDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSendTwilioSmsQueuesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sendtwiliosmsqueues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sendtwiliosmsqueues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSendTwilioSmsQueuesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sendtwiliosmsqueues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sendtwiliosmsqueues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSendTwilioSmsQueuesRead(ref IQueryable<Destination.Models.destinationTest.SendTwilioSmsQueue> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SendTwilioSmsQueue>> GetSendTwilioSmsQueues(Query query = null)
        {
            var items = Context.SendTwilioSmsQueues.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSendTwilioSmsQueuesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportSettingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/settings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/settings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSettingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/settings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/settings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSettingsRead(ref IQueryable<Destination.Models.destinationTest.Setting> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Setting>> GetSettings(Query query = null)
        {
            var items = Context.Settings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSettingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSettingGet(Destination.Models.destinationTest.Setting item);
        partial void OnGetSettingById(ref IQueryable<Destination.Models.destinationTest.Setting> items);


        public async Task<Destination.Models.destinationTest.Setting> GetSettingById(int id)
        {
            var items = Context.Settings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetSettingById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSettingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSettingCreated(Destination.Models.destinationTest.Setting item);
        partial void OnAfterSettingCreated(Destination.Models.destinationTest.Setting item);

        public async Task<Destination.Models.destinationTest.Setting> CreateSetting(Destination.Models.destinationTest.Setting setting)
        {
            OnSettingCreated(setting);

            var existingItem = Context.Settings
                              .Where(i => i.Id == setting.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Settings.Add(setting);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(setting).State = EntityState.Detached;
                throw;
            }

            OnAfterSettingCreated(setting);

            return setting;
        }

        public async Task<Destination.Models.destinationTest.Setting> CancelSettingChanges(Destination.Models.destinationTest.Setting item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSettingUpdated(Destination.Models.destinationTest.Setting item);
        partial void OnAfterSettingUpdated(Destination.Models.destinationTest.Setting item);

        public async Task<Destination.Models.destinationTest.Setting> UpdateSetting(int id, Destination.Models.destinationTest.Setting setting)
        {
            OnSettingUpdated(setting);

            var itemToUpdate = Context.Settings
                              .Where(i => i.Id == setting.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(setting);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSettingUpdated(setting);

            return setting;
        }

        partial void OnSettingDeleted(Destination.Models.destinationTest.Setting item);
        partial void OnAfterSettingDeleted(Destination.Models.destinationTest.Setting item);

        public async Task<Destination.Models.destinationTest.Setting> DeleteSetting(int id)
        {
            var itemToDelete = Context.Settings
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSettingDeleted(itemToDelete);


            Context.Settings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSettingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSheet1SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sheet1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sheet1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSheet1SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sheet1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sheet1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSheet1SRead(ref IQueryable<Destination.Models.destinationTest.Sheet1> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Sheet1>> GetSheet1S(Query query = null)
        {
            var items = Context.Sheet1S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSheet1SRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportSheet2SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sheet2s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sheet2s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSheet2SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/sheet2s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/sheet2s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSheet2SRead(ref IQueryable<Destination.Models.destinationTest.Sheet2> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Sheet2>> GetSheet2S(Query query = null)
        {
            var items = Context.Sheet2S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSheet2SRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportSmsgroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smsgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smsgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSmsgroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smsgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smsgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSmsgroupsRead(ref IQueryable<Destination.Models.destinationTest.Smsgroup> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Smsgroup>> GetSmsgroups(Query query = null)
        {
            var items = Context.Smsgroups.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSmsgroupsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSmsgroupGet(Destination.Models.destinationTest.Smsgroup item);
        partial void OnGetSmsgroupByGroupId(ref IQueryable<Destination.Models.destinationTest.Smsgroup> items);


        public async Task<Destination.Models.destinationTest.Smsgroup> GetSmsgroupByGroupId(int groupid)
        {
            var items = Context.Smsgroups
                              .AsNoTracking()
                              .Where(i => i.GroupId == groupid);

 
            OnGetSmsgroupByGroupId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSmsgroupGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSmsgroupCreated(Destination.Models.destinationTest.Smsgroup item);
        partial void OnAfterSmsgroupCreated(Destination.Models.destinationTest.Smsgroup item);

        public async Task<Destination.Models.destinationTest.Smsgroup> CreateSmsgroup(Destination.Models.destinationTest.Smsgroup smsgroup)
        {
            OnSmsgroupCreated(smsgroup);

            var existingItem = Context.Smsgroups
                              .Where(i => i.GroupId == smsgroup.GroupId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Smsgroups.Add(smsgroup);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(smsgroup).State = EntityState.Detached;
                throw;
            }

            OnAfterSmsgroupCreated(smsgroup);

            return smsgroup;
        }

        public async Task<Destination.Models.destinationTest.Smsgroup> CancelSmsgroupChanges(Destination.Models.destinationTest.Smsgroup item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSmsgroupUpdated(Destination.Models.destinationTest.Smsgroup item);
        partial void OnAfterSmsgroupUpdated(Destination.Models.destinationTest.Smsgroup item);

        public async Task<Destination.Models.destinationTest.Smsgroup> UpdateSmsgroup(int groupid, Destination.Models.destinationTest.Smsgroup smsgroup)
        {
            OnSmsgroupUpdated(smsgroup);

            var itemToUpdate = Context.Smsgroups
                              .Where(i => i.GroupId == smsgroup.GroupId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(smsgroup);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSmsgroupUpdated(smsgroup);

            return smsgroup;
        }

        partial void OnSmsgroupDeleted(Destination.Models.destinationTest.Smsgroup item);
        partial void OnAfterSmsgroupDeleted(Destination.Models.destinationTest.Smsgroup item);

        public async Task<Destination.Models.destinationTest.Smsgroup> DeleteSmsgroup(int groupid)
        {
            var itemToDelete = Context.Smsgroups
                              .Where(i => i.GroupId == groupid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSmsgroupDeleted(itemToDelete);


            Context.Smsgroups.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSmsgroupDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSmsmessagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smsmessages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smsmessages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSmsmessagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smsmessages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smsmessages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSmsmessagesRead(ref IQueryable<Destination.Models.destinationTest.Smsmessage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Smsmessage>> GetSmsmessages(Query query = null)
        {
            var items = Context.Smsmessages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSmsmessagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSmsmessageGet(Destination.Models.destinationTest.Smsmessage item);
        partial void OnGetSmsmessageBySmsid(ref IQueryable<Destination.Models.destinationTest.Smsmessage> items);


        public async Task<Destination.Models.destinationTest.Smsmessage> GetSmsmessageBySmsid(int smsid)
        {
            var items = Context.Smsmessages
                              .AsNoTracking()
                              .Where(i => i.Smsid == smsid);

 
            OnGetSmsmessageBySmsid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSmsmessageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSmsmessageCreated(Destination.Models.destinationTest.Smsmessage item);
        partial void OnAfterSmsmessageCreated(Destination.Models.destinationTest.Smsmessage item);

        public async Task<Destination.Models.destinationTest.Smsmessage> CreateSmsmessage(Destination.Models.destinationTest.Smsmessage smsmessage)
        {
            OnSmsmessageCreated(smsmessage);

            var existingItem = Context.Smsmessages
                              .Where(i => i.Smsid == smsmessage.Smsid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Smsmessages.Add(smsmessage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(smsmessage).State = EntityState.Detached;
                throw;
            }

            OnAfterSmsmessageCreated(smsmessage);

            return smsmessage;
        }

        public async Task<Destination.Models.destinationTest.Smsmessage> CancelSmsmessageChanges(Destination.Models.destinationTest.Smsmessage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSmsmessageUpdated(Destination.Models.destinationTest.Smsmessage item);
        partial void OnAfterSmsmessageUpdated(Destination.Models.destinationTest.Smsmessage item);

        public async Task<Destination.Models.destinationTest.Smsmessage> UpdateSmsmessage(int smsid, Destination.Models.destinationTest.Smsmessage smsmessage)
        {
            OnSmsmessageUpdated(smsmessage);

            var itemToUpdate = Context.Smsmessages
                              .Where(i => i.Smsid == smsmessage.Smsid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(smsmessage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSmsmessageUpdated(smsmessage);

            return smsmessage;
        }

        partial void OnSmsmessageDeleted(Destination.Models.destinationTest.Smsmessage item);
        partial void OnAfterSmsmessageDeleted(Destination.Models.destinationTest.Smsmessage item);

        public async Task<Destination.Models.destinationTest.Smsmessage> DeleteSmsmessage(int smsid)
        {
            var itemToDelete = Context.Smsmessages
                              .Where(i => i.Smsid == smsid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSmsmessageDeleted(itemToDelete);


            Context.Smsmessages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSmsmessageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSmsRemoveListsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smsremovelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smsremovelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSmsRemoveListsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smsremovelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smsremovelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSmsRemoveListsRead(ref IQueryable<Destination.Models.destinationTest.SmsRemoveList> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SmsRemoveList>> GetSmsRemoveLists(Query query = null)
        {
            var items = Context.SmsRemoveLists.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSmsRemoveListsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportSmstemplateAreasToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smstemplateareas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smstemplateareas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSmstemplateAreasToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smstemplateareas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smstemplateareas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSmstemplateAreasRead(ref IQueryable<Destination.Models.destinationTest.SmstemplateArea> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SmstemplateArea>> GetSmstemplateAreas(Query query = null)
        {
            var items = Context.SmstemplateAreas.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSmstemplateAreasRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportSmstemplatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smstemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smstemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSmstemplatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/smstemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/smstemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSmstemplatesRead(ref IQueryable<Destination.Models.destinationTest.Smstemplate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Smstemplate>> GetSmstemplates(Query query = null)
        {
            var items = Context.Smstemplates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSmstemplatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSmstemplateGet(Destination.Models.destinationTest.Smstemplate item);
        partial void OnGetSmstemplateByTemplateId(ref IQueryable<Destination.Models.destinationTest.Smstemplate> items);


        public async Task<Destination.Models.destinationTest.Smstemplate> GetSmstemplateByTemplateId(int templateid)
        {
            var items = Context.Smstemplates
                              .AsNoTracking()
                              .Where(i => i.TemplateId == templateid);

 
            OnGetSmstemplateByTemplateId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSmstemplateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSmstemplateCreated(Destination.Models.destinationTest.Smstemplate item);
        partial void OnAfterSmstemplateCreated(Destination.Models.destinationTest.Smstemplate item);

        public async Task<Destination.Models.destinationTest.Smstemplate> CreateSmstemplate(Destination.Models.destinationTest.Smstemplate smstemplate)
        {
            OnSmstemplateCreated(smstemplate);

            var existingItem = Context.Smstemplates
                              .Where(i => i.TemplateId == smstemplate.TemplateId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Smstemplates.Add(smstemplate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(smstemplate).State = EntityState.Detached;
                throw;
            }

            OnAfterSmstemplateCreated(smstemplate);

            return smstemplate;
        }

        public async Task<Destination.Models.destinationTest.Smstemplate> CancelSmstemplateChanges(Destination.Models.destinationTest.Smstemplate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSmstemplateUpdated(Destination.Models.destinationTest.Smstemplate item);
        partial void OnAfterSmstemplateUpdated(Destination.Models.destinationTest.Smstemplate item);

        public async Task<Destination.Models.destinationTest.Smstemplate> UpdateSmstemplate(int templateid, Destination.Models.destinationTest.Smstemplate smstemplate)
        {
            OnSmstemplateUpdated(smstemplate);

            var itemToUpdate = Context.Smstemplates
                              .Where(i => i.TemplateId == smstemplate.TemplateId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(smstemplate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSmstemplateUpdated(smstemplate);

            return smstemplate;
        }

        partial void OnSmstemplateDeleted(Destination.Models.destinationTest.Smstemplate item);
        partial void OnAfterSmstemplateDeleted(Destination.Models.destinationTest.Smstemplate item);

        public async Task<Destination.Models.destinationTest.Smstemplate> DeleteSmstemplate(int templateid)
        {
            var itemToDelete = Context.Smstemplates
                              .Where(i => i.TemplateId == templateid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSmstemplateDeleted(itemToDelete);


            Context.Smstemplates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSmstemplateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSnowRemovalsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/snowremovals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/snowremovals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSnowRemovalsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/snowremovals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/snowremovals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSnowRemovalsRead(ref IQueryable<Destination.Models.destinationTest.SnowRemoval> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SnowRemoval>> GetSnowRemovals(Query query = null)
        {
            var items = Context.SnowRemovals.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSnowRemovalsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportSpaTransactionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/spatransactions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/spatransactions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSpaTransactionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/spatransactions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/spatransactions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSpaTransactionsRead(ref IQueryable<Destination.Models.destinationTest.SpaTransaction> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SpaTransaction>> GetSpaTransactions(Query query = null)
        {
            var items = Context.SpaTransactions.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSpaTransactionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSpaTransactionGet(Destination.Models.destinationTest.SpaTransaction item);
        partial void OnGetSpaTransactionById(ref IQueryable<Destination.Models.destinationTest.SpaTransaction> items);


        public async Task<Destination.Models.destinationTest.SpaTransaction> GetSpaTransactionById(int id)
        {
            var items = Context.SpaTransactions
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetSpaTransactionById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSpaTransactionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSpaTransactionCreated(Destination.Models.destinationTest.SpaTransaction item);
        partial void OnAfterSpaTransactionCreated(Destination.Models.destinationTest.SpaTransaction item);

        public async Task<Destination.Models.destinationTest.SpaTransaction> CreateSpaTransaction(Destination.Models.destinationTest.SpaTransaction spatransaction)
        {
            OnSpaTransactionCreated(spatransaction);

            var existingItem = Context.SpaTransactions
                              .Where(i => i.Id == spatransaction.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.SpaTransactions.Add(spatransaction);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(spatransaction).State = EntityState.Detached;
                throw;
            }

            OnAfterSpaTransactionCreated(spatransaction);

            return spatransaction;
        }

        public async Task<Destination.Models.destinationTest.SpaTransaction> CancelSpaTransactionChanges(Destination.Models.destinationTest.SpaTransaction item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSpaTransactionUpdated(Destination.Models.destinationTest.SpaTransaction item);
        partial void OnAfterSpaTransactionUpdated(Destination.Models.destinationTest.SpaTransaction item);

        public async Task<Destination.Models.destinationTest.SpaTransaction> UpdateSpaTransaction(int id, Destination.Models.destinationTest.SpaTransaction spatransaction)
        {
            OnSpaTransactionUpdated(spatransaction);

            var itemToUpdate = Context.SpaTransactions
                              .Where(i => i.Id == spatransaction.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(spatransaction);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSpaTransactionUpdated(spatransaction);

            return spatransaction;
        }

        partial void OnSpaTransactionDeleted(Destination.Models.destinationTest.SpaTransaction item);
        partial void OnAfterSpaTransactionDeleted(Destination.Models.destinationTest.SpaTransaction item);

        public async Task<Destination.Models.destinationTest.SpaTransaction> DeleteSpaTransaction(int id)
        {
            var itemToDelete = Context.SpaTransactions
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSpaTransactionDeleted(itemToDelete);


            Context.SpaTransactions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSpaTransactionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportStatusesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/statuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/statuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportStatusesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/statuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/statuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnStatusesRead(ref IQueryable<Destination.Models.destinationTest.Status> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Status>> GetStatuses(Query query = null)
        {
            var items = Context.Statuses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnStatusesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnStatusGet(Destination.Models.destinationTest.Status item);
        partial void OnGetStatusByStatusid(ref IQueryable<Destination.Models.destinationTest.Status> items);


        public async Task<Destination.Models.destinationTest.Status> GetStatusByStatusid(int statusid)
        {
            var items = Context.Statuses
                              .AsNoTracking()
                              .Where(i => i.Statusid == statusid);

 
            OnGetStatusByStatusid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnStatusGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnStatusCreated(Destination.Models.destinationTest.Status item);
        partial void OnAfterStatusCreated(Destination.Models.destinationTest.Status item);

        public async Task<Destination.Models.destinationTest.Status> CreateStatus(Destination.Models.destinationTest.Status status)
        {
            OnStatusCreated(status);

            var existingItem = Context.Statuses
                              .Where(i => i.Statusid == status.Statusid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Statuses.Add(status);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(status).State = EntityState.Detached;
                throw;
            }

            OnAfterStatusCreated(status);

            return status;
        }

        public async Task<Destination.Models.destinationTest.Status> CancelStatusChanges(Destination.Models.destinationTest.Status item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnStatusUpdated(Destination.Models.destinationTest.Status item);
        partial void OnAfterStatusUpdated(Destination.Models.destinationTest.Status item);

        public async Task<Destination.Models.destinationTest.Status> UpdateStatus(int statusid, Destination.Models.destinationTest.Status status)
        {
            OnStatusUpdated(status);

            var itemToUpdate = Context.Statuses
                              .Where(i => i.Statusid == status.Statusid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(status);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterStatusUpdated(status);

            return status;
        }

        partial void OnStatusDeleted(Destination.Models.destinationTest.Status item);
        partial void OnAfterStatusDeleted(Destination.Models.destinationTest.Status item);

        public async Task<Destination.Models.destinationTest.Status> DeleteStatus(int statusid)
        {
            var itemToDelete = Context.Statuses
                              .Where(i => i.Statusid == statusid)
                              .Include(i => i.Properties)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnStatusDeleted(itemToDelete);


            Context.Statuses.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterStatusDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSystemPagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/systempages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/systempages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSystemPagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/systempages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/systempages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSystemPagesRead(ref IQueryable<Destination.Models.destinationTest.SystemPage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.SystemPage>> GetSystemPages(Query query = null)
        {
            var items = Context.SystemPages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnSystemPagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSystemPageGet(Destination.Models.destinationTest.SystemPage item);
        partial void OnGetSystemPageByPageId(ref IQueryable<Destination.Models.destinationTest.SystemPage> items);


        public async Task<Destination.Models.destinationTest.SystemPage> GetSystemPageByPageId(int pageid)
        {
            var items = Context.SystemPages
                              .AsNoTracking()
                              .Where(i => i.PageId == pageid);

 
            OnGetSystemPageByPageId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnSystemPageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSystemPageCreated(Destination.Models.destinationTest.SystemPage item);
        partial void OnAfterSystemPageCreated(Destination.Models.destinationTest.SystemPage item);

        public async Task<Destination.Models.destinationTest.SystemPage> CreateSystemPage(Destination.Models.destinationTest.SystemPage systempage)
        {
            OnSystemPageCreated(systempage);

            var existingItem = Context.SystemPages
                              .Where(i => i.PageId == systempage.PageId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.SystemPages.Add(systempage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(systempage).State = EntityState.Detached;
                throw;
            }

            OnAfterSystemPageCreated(systempage);

            return systempage;
        }

        public async Task<Destination.Models.destinationTest.SystemPage> CancelSystemPageChanges(Destination.Models.destinationTest.SystemPage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSystemPageUpdated(Destination.Models.destinationTest.SystemPage item);
        partial void OnAfterSystemPageUpdated(Destination.Models.destinationTest.SystemPage item);

        public async Task<Destination.Models.destinationTest.SystemPage> UpdateSystemPage(int pageid, Destination.Models.destinationTest.SystemPage systempage)
        {
            OnSystemPageUpdated(systempage);

            var itemToUpdate = Context.SystemPages
                              .Where(i => i.PageId == systempage.PageId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(systempage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSystemPageUpdated(systempage);

            return systempage;
        }

        partial void OnSystemPageDeleted(Destination.Models.destinationTest.SystemPage item);
        partial void OnAfterSystemPageDeleted(Destination.Models.destinationTest.SystemPage item);

        public async Task<Destination.Models.destinationTest.SystemPage> DeleteSystemPage(int pageid)
        {
            var itemToDelete = Context.SystemPages
                              .Where(i => i.PageId == pageid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSystemPageDeleted(itemToDelete);


            Context.SystemPages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSystemPageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTaskDescsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/taskdescs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/taskdescs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTaskDescsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/taskdescs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/taskdescs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTaskDescsRead(ref IQueryable<Destination.Models.destinationTest.TaskDesc> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TaskDesc>> GetTaskDescs(Query query = null)
        {
            var items = Context.TaskDescs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTaskDescsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTaskDescGet(Destination.Models.destinationTest.TaskDesc item);
        partial void OnGetTaskDescByTaskdesc1(ref IQueryable<Destination.Models.destinationTest.TaskDesc> items);


        public async Task<Destination.Models.destinationTest.TaskDesc> GetTaskDescByTaskdesc1(int taskdesc1)
        {
            var items = Context.TaskDescs
                              .AsNoTracking()
                              .Where(i => i.Taskdesc1 == taskdesc1);

 
            OnGetTaskDescByTaskdesc1(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTaskDescGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTaskDescCreated(Destination.Models.destinationTest.TaskDesc item);
        partial void OnAfterTaskDescCreated(Destination.Models.destinationTest.TaskDesc item);

        public async Task<Destination.Models.destinationTest.TaskDesc> CreateTaskDesc(Destination.Models.destinationTest.TaskDesc taskdesc)
        {
            OnTaskDescCreated(taskdesc);

            var existingItem = Context.TaskDescs
                              .Where(i => i.Taskdesc1 == taskdesc.Taskdesc1)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TaskDescs.Add(taskdesc);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(taskdesc).State = EntityState.Detached;
                throw;
            }

            OnAfterTaskDescCreated(taskdesc);

            return taskdesc;
        }

        public async Task<Destination.Models.destinationTest.TaskDesc> CancelTaskDescChanges(Destination.Models.destinationTest.TaskDesc item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTaskDescUpdated(Destination.Models.destinationTest.TaskDesc item);
        partial void OnAfterTaskDescUpdated(Destination.Models.destinationTest.TaskDesc item);

        public async Task<Destination.Models.destinationTest.TaskDesc> UpdateTaskDesc(int taskdesc1, Destination.Models.destinationTest.TaskDesc taskdesc)
        {
            OnTaskDescUpdated(taskdesc);

            var itemToUpdate = Context.TaskDescs
                              .Where(i => i.Taskdesc1 == taskdesc.Taskdesc1)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(taskdesc);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTaskDescUpdated(taskdesc);

            return taskdesc;
        }

        partial void OnTaskDescDeleted(Destination.Models.destinationTest.TaskDesc item);
        partial void OnAfterTaskDescDeleted(Destination.Models.destinationTest.TaskDesc item);

        public async Task<Destination.Models.destinationTest.TaskDesc> DeleteTaskDesc(int taskdesc1)
        {
            var itemToDelete = Context.TaskDescs
                              .Where(i => i.Taskdesc1 == taskdesc1)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTaskDescDeleted(itemToDelete);


            Context.TaskDescs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTaskDescDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblAirbnbExportTempsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblairbnbexporttemps/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblairbnbexporttemps/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblAirbnbExportTempsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblairbnbexporttemps/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblairbnbexporttemps/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblAirbnbExportTempsRead(ref IQueryable<Destination.Models.destinationTest.TblAirbnbExportTemp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblAirbnbExportTemp>> GetTblAirbnbExportTemps(Query query = null)
        {
            var items = Context.TblAirbnbExportTemps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblAirbnbExportTempsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblAirbnbExportTempGet(Destination.Models.destinationTest.TblAirbnbExportTemp item);
        partial void OnGetTblAirbnbExportTempById(ref IQueryable<Destination.Models.destinationTest.TblAirbnbExportTemp> items);


        public async Task<Destination.Models.destinationTest.TblAirbnbExportTemp> GetTblAirbnbExportTempById(int id)
        {
            var items = Context.TblAirbnbExportTemps
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblAirbnbExportTempById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblAirbnbExportTempGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblAirbnbExportTempCreated(Destination.Models.destinationTest.TblAirbnbExportTemp item);
        partial void OnAfterTblAirbnbExportTempCreated(Destination.Models.destinationTest.TblAirbnbExportTemp item);

        public async Task<Destination.Models.destinationTest.TblAirbnbExportTemp> CreateTblAirbnbExportTemp(Destination.Models.destinationTest.TblAirbnbExportTemp tblairbnbexporttemp)
        {
            OnTblAirbnbExportTempCreated(tblairbnbexporttemp);

            var existingItem = Context.TblAirbnbExportTemps
                              .Where(i => i.Id == tblairbnbexporttemp.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblAirbnbExportTemps.Add(tblairbnbexporttemp);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblairbnbexporttemp).State = EntityState.Detached;
                throw;
            }

            OnAfterTblAirbnbExportTempCreated(tblairbnbexporttemp);

            return tblairbnbexporttemp;
        }

        public async Task<Destination.Models.destinationTest.TblAirbnbExportTemp> CancelTblAirbnbExportTempChanges(Destination.Models.destinationTest.TblAirbnbExportTemp item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblAirbnbExportTempUpdated(Destination.Models.destinationTest.TblAirbnbExportTemp item);
        partial void OnAfterTblAirbnbExportTempUpdated(Destination.Models.destinationTest.TblAirbnbExportTemp item);

        public async Task<Destination.Models.destinationTest.TblAirbnbExportTemp> UpdateTblAirbnbExportTemp(int id, Destination.Models.destinationTest.TblAirbnbExportTemp tblairbnbexporttemp)
        {
            OnTblAirbnbExportTempUpdated(tblairbnbexporttemp);

            var itemToUpdate = Context.TblAirbnbExportTemps
                              .Where(i => i.Id == tblairbnbexporttemp.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblairbnbexporttemp);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblAirbnbExportTempUpdated(tblairbnbexporttemp);

            return tblairbnbexporttemp;
        }

        partial void OnTblAirbnbExportTempDeleted(Destination.Models.destinationTest.TblAirbnbExportTemp item);
        partial void OnAfterTblAirbnbExportTempDeleted(Destination.Models.destinationTest.TblAirbnbExportTemp item);

        public async Task<Destination.Models.destinationTest.TblAirbnbExportTemp> DeleteTblAirbnbExportTemp(int id)
        {
            var itemToDelete = Context.TblAirbnbExportTemps
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblAirbnbExportTempDeleted(itemToDelete);


            Context.TblAirbnbExportTemps.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblAirbnbExportTempDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblBookingIdsForMailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblbookingidsformails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblbookingidsformails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblBookingIdsForMailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblbookingidsformails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblbookingidsformails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblBookingIdsForMailsRead(ref IQueryable<Destination.Models.destinationTest.TblBookingIdsForMail> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblBookingIdsForMail>> GetTblBookingIdsForMails(Query query = null)
        {
            var items = Context.TblBookingIdsForMails.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblBookingIdsForMailsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTblBookingInterestsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblbookinginterests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblbookinginterests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblBookingInterestsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblbookinginterests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblbookinginterests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblBookingInterestsRead(ref IQueryable<Destination.Models.destinationTest.TblBookingInterest> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblBookingInterest>> GetTblBookingInterests(Query query = null)
        {
            var items = Context.TblBookingInterests.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblBookingInterestsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblBookingInterestGet(Destination.Models.destinationTest.TblBookingInterest item);
        partial void OnGetTblBookingInterestById(ref IQueryable<Destination.Models.destinationTest.TblBookingInterest> items);


        public async Task<Destination.Models.destinationTest.TblBookingInterest> GetTblBookingInterestById(int id)
        {
            var items = Context.TblBookingInterests
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblBookingInterestById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblBookingInterestGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblBookingInterestCreated(Destination.Models.destinationTest.TblBookingInterest item);
        partial void OnAfterTblBookingInterestCreated(Destination.Models.destinationTest.TblBookingInterest item);

        public async Task<Destination.Models.destinationTest.TblBookingInterest> CreateTblBookingInterest(Destination.Models.destinationTest.TblBookingInterest tblbookinginterest)
        {
            OnTblBookingInterestCreated(tblbookinginterest);

            var existingItem = Context.TblBookingInterests
                              .Where(i => i.Id == tblbookinginterest.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblBookingInterests.Add(tblbookinginterest);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblbookinginterest).State = EntityState.Detached;
                throw;
            }

            OnAfterTblBookingInterestCreated(tblbookinginterest);

            return tblbookinginterest;
        }

        public async Task<Destination.Models.destinationTest.TblBookingInterest> CancelTblBookingInterestChanges(Destination.Models.destinationTest.TblBookingInterest item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblBookingInterestUpdated(Destination.Models.destinationTest.TblBookingInterest item);
        partial void OnAfterTblBookingInterestUpdated(Destination.Models.destinationTest.TblBookingInterest item);

        public async Task<Destination.Models.destinationTest.TblBookingInterest> UpdateTblBookingInterest(int id, Destination.Models.destinationTest.TblBookingInterest tblbookinginterest)
        {
            OnTblBookingInterestUpdated(tblbookinginterest);

            var itemToUpdate = Context.TblBookingInterests
                              .Where(i => i.Id == tblbookinginterest.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblbookinginterest);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblBookingInterestUpdated(tblbookinginterest);

            return tblbookinginterest;
        }

        partial void OnTblBookingInterestDeleted(Destination.Models.destinationTest.TblBookingInterest item);
        partial void OnAfterTblBookingInterestDeleted(Destination.Models.destinationTest.TblBookingInterest item);

        public async Task<Destination.Models.destinationTest.TblBookingInterest> DeleteTblBookingInterest(int id)
        {
            var itemToDelete = Context.TblBookingInterests
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblBookingInterestDeleted(itemToDelete);


            Context.TblBookingInterests.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblBookingInterestDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblBulkEmailLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblbulkemaillogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblbulkemaillogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblBulkEmailLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblbulkemaillogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblbulkemaillogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblBulkEmailLogsRead(ref IQueryable<Destination.Models.destinationTest.TblBulkEmailLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblBulkEmailLog>> GetTblBulkEmailLogs(Query query = null)
        {
            var items = Context.TblBulkEmailLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblBulkEmailLogsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblBulkEmailLogGet(Destination.Models.destinationTest.TblBulkEmailLog item);
        partial void OnGetTblBulkEmailLogById(ref IQueryable<Destination.Models.destinationTest.TblBulkEmailLog> items);


        public async Task<Destination.Models.destinationTest.TblBulkEmailLog> GetTblBulkEmailLogById(int id)
        {
            var items = Context.TblBulkEmailLogs
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblBulkEmailLogById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblBulkEmailLogGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblBulkEmailLogCreated(Destination.Models.destinationTest.TblBulkEmailLog item);
        partial void OnAfterTblBulkEmailLogCreated(Destination.Models.destinationTest.TblBulkEmailLog item);

        public async Task<Destination.Models.destinationTest.TblBulkEmailLog> CreateTblBulkEmailLog(Destination.Models.destinationTest.TblBulkEmailLog tblbulkemaillog)
        {
            OnTblBulkEmailLogCreated(tblbulkemaillog);

            var existingItem = Context.TblBulkEmailLogs
                              .Where(i => i.Id == tblbulkemaillog.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblBulkEmailLogs.Add(tblbulkemaillog);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblbulkemaillog).State = EntityState.Detached;
                throw;
            }

            OnAfterTblBulkEmailLogCreated(tblbulkemaillog);

            return tblbulkemaillog;
        }

        public async Task<Destination.Models.destinationTest.TblBulkEmailLog> CancelTblBulkEmailLogChanges(Destination.Models.destinationTest.TblBulkEmailLog item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblBulkEmailLogUpdated(Destination.Models.destinationTest.TblBulkEmailLog item);
        partial void OnAfterTblBulkEmailLogUpdated(Destination.Models.destinationTest.TblBulkEmailLog item);

        public async Task<Destination.Models.destinationTest.TblBulkEmailLog> UpdateTblBulkEmailLog(int id, Destination.Models.destinationTest.TblBulkEmailLog tblbulkemaillog)
        {
            OnTblBulkEmailLogUpdated(tblbulkemaillog);

            var itemToUpdate = Context.TblBulkEmailLogs
                              .Where(i => i.Id == tblbulkemaillog.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblbulkemaillog);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblBulkEmailLogUpdated(tblbulkemaillog);

            return tblbulkemaillog;
        }

        partial void OnTblBulkEmailLogDeleted(Destination.Models.destinationTest.TblBulkEmailLog item);
        partial void OnAfterTblBulkEmailLogDeleted(Destination.Models.destinationTest.TblBulkEmailLog item);

        public async Task<Destination.Models.destinationTest.TblBulkEmailLog> DeleteTblBulkEmailLog(int id)
        {
            var itemToDelete = Context.TblBulkEmailLogs
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblBulkEmailLogDeleted(itemToDelete);


            Context.TblBulkEmailLogs.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblBulkEmailLogDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblChkSmsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblchksms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblchksms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblChkSmsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblchksms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblchksms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblChkSmsRead(ref IQueryable<Destination.Models.destinationTest.TblChkSm> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblChkSm>> GetTblChkSms(Query query = null)
        {
            var items = Context.TblChkSms.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblChkSmsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTblDebugsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tbldebugs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tbldebugs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblDebugsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tbldebugs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tbldebugs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblDebugsRead(ref IQueryable<Destination.Models.destinationTest.TblDebug> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblDebug>> GetTblDebugs(Query query = null)
        {
            var items = Context.TblDebugs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblDebugsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTblHomePageImagesLinksToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblhomepageimageslinks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblhomepageimageslinks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblHomePageImagesLinksToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblhomepageimageslinks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblhomepageimageslinks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblHomePageImagesLinksRead(ref IQueryable<Destination.Models.destinationTest.TblHomePageImagesLink> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblHomePageImagesLink>> GetTblHomePageImagesLinks(Query query = null)
        {
            var items = Context.TblHomePageImagesLinks.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblHomePageImagesLinksRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTblInterestsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblinterests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblinterests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblInterestsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblinterests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblinterests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblInterestsRead(ref IQueryable<Destination.Models.destinationTest.TblInterest> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblInterest>> GetTblInterests(Query query = null)
        {
            var items = Context.TblInterests.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblInterestsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblInterestGet(Destination.Models.destinationTest.TblInterest item);
        partial void OnGetTblInterestById(ref IQueryable<Destination.Models.destinationTest.TblInterest> items);


        public async Task<Destination.Models.destinationTest.TblInterest> GetTblInterestById(int id)
        {
            var items = Context.TblInterests
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblInterestById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblInterestGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblInterestCreated(Destination.Models.destinationTest.TblInterest item);
        partial void OnAfterTblInterestCreated(Destination.Models.destinationTest.TblInterest item);

        public async Task<Destination.Models.destinationTest.TblInterest> CreateTblInterest(Destination.Models.destinationTest.TblInterest tblinterest)
        {
            OnTblInterestCreated(tblinterest);

            var existingItem = Context.TblInterests
                              .Where(i => i.Id == tblinterest.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblInterests.Add(tblinterest);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblinterest).State = EntityState.Detached;
                throw;
            }

            OnAfterTblInterestCreated(tblinterest);

            return tblinterest;
        }

        public async Task<Destination.Models.destinationTest.TblInterest> CancelTblInterestChanges(Destination.Models.destinationTest.TblInterest item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblInterestUpdated(Destination.Models.destinationTest.TblInterest item);
        partial void OnAfterTblInterestUpdated(Destination.Models.destinationTest.TblInterest item);

        public async Task<Destination.Models.destinationTest.TblInterest> UpdateTblInterest(int id, Destination.Models.destinationTest.TblInterest tblinterest)
        {
            OnTblInterestUpdated(tblinterest);

            var itemToUpdate = Context.TblInterests
                              .Where(i => i.Id == tblinterest.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblinterest);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblInterestUpdated(tblinterest);

            return tblinterest;
        }

        partial void OnTblInterestDeleted(Destination.Models.destinationTest.TblInterest item);
        partial void OnAfterTblInterestDeleted(Destination.Models.destinationTest.TblInterest item);

        public async Task<Destination.Models.destinationTest.TblInterest> DeleteTblInterest(int id)
        {
            var itemToDelete = Context.TblInterests
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblInterestDeleted(itemToDelete);


            Context.TblInterests.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblInterestDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblInterests1ToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblinterests1/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblinterests1/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblInterests1ToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblinterests1/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblinterests1/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblInterests1Read(ref IQueryable<Destination.Models.destinationTest.TblInterest1> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblInterest1>> GetTblInterests1(Query query = null)
        {
            var items = Context.TblInterests1.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblInterests1Read(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblInterest1Get(Destination.Models.destinationTest.TblInterest1 item);
        partial void OnGetTblInterest1ByInterestId(ref IQueryable<Destination.Models.destinationTest.TblInterest1> items);


        public async Task<Destination.Models.destinationTest.TblInterest1> GetTblInterest1ByInterestId(int interestid)
        {
            var items = Context.TblInterests1
                              .AsNoTracking()
                              .Where(i => i.InterestId == interestid);

 
            OnGetTblInterest1ByInterestId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblInterest1Get(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblInterest1Created(Destination.Models.destinationTest.TblInterest1 item);
        partial void OnAfterTblInterest1Created(Destination.Models.destinationTest.TblInterest1 item);

        public async Task<Destination.Models.destinationTest.TblInterest1> CreateTblInterest1(Destination.Models.destinationTest.TblInterest1 tblinterest1)
        {
            OnTblInterest1Created(tblinterest1);

            var existingItem = Context.TblInterests1
                              .Where(i => i.InterestId == tblinterest1.InterestId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblInterests1.Add(tblinterest1);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblinterest1).State = EntityState.Detached;
                throw;
            }

            OnAfterTblInterest1Created(tblinterest1);

            return tblinterest1;
        }

        public async Task<Destination.Models.destinationTest.TblInterest1> CancelTblInterest1Changes(Destination.Models.destinationTest.TblInterest1 item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblInterest1Updated(Destination.Models.destinationTest.TblInterest1 item);
        partial void OnAfterTblInterest1Updated(Destination.Models.destinationTest.TblInterest1 item);

        public async Task<Destination.Models.destinationTest.TblInterest1> UpdateTblInterest1(int interestid, Destination.Models.destinationTest.TblInterest1 tblinterest1)
        {
            OnTblInterest1Updated(tblinterest1);

            var itemToUpdate = Context.TblInterests1
                              .Where(i => i.InterestId == tblinterest1.InterestId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblinterest1);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblInterest1Updated(tblinterest1);

            return tblinterest1;
        }

        partial void OnTblInterest1Deleted(Destination.Models.destinationTest.TblInterest1 item);
        partial void OnAfterTblInterest1Deleted(Destination.Models.destinationTest.TblInterest1 item);

        public async Task<Destination.Models.destinationTest.TblInterest1> DeleteTblInterest1(int interestid)
        {
            var itemToDelete = Context.TblInterests1
                              .Where(i => i.InterestId == interestid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblInterest1Deleted(itemToDelete);


            Context.TblInterests1.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblInterest1Deleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblMultiDayDiscountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblmultidaydiscounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblmultidaydiscounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblMultiDayDiscountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblmultidaydiscounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblmultidaydiscounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblMultiDayDiscountsRead(ref IQueryable<Destination.Models.destinationTest.TblMultiDayDiscount> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblMultiDayDiscount>> GetTblMultiDayDiscounts(Query query = null)
        {
            var items = Context.TblMultiDayDiscounts.AsQueryable();

            items = items.Include(i => i.Property);

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblMultiDayDiscountsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblMultiDayDiscountGet(Destination.Models.destinationTest.TblMultiDayDiscount item);
        partial void OnGetTblMultiDayDiscountById(ref IQueryable<Destination.Models.destinationTest.TblMultiDayDiscount> items);


        public async Task<Destination.Models.destinationTest.TblMultiDayDiscount> GetTblMultiDayDiscountById(int id)
        {
            var items = Context.TblMultiDayDiscounts
                              .AsNoTracking()
                              .Where(i => i.Id == id);

            items = items.Include(i => i.Property);
 
            OnGetTblMultiDayDiscountById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblMultiDayDiscountGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblMultiDayDiscountCreated(Destination.Models.destinationTest.TblMultiDayDiscount item);
        partial void OnAfterTblMultiDayDiscountCreated(Destination.Models.destinationTest.TblMultiDayDiscount item);

        public async Task<Destination.Models.destinationTest.TblMultiDayDiscount> CreateTblMultiDayDiscount(Destination.Models.destinationTest.TblMultiDayDiscount tblmultidaydiscount)
        {
            OnTblMultiDayDiscountCreated(tblmultidaydiscount);

            var existingItem = Context.TblMultiDayDiscounts
                              .Where(i => i.Id == tblmultidaydiscount.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblMultiDayDiscounts.Add(tblmultidaydiscount);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblmultidaydiscount).State = EntityState.Detached;
                throw;
            }

            OnAfterTblMultiDayDiscountCreated(tblmultidaydiscount);

            return tblmultidaydiscount;
        }

        public async Task<Destination.Models.destinationTest.TblMultiDayDiscount> CancelTblMultiDayDiscountChanges(Destination.Models.destinationTest.TblMultiDayDiscount item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblMultiDayDiscountUpdated(Destination.Models.destinationTest.TblMultiDayDiscount item);
        partial void OnAfterTblMultiDayDiscountUpdated(Destination.Models.destinationTest.TblMultiDayDiscount item);

        public async Task<Destination.Models.destinationTest.TblMultiDayDiscount> UpdateTblMultiDayDiscount(int id, Destination.Models.destinationTest.TblMultiDayDiscount tblmultidaydiscount)
        {
            OnTblMultiDayDiscountUpdated(tblmultidaydiscount);

            var itemToUpdate = Context.TblMultiDayDiscounts
                              .Where(i => i.Id == tblmultidaydiscount.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblmultidaydiscount);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblMultiDayDiscountUpdated(tblmultidaydiscount);

            return tblmultidaydiscount;
        }

        partial void OnTblMultiDayDiscountDeleted(Destination.Models.destinationTest.TblMultiDayDiscount item);
        partial void OnAfterTblMultiDayDiscountDeleted(Destination.Models.destinationTest.TblMultiDayDiscount item);

        public async Task<Destination.Models.destinationTest.TblMultiDayDiscount> DeleteTblMultiDayDiscount(int id)
        {
            var itemToDelete = Context.TblMultiDayDiscounts
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblMultiDayDiscountDeleted(itemToDelete);


            Context.TblMultiDayDiscounts.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblMultiDayDiscountDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblNotAvtivePropertyBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblnotavtivepropertybookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblnotavtivepropertybookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblNotAvtivePropertyBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblnotavtivepropertybookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblnotavtivepropertybookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblNotAvtivePropertyBookingsRead(ref IQueryable<Destination.Models.destinationTest.TblNotAvtivePropertyBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblNotAvtivePropertyBooking>> GetTblNotAvtivePropertyBookings(Query query = null)
        {
            var items = Context.TblNotAvtivePropertyBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblNotAvtivePropertyBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblNotAvtivePropertyBookingGet(Destination.Models.destinationTest.TblNotAvtivePropertyBooking item);
        partial void OnGetTblNotAvtivePropertyBookingById(ref IQueryable<Destination.Models.destinationTest.TblNotAvtivePropertyBooking> items);


        public async Task<Destination.Models.destinationTest.TblNotAvtivePropertyBooking> GetTblNotAvtivePropertyBookingById(int id)
        {
            var items = Context.TblNotAvtivePropertyBookings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblNotAvtivePropertyBookingById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblNotAvtivePropertyBookingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblNotAvtivePropertyBookingCreated(Destination.Models.destinationTest.TblNotAvtivePropertyBooking item);
        partial void OnAfterTblNotAvtivePropertyBookingCreated(Destination.Models.destinationTest.TblNotAvtivePropertyBooking item);

        public async Task<Destination.Models.destinationTest.TblNotAvtivePropertyBooking> CreateTblNotAvtivePropertyBooking(Destination.Models.destinationTest.TblNotAvtivePropertyBooking tblnotavtivepropertybooking)
        {
            OnTblNotAvtivePropertyBookingCreated(tblnotavtivepropertybooking);

            var existingItem = Context.TblNotAvtivePropertyBookings
                              .Where(i => i.Id == tblnotavtivepropertybooking.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblNotAvtivePropertyBookings.Add(tblnotavtivepropertybooking);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblnotavtivepropertybooking).State = EntityState.Detached;
                throw;
            }

            OnAfterTblNotAvtivePropertyBookingCreated(tblnotavtivepropertybooking);

            return tblnotavtivepropertybooking;
        }

        public async Task<Destination.Models.destinationTest.TblNotAvtivePropertyBooking> CancelTblNotAvtivePropertyBookingChanges(Destination.Models.destinationTest.TblNotAvtivePropertyBooking item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblNotAvtivePropertyBookingUpdated(Destination.Models.destinationTest.TblNotAvtivePropertyBooking item);
        partial void OnAfterTblNotAvtivePropertyBookingUpdated(Destination.Models.destinationTest.TblNotAvtivePropertyBooking item);

        public async Task<Destination.Models.destinationTest.TblNotAvtivePropertyBooking> UpdateTblNotAvtivePropertyBooking(int id, Destination.Models.destinationTest.TblNotAvtivePropertyBooking tblnotavtivepropertybooking)
        {
            OnTblNotAvtivePropertyBookingUpdated(tblnotavtivepropertybooking);

            var itemToUpdate = Context.TblNotAvtivePropertyBookings
                              .Where(i => i.Id == tblnotavtivepropertybooking.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblnotavtivepropertybooking);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblNotAvtivePropertyBookingUpdated(tblnotavtivepropertybooking);

            return tblnotavtivepropertybooking;
        }

        partial void OnTblNotAvtivePropertyBookingDeleted(Destination.Models.destinationTest.TblNotAvtivePropertyBooking item);
        partial void OnAfterTblNotAvtivePropertyBookingDeleted(Destination.Models.destinationTest.TblNotAvtivePropertyBooking item);

        public async Task<Destination.Models.destinationTest.TblNotAvtivePropertyBooking> DeleteTblNotAvtivePropertyBooking(int id)
        {
            var itemToDelete = Context.TblNotAvtivePropertyBookings
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblNotAvtivePropertyBookingDeleted(itemToDelete);


            Context.TblNotAvtivePropertyBookings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblNotAvtivePropertyBookingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblNotSendingEmailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblnotsendingemails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblnotsendingemails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblNotSendingEmailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblnotsendingemails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblnotsendingemails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblNotSendingEmailsRead(ref IQueryable<Destination.Models.destinationTest.TblNotSendingEmail> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblNotSendingEmail>> GetTblNotSendingEmails(Query query = null)
        {
            var items = Context.TblNotSendingEmails.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblNotSendingEmailsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblNotSendingEmailGet(Destination.Models.destinationTest.TblNotSendingEmail item);
        partial void OnGetTblNotSendingEmailById(ref IQueryable<Destination.Models.destinationTest.TblNotSendingEmail> items);


        public async Task<Destination.Models.destinationTest.TblNotSendingEmail> GetTblNotSendingEmailById(int id)
        {
            var items = Context.TblNotSendingEmails
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblNotSendingEmailById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblNotSendingEmailGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblNotSendingEmailCreated(Destination.Models.destinationTest.TblNotSendingEmail item);
        partial void OnAfterTblNotSendingEmailCreated(Destination.Models.destinationTest.TblNotSendingEmail item);

        public async Task<Destination.Models.destinationTest.TblNotSendingEmail> CreateTblNotSendingEmail(Destination.Models.destinationTest.TblNotSendingEmail tblnotsendingemail)
        {
            OnTblNotSendingEmailCreated(tblnotsendingemail);

            var existingItem = Context.TblNotSendingEmails
                              .Where(i => i.Id == tblnotsendingemail.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblNotSendingEmails.Add(tblnotsendingemail);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblnotsendingemail).State = EntityState.Detached;
                throw;
            }

            OnAfterTblNotSendingEmailCreated(tblnotsendingemail);

            return tblnotsendingemail;
        }

        public async Task<Destination.Models.destinationTest.TblNotSendingEmail> CancelTblNotSendingEmailChanges(Destination.Models.destinationTest.TblNotSendingEmail item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblNotSendingEmailUpdated(Destination.Models.destinationTest.TblNotSendingEmail item);
        partial void OnAfterTblNotSendingEmailUpdated(Destination.Models.destinationTest.TblNotSendingEmail item);

        public async Task<Destination.Models.destinationTest.TblNotSendingEmail> UpdateTblNotSendingEmail(int id, Destination.Models.destinationTest.TblNotSendingEmail tblnotsendingemail)
        {
            OnTblNotSendingEmailUpdated(tblnotsendingemail);

            var itemToUpdate = Context.TblNotSendingEmails
                              .Where(i => i.Id == tblnotsendingemail.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblnotsendingemail);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblNotSendingEmailUpdated(tblnotsendingemail);

            return tblnotsendingemail;
        }

        partial void OnTblNotSendingEmailDeleted(Destination.Models.destinationTest.TblNotSendingEmail item);
        partial void OnAfterTblNotSendingEmailDeleted(Destination.Models.destinationTest.TblNotSendingEmail item);

        public async Task<Destination.Models.destinationTest.TblNotSendingEmail> DeleteTblNotSendingEmail(int id)
        {
            var itemToDelete = Context.TblNotSendingEmails
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblNotSendingEmailDeleted(itemToDelete);


            Context.TblNotSendingEmails.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblNotSendingEmailDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblPartialCheckInsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblpartialcheckins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblpartialcheckins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblPartialCheckInsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblpartialcheckins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblpartialcheckins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblPartialCheckInsRead(ref IQueryable<Destination.Models.destinationTest.TblPartialCheckIn> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblPartialCheckIn>> GetTblPartialCheckIns(Query query = null)
        {
            var items = Context.TblPartialCheckIns.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblPartialCheckInsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTblPropertyActiveInactiveTrackForFlipkeyFeedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblpropertyactiveinactivetrackforflipkeyfeeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblpropertyactiveinactivetrackforflipkeyfeeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblPropertyActiveInactiveTrackForFlipkeyFeedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblpropertyactiveinactivetrackforflipkeyfeeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblpropertyactiveinactivetrackforflipkeyfeeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblPropertyActiveInactiveTrackForFlipkeyFeedsRead(ref IQueryable<Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed>> GetTblPropertyActiveInactiveTrackForFlipkeyFeeds(Query query = null)
        {
            var items = Context.TblPropertyActiveInactiveTrackForFlipkeyFeeds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblPropertyActiveInactiveTrackForFlipkeyFeedsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblPropertyActiveInactiveTrackForFlipkeyFeedGet(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed item);
        partial void OnGetTblPropertyActiveInactiveTrackForFlipkeyFeedById(ref IQueryable<Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed> items);


        public async Task<Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed> GetTblPropertyActiveInactiveTrackForFlipkeyFeedById(int id)
        {
            var items = Context.TblPropertyActiveInactiveTrackForFlipkeyFeeds
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblPropertyActiveInactiveTrackForFlipkeyFeedById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblPropertyActiveInactiveTrackForFlipkeyFeedGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblPropertyActiveInactiveTrackForFlipkeyFeedCreated(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed item);
        partial void OnAfterTblPropertyActiveInactiveTrackForFlipkeyFeedCreated(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed item);

        public async Task<Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed> CreateTblPropertyActiveInactiveTrackForFlipkeyFeed(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed tblpropertyactiveinactivetrackforflipkeyfeed)
        {
            OnTblPropertyActiveInactiveTrackForFlipkeyFeedCreated(tblpropertyactiveinactivetrackforflipkeyfeed);

            var existingItem = Context.TblPropertyActiveInactiveTrackForFlipkeyFeeds
                              .Where(i => i.Id == tblpropertyactiveinactivetrackforflipkeyfeed.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblPropertyActiveInactiveTrackForFlipkeyFeeds.Add(tblpropertyactiveinactivetrackforflipkeyfeed);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblpropertyactiveinactivetrackforflipkeyfeed).State = EntityState.Detached;
                throw;
            }

            OnAfterTblPropertyActiveInactiveTrackForFlipkeyFeedCreated(tblpropertyactiveinactivetrackforflipkeyfeed);

            return tblpropertyactiveinactivetrackforflipkeyfeed;
        }

        public async Task<Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed> CancelTblPropertyActiveInactiveTrackForFlipkeyFeedChanges(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblPropertyActiveInactiveTrackForFlipkeyFeedUpdated(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed item);
        partial void OnAfterTblPropertyActiveInactiveTrackForFlipkeyFeedUpdated(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed item);

        public async Task<Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed> UpdateTblPropertyActiveInactiveTrackForFlipkeyFeed(int id, Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed tblpropertyactiveinactivetrackforflipkeyfeed)
        {
            OnTblPropertyActiveInactiveTrackForFlipkeyFeedUpdated(tblpropertyactiveinactivetrackforflipkeyfeed);

            var itemToUpdate = Context.TblPropertyActiveInactiveTrackForFlipkeyFeeds
                              .Where(i => i.Id == tblpropertyactiveinactivetrackforflipkeyfeed.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblpropertyactiveinactivetrackforflipkeyfeed);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblPropertyActiveInactiveTrackForFlipkeyFeedUpdated(tblpropertyactiveinactivetrackforflipkeyfeed);

            return tblpropertyactiveinactivetrackforflipkeyfeed;
        }

        partial void OnTblPropertyActiveInactiveTrackForFlipkeyFeedDeleted(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed item);
        partial void OnAfterTblPropertyActiveInactiveTrackForFlipkeyFeedDeleted(Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed item);

        public async Task<Destination.Models.destinationTest.TblPropertyActiveInactiveTrackForFlipkeyFeed> DeleteTblPropertyActiveInactiveTrackForFlipkeyFeed(int id)
        {
            var itemToDelete = Context.TblPropertyActiveInactiveTrackForFlipkeyFeeds
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblPropertyActiveInactiveTrackForFlipkeyFeedDeleted(itemToDelete);


            Context.TblPropertyActiveInactiveTrackForFlipkeyFeeds.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblPropertyActiveInactiveTrackForFlipkeyFeedDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblPropertyImagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblpropertyimages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblpropertyimages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblPropertyImagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblpropertyimages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblpropertyimages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblPropertyImagesRead(ref IQueryable<Destination.Models.destinationTest.TblPropertyImage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblPropertyImage>> GetTblPropertyImages(Query query = null)
        {
            var items = Context.TblPropertyImages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblPropertyImagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblPropertyImageGet(Destination.Models.destinationTest.TblPropertyImage item);
        partial void OnGetTblPropertyImageById(ref IQueryable<Destination.Models.destinationTest.TblPropertyImage> items);


        public async Task<Destination.Models.destinationTest.TblPropertyImage> GetTblPropertyImageById(int id)
        {
            var items = Context.TblPropertyImages
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblPropertyImageById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblPropertyImageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblPropertyImageCreated(Destination.Models.destinationTest.TblPropertyImage item);
        partial void OnAfterTblPropertyImageCreated(Destination.Models.destinationTest.TblPropertyImage item);

        public async Task<Destination.Models.destinationTest.TblPropertyImage> CreateTblPropertyImage(Destination.Models.destinationTest.TblPropertyImage tblpropertyimage)
        {
            OnTblPropertyImageCreated(tblpropertyimage);

            var existingItem = Context.TblPropertyImages
                              .Where(i => i.Id == tblpropertyimage.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblPropertyImages.Add(tblpropertyimage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblpropertyimage).State = EntityState.Detached;
                throw;
            }

            OnAfterTblPropertyImageCreated(tblpropertyimage);

            return tblpropertyimage;
        }

        public async Task<Destination.Models.destinationTest.TblPropertyImage> CancelTblPropertyImageChanges(Destination.Models.destinationTest.TblPropertyImage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblPropertyImageUpdated(Destination.Models.destinationTest.TblPropertyImage item);
        partial void OnAfterTblPropertyImageUpdated(Destination.Models.destinationTest.TblPropertyImage item);

        public async Task<Destination.Models.destinationTest.TblPropertyImage> UpdateTblPropertyImage(int id, Destination.Models.destinationTest.TblPropertyImage tblpropertyimage)
        {
            OnTblPropertyImageUpdated(tblpropertyimage);

            var itemToUpdate = Context.TblPropertyImages
                              .Where(i => i.Id == tblpropertyimage.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblpropertyimage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblPropertyImageUpdated(tblpropertyimage);

            return tblpropertyimage;
        }

        partial void OnTblPropertyImageDeleted(Destination.Models.destinationTest.TblPropertyImage item);
        partial void OnAfterTblPropertyImageDeleted(Destination.Models.destinationTest.TblPropertyImage item);

        public async Task<Destination.Models.destinationTest.TblPropertyImage> DeleteTblPropertyImage(int id)
        {
            var itemToDelete = Context.TblPropertyImages
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblPropertyImageDeleted(itemToDelete);


            Context.TblPropertyImages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblPropertyImageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblPropertyRatesDailyMissedDatesPropsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblpropertyratesdailymisseddatesprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblpropertyratesdailymisseddatesprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblPropertyRatesDailyMissedDatesPropsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblpropertyratesdailymisseddatesprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblpropertyratesdailymisseddatesprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblPropertyRatesDailyMissedDatesPropsRead(ref IQueryable<Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp>> GetTblPropertyRatesDailyMissedDatesProps(Query query = null)
        {
            var items = Context.TblPropertyRatesDailyMissedDatesProps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblPropertyRatesDailyMissedDatesPropsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblPropertyRatesDailyMissedDatesPropGet(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp item);
        partial void OnGetTblPropertyRatesDailyMissedDatesPropById(ref IQueryable<Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp> items);


        public async Task<Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp> GetTblPropertyRatesDailyMissedDatesPropById(int id)
        {
            var items = Context.TblPropertyRatesDailyMissedDatesProps
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblPropertyRatesDailyMissedDatesPropById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblPropertyRatesDailyMissedDatesPropGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblPropertyRatesDailyMissedDatesPropCreated(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp item);
        partial void OnAfterTblPropertyRatesDailyMissedDatesPropCreated(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp item);

        public async Task<Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp> CreateTblPropertyRatesDailyMissedDatesProp(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp tblpropertyratesdailymisseddatesprop)
        {
            OnTblPropertyRatesDailyMissedDatesPropCreated(tblpropertyratesdailymisseddatesprop);

            var existingItem = Context.TblPropertyRatesDailyMissedDatesProps
                              .Where(i => i.Id == tblpropertyratesdailymisseddatesprop.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblPropertyRatesDailyMissedDatesProps.Add(tblpropertyratesdailymisseddatesprop);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblpropertyratesdailymisseddatesprop).State = EntityState.Detached;
                throw;
            }

            OnAfterTblPropertyRatesDailyMissedDatesPropCreated(tblpropertyratesdailymisseddatesprop);

            return tblpropertyratesdailymisseddatesprop;
        }

        public async Task<Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp> CancelTblPropertyRatesDailyMissedDatesPropChanges(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblPropertyRatesDailyMissedDatesPropUpdated(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp item);
        partial void OnAfterTblPropertyRatesDailyMissedDatesPropUpdated(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp item);

        public async Task<Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp> UpdateTblPropertyRatesDailyMissedDatesProp(int id, Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp tblpropertyratesdailymisseddatesprop)
        {
            OnTblPropertyRatesDailyMissedDatesPropUpdated(tblpropertyratesdailymisseddatesprop);

            var itemToUpdate = Context.TblPropertyRatesDailyMissedDatesProps
                              .Where(i => i.Id == tblpropertyratesdailymisseddatesprop.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblpropertyratesdailymisseddatesprop);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblPropertyRatesDailyMissedDatesPropUpdated(tblpropertyratesdailymisseddatesprop);

            return tblpropertyratesdailymisseddatesprop;
        }

        partial void OnTblPropertyRatesDailyMissedDatesPropDeleted(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp item);
        partial void OnAfterTblPropertyRatesDailyMissedDatesPropDeleted(Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp item);

        public async Task<Destination.Models.destinationTest.TblPropertyRatesDailyMissedDatesProp> DeleteTblPropertyRatesDailyMissedDatesProp(int id)
        {
            var itemToDelete = Context.TblPropertyRatesDailyMissedDatesProps
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblPropertyRatesDailyMissedDatesPropDeleted(itemToDelete);


            Context.TblPropertyRatesDailyMissedDatesProps.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblPropertyRatesDailyMissedDatesPropDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblrateTempsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblratetemps/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblratetemps/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblrateTempsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblratetemps/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblratetemps/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblrateTempsRead(ref IQueryable<Destination.Models.destinationTest.TblrateTemp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblrateTemp>> GetTblrateTemps(Query query = null)
        {
            var items = Context.TblrateTemps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblrateTempsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblrateTempGet(Destination.Models.destinationTest.TblrateTemp item);
        partial void OnGetTblrateTempById(ref IQueryable<Destination.Models.destinationTest.TblrateTemp> items);


        public async Task<Destination.Models.destinationTest.TblrateTemp> GetTblrateTempById(int id)
        {
            var items = Context.TblrateTemps
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblrateTempById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblrateTempGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblrateTempCreated(Destination.Models.destinationTest.TblrateTemp item);
        partial void OnAfterTblrateTempCreated(Destination.Models.destinationTest.TblrateTemp item);

        public async Task<Destination.Models.destinationTest.TblrateTemp> CreateTblrateTemp(Destination.Models.destinationTest.TblrateTemp tblratetemp)
        {
            OnTblrateTempCreated(tblratetemp);

            var existingItem = Context.TblrateTemps
                              .Where(i => i.Id == tblratetemp.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblrateTemps.Add(tblratetemp);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblratetemp).State = EntityState.Detached;
                throw;
            }

            OnAfterTblrateTempCreated(tblratetemp);

            return tblratetemp;
        }

        public async Task<Destination.Models.destinationTest.TblrateTemp> CancelTblrateTempChanges(Destination.Models.destinationTest.TblrateTemp item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblrateTempUpdated(Destination.Models.destinationTest.TblrateTemp item);
        partial void OnAfterTblrateTempUpdated(Destination.Models.destinationTest.TblrateTemp item);

        public async Task<Destination.Models.destinationTest.TblrateTemp> UpdateTblrateTemp(int id, Destination.Models.destinationTest.TblrateTemp tblratetemp)
        {
            OnTblrateTempUpdated(tblratetemp);

            var itemToUpdate = Context.TblrateTemps
                              .Where(i => i.Id == tblratetemp.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblratetemp);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblrateTempUpdated(tblratetemp);

            return tblratetemp;
        }

        partial void OnTblrateTempDeleted(Destination.Models.destinationTest.TblrateTemp item);
        partial void OnAfterTblrateTempDeleted(Destination.Models.destinationTest.TblrateTemp item);

        public async Task<Destination.Models.destinationTest.TblrateTemp> DeleteTblrateTemp(int id)
        {
            var itemToDelete = Context.TblrateTemps
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblrateTempDeleted(itemToDelete);


            Context.TblrateTemps.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblrateTempDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblServicesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblservices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblservices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblServicesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tblservices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tblservices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblServicesRead(ref IQueryable<Destination.Models.destinationTest.TblService> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblService>> GetTblServices(Query query = null)
        {
            var items = Context.TblServices.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblServicesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblServiceGet(Destination.Models.destinationTest.TblService item);
        partial void OnGetTblServiceById(ref IQueryable<Destination.Models.destinationTest.TblService> items);


        public async Task<Destination.Models.destinationTest.TblService> GetTblServiceById(int id)
        {
            var items = Context.TblServices
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTblServiceById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblServiceGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblServiceCreated(Destination.Models.destinationTest.TblService item);
        partial void OnAfterTblServiceCreated(Destination.Models.destinationTest.TblService item);

        public async Task<Destination.Models.destinationTest.TblService> CreateTblService(Destination.Models.destinationTest.TblService tblservice)
        {
            OnTblServiceCreated(tblservice);

            var existingItem = Context.TblServices
                              .Where(i => i.Id == tblservice.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblServices.Add(tblservice);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tblservice).State = EntityState.Detached;
                throw;
            }

            OnAfterTblServiceCreated(tblservice);

            return tblservice;
        }

        public async Task<Destination.Models.destinationTest.TblService> CancelTblServiceChanges(Destination.Models.destinationTest.TblService item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblServiceUpdated(Destination.Models.destinationTest.TblService item);
        partial void OnAfterTblServiceUpdated(Destination.Models.destinationTest.TblService item);

        public async Task<Destination.Models.destinationTest.TblService> UpdateTblService(int id, Destination.Models.destinationTest.TblService tblservice)
        {
            OnTblServiceUpdated(tblservice);

            var itemToUpdate = Context.TblServices
                              .Where(i => i.Id == tblservice.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tblservice);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblServiceUpdated(tblservice);

            return tblservice;
        }

        partial void OnTblServiceDeleted(Destination.Models.destinationTest.TblService item);
        partial void OnAfterTblServiceDeleted(Destination.Models.destinationTest.TblService item);

        public async Task<Destination.Models.destinationTest.TblService> DeleteTblService(int id)
        {
            var itemToDelete = Context.TblServices
                              .Where(i => i.Id == id)
                              .Include(i => i.Bookings)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblServiceDeleted(itemToDelete);


            Context.TblServices.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblServiceDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTblTrackDailyRatesExecutionForPropertiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tbltrackdailyratesexecutionforproperties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tbltrackdailyratesexecutionforproperties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblTrackDailyRatesExecutionForPropertiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tbltrackdailyratesexecutionforproperties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tbltrackdailyratesexecutionforproperties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblTrackDailyRatesExecutionForPropertiesRead(ref IQueryable<Destination.Models.destinationTest.TblTrackDailyRatesExecutionForProperty> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblTrackDailyRatesExecutionForProperty>> GetTblTrackDailyRatesExecutionForProperties(Query query = null)
        {
            var items = Context.TblTrackDailyRatesExecutionForProperties.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblTrackDailyRatesExecutionForPropertiesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTblTypeMastersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tbltypemasters/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tbltypemasters/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTblTypeMastersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tbltypemasters/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tbltypemasters/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTblTypeMastersRead(ref IQueryable<Destination.Models.destinationTest.TblTypeMaster> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TblTypeMaster>> GetTblTypeMasters(Query query = null)
        {
            var items = Context.TblTypeMasters.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTblTypeMastersRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTblTypeMasterGet(Destination.Models.destinationTest.TblTypeMaster item);
        partial void OnGetTblTypeMasterByTypeId(ref IQueryable<Destination.Models.destinationTest.TblTypeMaster> items);


        public async Task<Destination.Models.destinationTest.TblTypeMaster> GetTblTypeMasterByTypeId(int typeid)
        {
            var items = Context.TblTypeMasters
                              .AsNoTracking()
                              .Where(i => i.TypeId == typeid);

 
            OnGetTblTypeMasterByTypeId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTblTypeMasterGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTblTypeMasterCreated(Destination.Models.destinationTest.TblTypeMaster item);
        partial void OnAfterTblTypeMasterCreated(Destination.Models.destinationTest.TblTypeMaster item);

        public async Task<Destination.Models.destinationTest.TblTypeMaster> CreateTblTypeMaster(Destination.Models.destinationTest.TblTypeMaster tbltypemaster)
        {
            OnTblTypeMasterCreated(tbltypemaster);

            var existingItem = Context.TblTypeMasters
                              .Where(i => i.TypeId == tbltypemaster.TypeId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TblTypeMasters.Add(tbltypemaster);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tbltypemaster).State = EntityState.Detached;
                throw;
            }

            OnAfterTblTypeMasterCreated(tbltypemaster);

            return tbltypemaster;
        }

        public async Task<Destination.Models.destinationTest.TblTypeMaster> CancelTblTypeMasterChanges(Destination.Models.destinationTest.TblTypeMaster item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTblTypeMasterUpdated(Destination.Models.destinationTest.TblTypeMaster item);
        partial void OnAfterTblTypeMasterUpdated(Destination.Models.destinationTest.TblTypeMaster item);

        public async Task<Destination.Models.destinationTest.TblTypeMaster> UpdateTblTypeMaster(int typeid, Destination.Models.destinationTest.TblTypeMaster tbltypemaster)
        {
            OnTblTypeMasterUpdated(tbltypemaster);

            var itemToUpdate = Context.TblTypeMasters
                              .Where(i => i.TypeId == tbltypemaster.TypeId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tbltypemaster);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTblTypeMasterUpdated(tbltypemaster);

            return tbltypemaster;
        }

        partial void OnTblTypeMasterDeleted(Destination.Models.destinationTest.TblTypeMaster item);
        partial void OnAfterTblTypeMasterDeleted(Destination.Models.destinationTest.TblTypeMaster item);

        public async Task<Destination.Models.destinationTest.TblTypeMaster> DeleteTblTypeMaster(int typeid)
        {
            var itemToDelete = Context.TblTypeMasters
                              .Where(i => i.TypeId == typeid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTblTypeMasterDeleted(itemToDelete);


            Context.TblTypeMasters.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTblTypeMasterDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTemp12SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/temp12s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/temp12s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTemp12SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/temp12s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/temp12s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTemp12SRead(ref IQueryable<Destination.Models.destinationTest.Temp12> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Temp12>> GetTemp12S(Query query = null)
        {
            var items = Context.Temp12S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTemp12SRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTempComsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tempcoms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tempcoms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTempComsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tempcoms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tempcoms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTempComsRead(ref IQueryable<Destination.Models.destinationTest.TempCom> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TempCom>> GetTempComs(Query query = null)
        {
            var items = Context.TempComs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTempComsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTemplateCatsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/templatecats/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/templatecats/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTemplateCatsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/templatecats/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/templatecats/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTemplateCatsRead(ref IQueryable<Destination.Models.destinationTest.TemplateCat> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TemplateCat>> GetTemplateCats(Query query = null)
        {
            var items = Context.TemplateCats.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTemplateCatsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTemplateCatGet(Destination.Models.destinationTest.TemplateCat item);
        partial void OnGetTemplateCatById(ref IQueryable<Destination.Models.destinationTest.TemplateCat> items);


        public async Task<Destination.Models.destinationTest.TemplateCat> GetTemplateCatById(int id)
        {
            var items = Context.TemplateCats
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTemplateCatById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTemplateCatGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTemplateCatCreated(Destination.Models.destinationTest.TemplateCat item);
        partial void OnAfterTemplateCatCreated(Destination.Models.destinationTest.TemplateCat item);

        public async Task<Destination.Models.destinationTest.TemplateCat> CreateTemplateCat(Destination.Models.destinationTest.TemplateCat templatecat)
        {
            OnTemplateCatCreated(templatecat);

            var existingItem = Context.TemplateCats
                              .Where(i => i.Id == templatecat.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TemplateCats.Add(templatecat);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(templatecat).State = EntityState.Detached;
                throw;
            }

            OnAfterTemplateCatCreated(templatecat);

            return templatecat;
        }

        public async Task<Destination.Models.destinationTest.TemplateCat> CancelTemplateCatChanges(Destination.Models.destinationTest.TemplateCat item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTemplateCatUpdated(Destination.Models.destinationTest.TemplateCat item);
        partial void OnAfterTemplateCatUpdated(Destination.Models.destinationTest.TemplateCat item);

        public async Task<Destination.Models.destinationTest.TemplateCat> UpdateTemplateCat(int id, Destination.Models.destinationTest.TemplateCat templatecat)
        {
            OnTemplateCatUpdated(templatecat);

            var itemToUpdate = Context.TemplateCats
                              .Where(i => i.Id == templatecat.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(templatecat);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTemplateCatUpdated(templatecat);

            return templatecat;
        }

        partial void OnTemplateCatDeleted(Destination.Models.destinationTest.TemplateCat item);
        partial void OnAfterTemplateCatDeleted(Destination.Models.destinationTest.TemplateCat item);

        public async Task<Destination.Models.destinationTest.TemplateCat> DeleteTemplateCat(int id)
        {
            var itemToDelete = Context.TemplateCats
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTemplateCatDeleted(itemToDelete);


            Context.TemplateCats.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTemplateCatDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTemplatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/templates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/templates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTemplatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/templates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/templates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTemplatesRead(ref IQueryable<Destination.Models.destinationTest.Template> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Template>> GetTemplates(Query query = null)
        {
            var items = Context.Templates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTemplatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTemplateGet(Destination.Models.destinationTest.Template item);
        partial void OnGetTemplateByIntTemplateId(ref IQueryable<Destination.Models.destinationTest.Template> items);


        public async Task<Destination.Models.destinationTest.Template> GetTemplateByIntTemplateId(int inttemplateid)
        {
            var items = Context.Templates
                              .AsNoTracking()
                              .Where(i => i.IntTemplateId == inttemplateid);

 
            OnGetTemplateByIntTemplateId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTemplateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTemplateCreated(Destination.Models.destinationTest.Template item);
        partial void OnAfterTemplateCreated(Destination.Models.destinationTest.Template item);

        public async Task<Destination.Models.destinationTest.Template> CreateTemplate(Destination.Models.destinationTest.Template template)
        {
            OnTemplateCreated(template);

            var existingItem = Context.Templates
                              .Where(i => i.IntTemplateId == template.IntTemplateId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Templates.Add(template);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(template).State = EntityState.Detached;
                throw;
            }

            OnAfterTemplateCreated(template);

            return template;
        }

        public async Task<Destination.Models.destinationTest.Template> CancelTemplateChanges(Destination.Models.destinationTest.Template item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTemplateUpdated(Destination.Models.destinationTest.Template item);
        partial void OnAfterTemplateUpdated(Destination.Models.destinationTest.Template item);

        public async Task<Destination.Models.destinationTest.Template> UpdateTemplate(int inttemplateid, Destination.Models.destinationTest.Template template)
        {
            OnTemplateUpdated(template);

            var itemToUpdate = Context.Templates
                              .Where(i => i.IntTemplateId == template.IntTemplateId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(template);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTemplateUpdated(template);

            return template;
        }

        partial void OnTemplateDeleted(Destination.Models.destinationTest.Template item);
        partial void OnAfterTemplateDeleted(Destination.Models.destinationTest.Template item);

        public async Task<Destination.Models.destinationTest.Template> DeleteTemplate(int inttemplateid)
        {
            var itemToDelete = Context.Templates
                              .Where(i => i.IntTemplateId == inttemplateid)
                              .Include(i => i.FilterDataForBulkSmsMails)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTemplateDeleted(itemToDelete);


            Context.Templates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTemplateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTenantsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenants/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenants/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTenantsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenants/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenants/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTenantsRead(ref IQueryable<Destination.Models.destinationTest.Tenant> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Tenant>> GetTenants(Query query = null)
        {
            var items = Context.Tenants.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTenantsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTenantGet(Destination.Models.destinationTest.Tenant item);
        partial void OnGetTenantByTenantid(ref IQueryable<Destination.Models.destinationTest.Tenant> items);


        public async Task<Destination.Models.destinationTest.Tenant> GetTenantByTenantid(int tenantid)
        {
            var items = Context.Tenants
                              .AsNoTracking()
                              .Where(i => i.Tenantid == tenantid);

 
            OnGetTenantByTenantid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTenantGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTenantCreated(Destination.Models.destinationTest.Tenant item);
        partial void OnAfterTenantCreated(Destination.Models.destinationTest.Tenant item);

        public async Task<Destination.Models.destinationTest.Tenant> CreateTenant(Destination.Models.destinationTest.Tenant tenant)
        {
            OnTenantCreated(tenant);

            var existingItem = Context.Tenants
                              .Where(i => i.Tenantid == tenant.Tenantid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Tenants.Add(tenant);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tenant).State = EntityState.Detached;
                throw;
            }

            OnAfterTenantCreated(tenant);

            return tenant;
        }

        public async Task<Destination.Models.destinationTest.Tenant> CancelTenantChanges(Destination.Models.destinationTest.Tenant item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTenantUpdated(Destination.Models.destinationTest.Tenant item);
        partial void OnAfterTenantUpdated(Destination.Models.destinationTest.Tenant item);

        public async Task<Destination.Models.destinationTest.Tenant> UpdateTenant(int tenantid, Destination.Models.destinationTest.Tenant tenant)
        {
            OnTenantUpdated(tenant);

            var itemToUpdate = Context.Tenants
                              .Where(i => i.Tenantid == tenant.Tenantid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tenant);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTenantUpdated(tenant);

            return tenant;
        }

        partial void OnTenantDeleted(Destination.Models.destinationTest.Tenant item);
        partial void OnAfterTenantDeleted(Destination.Models.destinationTest.Tenant item);

        public async Task<Destination.Models.destinationTest.Tenant> DeleteTenant(int tenantid)
        {
            var itemToDelete = Context.Tenants
                              .Where(i => i.Tenantid == tenantid)
                              .Include(i => i.Bookings)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTenantDeleted(itemToDelete);


            Context.Tenants.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTenantDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTenantCheckInPhotosToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantcheckinphotos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantcheckinphotos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTenantCheckInPhotosToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantcheckinphotos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantcheckinphotos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTenantCheckInPhotosRead(ref IQueryable<Destination.Models.destinationTest.TenantCheckInPhoto> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TenantCheckInPhoto>> GetTenantCheckInPhotos(Query query = null)
        {
            var items = Context.TenantCheckInPhotos.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTenantCheckInPhotosRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTenantInterestDataToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantinterestdata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantinterestdata/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTenantInterestDataToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantinterestdata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantinterestdata/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTenantInterestDataRead(ref IQueryable<Destination.Models.destinationTest.TenantInterestDatum> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TenantInterestDatum>> GetTenantInterestData(Query query = null)
        {
            var items = Context.TenantInterestData.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTenantInterestDataRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTenantOrderAlertEmailMessagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantorderalertemailmessages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantorderalertemailmessages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTenantOrderAlertEmailMessagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantorderalertemailmessages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantorderalertemailmessages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTenantOrderAlertEmailMessagesRead(ref IQueryable<Destination.Models.destinationTest.TenantOrderAlertEmailMessage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TenantOrderAlertEmailMessage>> GetTenantOrderAlertEmailMessages(Query query = null)
        {
            var items = Context.TenantOrderAlertEmailMessages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTenantOrderAlertEmailMessagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTenantOrderAlertEmailMessageGet(Destination.Models.destinationTest.TenantOrderAlertEmailMessage item);
        partial void OnGetTenantOrderAlertEmailMessageById(ref IQueryable<Destination.Models.destinationTest.TenantOrderAlertEmailMessage> items);


        public async Task<Destination.Models.destinationTest.TenantOrderAlertEmailMessage> GetTenantOrderAlertEmailMessageById(long id)
        {
            var items = Context.TenantOrderAlertEmailMessages
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTenantOrderAlertEmailMessageById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTenantOrderAlertEmailMessageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTenantOrderAlertEmailMessageCreated(Destination.Models.destinationTest.TenantOrderAlertEmailMessage item);
        partial void OnAfterTenantOrderAlertEmailMessageCreated(Destination.Models.destinationTest.TenantOrderAlertEmailMessage item);

        public async Task<Destination.Models.destinationTest.TenantOrderAlertEmailMessage> CreateTenantOrderAlertEmailMessage(Destination.Models.destinationTest.TenantOrderAlertEmailMessage tenantorderalertemailmessage)
        {
            OnTenantOrderAlertEmailMessageCreated(tenantorderalertemailmessage);

            var existingItem = Context.TenantOrderAlertEmailMessages
                              .Where(i => i.Id == tenantorderalertemailmessage.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TenantOrderAlertEmailMessages.Add(tenantorderalertemailmessage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(tenantorderalertemailmessage).State = EntityState.Detached;
                throw;
            }

            OnAfterTenantOrderAlertEmailMessageCreated(tenantorderalertemailmessage);

            return tenantorderalertemailmessage;
        }

        public async Task<Destination.Models.destinationTest.TenantOrderAlertEmailMessage> CancelTenantOrderAlertEmailMessageChanges(Destination.Models.destinationTest.TenantOrderAlertEmailMessage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTenantOrderAlertEmailMessageUpdated(Destination.Models.destinationTest.TenantOrderAlertEmailMessage item);
        partial void OnAfterTenantOrderAlertEmailMessageUpdated(Destination.Models.destinationTest.TenantOrderAlertEmailMessage item);

        public async Task<Destination.Models.destinationTest.TenantOrderAlertEmailMessage> UpdateTenantOrderAlertEmailMessage(long id, Destination.Models.destinationTest.TenantOrderAlertEmailMessage tenantorderalertemailmessage)
        {
            OnTenantOrderAlertEmailMessageUpdated(tenantorderalertemailmessage);

            var itemToUpdate = Context.TenantOrderAlertEmailMessages
                              .Where(i => i.Id == tenantorderalertemailmessage.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(tenantorderalertemailmessage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTenantOrderAlertEmailMessageUpdated(tenantorderalertemailmessage);

            return tenantorderalertemailmessage;
        }

        partial void OnTenantOrderAlertEmailMessageDeleted(Destination.Models.destinationTest.TenantOrderAlertEmailMessage item);
        partial void OnAfterTenantOrderAlertEmailMessageDeleted(Destination.Models.destinationTest.TenantOrderAlertEmailMessage item);

        public async Task<Destination.Models.destinationTest.TenantOrderAlertEmailMessage> DeleteTenantOrderAlertEmailMessage(long id)
        {
            var itemToDelete = Context.TenantOrderAlertEmailMessages
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTenantOrderAlertEmailMessageDeleted(itemToDelete);


            Context.TenantOrderAlertEmailMessages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTenantOrderAlertEmailMessageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTenantSheetsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantsheets/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantsheets/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTenantSheetsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantsheets/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantsheets/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTenantSheetsRead(ref IQueryable<Destination.Models.destinationTest.TenantSheet> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TenantSheet>> GetTenantSheets(Query query = null)
        {
            var items = Context.TenantSheets.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTenantSheetsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTenantWithPlusOneInCellsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantwithplusoneincells/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantwithplusoneincells/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTenantWithPlusOneInCellsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/tenantwithplusoneincells/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/tenantwithplusoneincells/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTenantWithPlusOneInCellsRead(ref IQueryable<Destination.Models.destinationTest.TenantWithPlusOneInCell> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TenantWithPlusOneInCell>> GetTenantWithPlusOneInCells(Query query = null)
        {
            var items = Context.TenantWithPlusOneInCells.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTenantWithPlusOneInCellsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTestTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/testtables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/testtables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTestTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/testtables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/testtables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTestTablesRead(ref IQueryable<Destination.Models.destinationTest.TestTable> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TestTable>> GetTestTables(Query query = null)
        {
            var items = Context.TestTables.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTestTablesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportTestTableForDailyRoutinesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/testtablefordailyroutines/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/testtablefordailyroutines/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTestTableForDailyRoutinesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/testtablefordailyroutines/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/testtablefordailyroutines/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTestTableForDailyRoutinesRead(ref IQueryable<Destination.Models.destinationTest.TestTableForDailyRoutine> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TestTableForDailyRoutine>> GetTestTableForDailyRoutines(Query query = null)
        {
            var items = Context.TestTableForDailyRoutines.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTestTableForDailyRoutinesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTestTableForDailyRoutineGet(Destination.Models.destinationTest.TestTableForDailyRoutine item);
        partial void OnGetTestTableForDailyRoutineById(ref IQueryable<Destination.Models.destinationTest.TestTableForDailyRoutine> items);


        public async Task<Destination.Models.destinationTest.TestTableForDailyRoutine> GetTestTableForDailyRoutineById(int id)
        {
            var items = Context.TestTableForDailyRoutines
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTestTableForDailyRoutineById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTestTableForDailyRoutineGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTestTableForDailyRoutineCreated(Destination.Models.destinationTest.TestTableForDailyRoutine item);
        partial void OnAfterTestTableForDailyRoutineCreated(Destination.Models.destinationTest.TestTableForDailyRoutine item);

        public async Task<Destination.Models.destinationTest.TestTableForDailyRoutine> CreateTestTableForDailyRoutine(Destination.Models.destinationTest.TestTableForDailyRoutine testtablefordailyroutine)
        {
            OnTestTableForDailyRoutineCreated(testtablefordailyroutine);

            var existingItem = Context.TestTableForDailyRoutines
                              .Where(i => i.Id == testtablefordailyroutine.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TestTableForDailyRoutines.Add(testtablefordailyroutine);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(testtablefordailyroutine).State = EntityState.Detached;
                throw;
            }

            OnAfterTestTableForDailyRoutineCreated(testtablefordailyroutine);

            return testtablefordailyroutine;
        }

        public async Task<Destination.Models.destinationTest.TestTableForDailyRoutine> CancelTestTableForDailyRoutineChanges(Destination.Models.destinationTest.TestTableForDailyRoutine item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTestTableForDailyRoutineUpdated(Destination.Models.destinationTest.TestTableForDailyRoutine item);
        partial void OnAfterTestTableForDailyRoutineUpdated(Destination.Models.destinationTest.TestTableForDailyRoutine item);

        public async Task<Destination.Models.destinationTest.TestTableForDailyRoutine> UpdateTestTableForDailyRoutine(int id, Destination.Models.destinationTest.TestTableForDailyRoutine testtablefordailyroutine)
        {
            OnTestTableForDailyRoutineUpdated(testtablefordailyroutine);

            var itemToUpdate = Context.TestTableForDailyRoutines
                              .Where(i => i.Id == testtablefordailyroutine.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(testtablefordailyroutine);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTestTableForDailyRoutineUpdated(testtablefordailyroutine);

            return testtablefordailyroutine;
        }

        partial void OnTestTableForDailyRoutineDeleted(Destination.Models.destinationTest.TestTableForDailyRoutine item);
        partial void OnAfterTestTableForDailyRoutineDeleted(Destination.Models.destinationTest.TestTableForDailyRoutine item);

        public async Task<Destination.Models.destinationTest.TestTableForDailyRoutine> DeleteTestTableForDailyRoutine(int id)
        {
            var itemToDelete = Context.TestTableForDailyRoutines
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTestTableForDailyRoutineDeleted(itemToDelete);


            Context.TestTableForDailyRoutines.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTestTableForDailyRoutineDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTrackClosedPastBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/trackclosedpastbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/trackclosedpastbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTrackClosedPastBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/trackclosedpastbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/trackclosedpastbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTrackClosedPastBookingsRead(ref IQueryable<Destination.Models.destinationTest.TrackClosedPastBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TrackClosedPastBooking>> GetTrackClosedPastBookings(Query query = null)
        {
            var items = Context.TrackClosedPastBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTrackClosedPastBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTrackClosedPastBookingGet(Destination.Models.destinationTest.TrackClosedPastBooking item);
        partial void OnGetTrackClosedPastBookingById(ref IQueryable<Destination.Models.destinationTest.TrackClosedPastBooking> items);


        public async Task<Destination.Models.destinationTest.TrackClosedPastBooking> GetTrackClosedPastBookingById(int id)
        {
            var items = Context.TrackClosedPastBookings
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTrackClosedPastBookingById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTrackClosedPastBookingGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTrackClosedPastBookingCreated(Destination.Models.destinationTest.TrackClosedPastBooking item);
        partial void OnAfterTrackClosedPastBookingCreated(Destination.Models.destinationTest.TrackClosedPastBooking item);

        public async Task<Destination.Models.destinationTest.TrackClosedPastBooking> CreateTrackClosedPastBooking(Destination.Models.destinationTest.TrackClosedPastBooking trackclosedpastbooking)
        {
            OnTrackClosedPastBookingCreated(trackclosedpastbooking);

            var existingItem = Context.TrackClosedPastBookings
                              .Where(i => i.Id == trackclosedpastbooking.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TrackClosedPastBookings.Add(trackclosedpastbooking);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(trackclosedpastbooking).State = EntityState.Detached;
                throw;
            }

            OnAfterTrackClosedPastBookingCreated(trackclosedpastbooking);

            return trackclosedpastbooking;
        }

        public async Task<Destination.Models.destinationTest.TrackClosedPastBooking> CancelTrackClosedPastBookingChanges(Destination.Models.destinationTest.TrackClosedPastBooking item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTrackClosedPastBookingUpdated(Destination.Models.destinationTest.TrackClosedPastBooking item);
        partial void OnAfterTrackClosedPastBookingUpdated(Destination.Models.destinationTest.TrackClosedPastBooking item);

        public async Task<Destination.Models.destinationTest.TrackClosedPastBooking> UpdateTrackClosedPastBooking(int id, Destination.Models.destinationTest.TrackClosedPastBooking trackclosedpastbooking)
        {
            OnTrackClosedPastBookingUpdated(trackclosedpastbooking);

            var itemToUpdate = Context.TrackClosedPastBookings
                              .Where(i => i.Id == trackclosedpastbooking.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(trackclosedpastbooking);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTrackClosedPastBookingUpdated(trackclosedpastbooking);

            return trackclosedpastbooking;
        }

        partial void OnTrackClosedPastBookingDeleted(Destination.Models.destinationTest.TrackClosedPastBooking item);
        partial void OnAfterTrackClosedPastBookingDeleted(Destination.Models.destinationTest.TrackClosedPastBooking item);

        public async Task<Destination.Models.destinationTest.TrackClosedPastBooking> DeleteTrackClosedPastBooking(int id)
        {
            var itemToDelete = Context.TrackClosedPastBookings
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTrackClosedPastBookingDeleted(itemToDelete);


            Context.TrackClosedPastBookings.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTrackClosedPastBookingDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTrackedCampaignsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/trackedcampaigns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/trackedcampaigns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTrackedCampaignsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/trackedcampaigns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/trackedcampaigns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTrackedCampaignsRead(ref IQueryable<Destination.Models.destinationTest.TrackedCampaign> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TrackedCampaign>> GetTrackedCampaigns(Query query = null)
        {
            var items = Context.TrackedCampaigns.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTrackedCampaignsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTrackedCampaignGet(Destination.Models.destinationTest.TrackedCampaign item);
        partial void OnGetTrackedCampaignById(ref IQueryable<Destination.Models.destinationTest.TrackedCampaign> items);


        public async Task<Destination.Models.destinationTest.TrackedCampaign> GetTrackedCampaignById(int id)
        {
            var items = Context.TrackedCampaigns
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTrackedCampaignById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTrackedCampaignGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTrackedCampaignCreated(Destination.Models.destinationTest.TrackedCampaign item);
        partial void OnAfterTrackedCampaignCreated(Destination.Models.destinationTest.TrackedCampaign item);

        public async Task<Destination.Models.destinationTest.TrackedCampaign> CreateTrackedCampaign(Destination.Models.destinationTest.TrackedCampaign trackedcampaign)
        {
            OnTrackedCampaignCreated(trackedcampaign);

            var existingItem = Context.TrackedCampaigns
                              .Where(i => i.Id == trackedcampaign.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TrackedCampaigns.Add(trackedcampaign);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(trackedcampaign).State = EntityState.Detached;
                throw;
            }

            OnAfterTrackedCampaignCreated(trackedcampaign);

            return trackedcampaign;
        }

        public async Task<Destination.Models.destinationTest.TrackedCampaign> CancelTrackedCampaignChanges(Destination.Models.destinationTest.TrackedCampaign item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTrackedCampaignUpdated(Destination.Models.destinationTest.TrackedCampaign item);
        partial void OnAfterTrackedCampaignUpdated(Destination.Models.destinationTest.TrackedCampaign item);

        public async Task<Destination.Models.destinationTest.TrackedCampaign> UpdateTrackedCampaign(int id, Destination.Models.destinationTest.TrackedCampaign trackedcampaign)
        {
            OnTrackedCampaignUpdated(trackedcampaign);

            var itemToUpdate = Context.TrackedCampaigns
                              .Where(i => i.Id == trackedcampaign.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(trackedcampaign);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTrackedCampaignUpdated(trackedcampaign);

            return trackedcampaign;
        }

        partial void OnTrackedCampaignDeleted(Destination.Models.destinationTest.TrackedCampaign item);
        partial void OnAfterTrackedCampaignDeleted(Destination.Models.destinationTest.TrackedCampaign item);

        public async Task<Destination.Models.destinationTest.TrackedCampaign> DeleteTrackedCampaign(int id)
        {
            var itemToDelete = Context.TrackedCampaigns
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTrackedCampaignDeleted(itemToDelete);


            Context.TrackedCampaigns.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTrackedCampaignDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTrackedUsersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/trackedusers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/trackedusers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTrackedUsersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/trackedusers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/trackedusers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTrackedUsersRead(ref IQueryable<Destination.Models.destinationTest.TrackedUser> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TrackedUser>> GetTrackedUsers(Query query = null)
        {
            var items = Context.TrackedUsers.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTrackedUsersRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTrackedUserGet(Destination.Models.destinationTest.TrackedUser item);
        partial void OnGetTrackedUserById(ref IQueryable<Destination.Models.destinationTest.TrackedUser> items);


        public async Task<Destination.Models.destinationTest.TrackedUser> GetTrackedUserById(int id)
        {
            var items = Context.TrackedUsers
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetTrackedUserById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTrackedUserGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTrackedUserCreated(Destination.Models.destinationTest.TrackedUser item);
        partial void OnAfterTrackedUserCreated(Destination.Models.destinationTest.TrackedUser item);

        public async Task<Destination.Models.destinationTest.TrackedUser> CreateTrackedUser(Destination.Models.destinationTest.TrackedUser trackeduser)
        {
            OnTrackedUserCreated(trackeduser);

            var existingItem = Context.TrackedUsers
                              .Where(i => i.Id == trackeduser.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TrackedUsers.Add(trackeduser);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(trackeduser).State = EntityState.Detached;
                throw;
            }

            OnAfterTrackedUserCreated(trackeduser);

            return trackeduser;
        }

        public async Task<Destination.Models.destinationTest.TrackedUser> CancelTrackedUserChanges(Destination.Models.destinationTest.TrackedUser item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTrackedUserUpdated(Destination.Models.destinationTest.TrackedUser item);
        partial void OnAfterTrackedUserUpdated(Destination.Models.destinationTest.TrackedUser item);

        public async Task<Destination.Models.destinationTest.TrackedUser> UpdateTrackedUser(int id, Destination.Models.destinationTest.TrackedUser trackeduser)
        {
            OnTrackedUserUpdated(trackeduser);

            var itemToUpdate = Context.TrackedUsers
                              .Where(i => i.Id == trackeduser.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(trackeduser);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTrackedUserUpdated(trackeduser);

            return trackeduser;
        }

        partial void OnTrackedUserDeleted(Destination.Models.destinationTest.TrackedUser item);
        partial void OnAfterTrackedUserDeleted(Destination.Models.destinationTest.TrackedUser item);

        public async Task<Destination.Models.destinationTest.TrackedUser> DeleteTrackedUser(int id)
        {
            var itemToDelete = Context.TrackedUsers
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTrackedUserDeleted(itemToDelete);


            Context.TrackedUsers.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTrackedUserDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTrainingScoresToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/trainingscores/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/trainingscores/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTrainingScoresToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/trainingscores/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/trainingscores/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTrainingScoresRead(ref IQueryable<Destination.Models.destinationTest.TrainingScore> items);

        public async Task<IQueryable<Destination.Models.destinationTest.TrainingScore>> GetTrainingScores(Query query = null)
        {
            var items = Context.TrainingScores.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnTrainingScoresRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTrainingScoreGet(Destination.Models.destinationTest.TrainingScore item);
        partial void OnGetTrainingScoreByIntScoreId(ref IQueryable<Destination.Models.destinationTest.TrainingScore> items);


        public async Task<Destination.Models.destinationTest.TrainingScore> GetTrainingScoreByIntScoreId(int intscoreid)
        {
            var items = Context.TrainingScores
                              .AsNoTracking()
                              .Where(i => i.IntScoreId == intscoreid);

 
            OnGetTrainingScoreByIntScoreId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnTrainingScoreGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTrainingScoreCreated(Destination.Models.destinationTest.TrainingScore item);
        partial void OnAfterTrainingScoreCreated(Destination.Models.destinationTest.TrainingScore item);

        public async Task<Destination.Models.destinationTest.TrainingScore> CreateTrainingScore(Destination.Models.destinationTest.TrainingScore trainingscore)
        {
            OnTrainingScoreCreated(trainingscore);

            var existingItem = Context.TrainingScores
                              .Where(i => i.IntScoreId == trainingscore.IntScoreId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.TrainingScores.Add(trainingscore);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(trainingscore).State = EntityState.Detached;
                throw;
            }

            OnAfterTrainingScoreCreated(trainingscore);

            return trainingscore;
        }

        public async Task<Destination.Models.destinationTest.TrainingScore> CancelTrainingScoreChanges(Destination.Models.destinationTest.TrainingScore item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTrainingScoreUpdated(Destination.Models.destinationTest.TrainingScore item);
        partial void OnAfterTrainingScoreUpdated(Destination.Models.destinationTest.TrainingScore item);

        public async Task<Destination.Models.destinationTest.TrainingScore> UpdateTrainingScore(int intscoreid, Destination.Models.destinationTest.TrainingScore trainingscore)
        {
            OnTrainingScoreUpdated(trainingscore);

            var itemToUpdate = Context.TrainingScores
                              .Where(i => i.IntScoreId == trainingscore.IntScoreId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(trainingscore);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTrainingScoreUpdated(trainingscore);

            return trainingscore;
        }

        partial void OnTrainingScoreDeleted(Destination.Models.destinationTest.TrainingScore item);
        partial void OnAfterTrainingScoreDeleted(Destination.Models.destinationTest.TrainingScore item);

        public async Task<Destination.Models.destinationTest.TrainingScore> DeleteTrainingScore(int intscoreid)
        {
            var itemToDelete = Context.TrainingScores
                              .Where(i => i.IntScoreId == intscoreid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTrainingScoreDeleted(itemToDelete);


            Context.TrainingScores.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTrainingScoreDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportUpdateRateHomesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/updateratehomes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/updateratehomes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportUpdateRateHomesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/updateratehomes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/updateratehomes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnUpdateRateHomesRead(ref IQueryable<Destination.Models.destinationTest.UpdateRateHome> items);

        public async Task<IQueryable<Destination.Models.destinationTest.UpdateRateHome>> GetUpdateRateHomes(Query query = null)
        {
            var items = Context.UpdateRateHomes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnUpdateRateHomesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportUtilitiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/utilities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/utilities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportUtilitiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/utilities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/utilities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnUtilitiesRead(ref IQueryable<Destination.Models.destinationTest.Utility> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Utility>> GetUtilities(Query query = null)
        {
            var items = Context.Utilities.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnUtilitiesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnUtilityGet(Destination.Models.destinationTest.Utility item);
        partial void OnGetUtilityById(ref IQueryable<Destination.Models.destinationTest.Utility> items);


        public async Task<Destination.Models.destinationTest.Utility> GetUtilityById(int id)
        {
            var items = Context.Utilities
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetUtilityById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnUtilityGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnUtilityCreated(Destination.Models.destinationTest.Utility item);
        partial void OnAfterUtilityCreated(Destination.Models.destinationTest.Utility item);

        public async Task<Destination.Models.destinationTest.Utility> CreateUtility(Destination.Models.destinationTest.Utility utility)
        {
            OnUtilityCreated(utility);

            var existingItem = Context.Utilities
                              .Where(i => i.Id == utility.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Utilities.Add(utility);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(utility).State = EntityState.Detached;
                throw;
            }

            OnAfterUtilityCreated(utility);

            return utility;
        }

        public async Task<Destination.Models.destinationTest.Utility> CancelUtilityChanges(Destination.Models.destinationTest.Utility item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnUtilityUpdated(Destination.Models.destinationTest.Utility item);
        partial void OnAfterUtilityUpdated(Destination.Models.destinationTest.Utility item);

        public async Task<Destination.Models.destinationTest.Utility> UpdateUtility(int id, Destination.Models.destinationTest.Utility utility)
        {
            OnUtilityUpdated(utility);

            var itemToUpdate = Context.Utilities
                              .Where(i => i.Id == utility.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(utility);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterUtilityUpdated(utility);

            return utility;
        }

        partial void OnUtilityDeleted(Destination.Models.destinationTest.Utility item);
        partial void OnAfterUtilityDeleted(Destination.Models.destinationTest.Utility item);

        public async Task<Destination.Models.destinationTest.Utility> DeleteUtility(int id)
        {
            var itemToDelete = Context.Utilities
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnUtilityDeleted(itemToDelete);


            Context.Utilities.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterUtilityDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportUvGetBackToBackCheckInsPerDaysToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/uvgetbacktobackcheckinsperdays/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/uvgetbacktobackcheckinsperdays/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportUvGetBackToBackCheckInsPerDaysToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/uvgetbacktobackcheckinsperdays/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/uvgetbacktobackcheckinsperdays/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnUvGetBackToBackCheckInsPerDaysRead(ref IQueryable<Destination.Models.destinationTest.UvGetBackToBackCheckInsPerDay> items);

        public async Task<IQueryable<Destination.Models.destinationTest.UvGetBackToBackCheckInsPerDay>> GetUvGetBackToBackCheckInsPerDays(Query query = null)
        {
            var items = Context.UvGetBackToBackCheckInsPerDays.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnUvGetBackToBackCheckInsPerDaysRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportUvGetBookingBackToBackCountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/uvgetbookingbacktobackcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/uvgetbookingbacktobackcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportUvGetBookingBackToBackCountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/uvgetbookingbacktobackcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/uvgetbookingbacktobackcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnUvGetBookingBackToBackCountsRead(ref IQueryable<Destination.Models.destinationTest.UvGetBookingBackToBackCount> items);

        public async Task<IQueryable<Destination.Models.destinationTest.UvGetBookingBackToBackCount>> GetUvGetBookingBackToBackCounts(Query query = null)
        {
            var items = Context.UvGetBookingBackToBackCounts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnUvGetBookingBackToBackCountsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportUvGetBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/uvgetbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/uvgetbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportUvGetBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/uvgetbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/uvgetbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnUvGetBookingsRead(ref IQueryable<Destination.Models.destinationTest.UvGetBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.UvGetBooking>> GetUvGetBookings(Query query = null)
        {
            var items = Context.UvGetBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnUvGetBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportUvGetTotalCheckInsPerDaysToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/uvgettotalcheckinsperdays/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/uvgettotalcheckinsperdays/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportUvGetTotalCheckInsPerDaysToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/uvgettotalcheckinsperdays/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/uvgettotalcheckinsperdays/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnUvGetTotalCheckInsPerDaysRead(ref IQueryable<Destination.Models.destinationTest.UvGetTotalCheckInsPerDay> items);

        public async Task<IQueryable<Destination.Models.destinationTest.UvGetTotalCheckInsPerDay>> GetUvGetTotalCheckInsPerDays(Query query = null)
        {
            var items = Context.UvGetTotalCheckInsPerDays.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnUvGetTotalCheckInsPerDaysRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVRecordsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrecords/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrecords/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVRecordsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrecords/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrecords/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVRecordsRead(ref IQueryable<Destination.Models.destinationTest.VRecord> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VRecord>> GetVRecords(Query query = null)
        {
            var items = Context.VRecords.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVRecordsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportViewRevenuesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/viewrevenues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/viewrevenues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportViewRevenuesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/viewrevenues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/viewrevenues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnViewRevenuesRead(ref IQueryable<Destination.Models.destinationTest.ViewRevenue> items);

        public async Task<IQueryable<Destination.Models.destinationTest.ViewRevenue>> GetViewRevenues(Query query = null)
        {
            var items = Context.ViewRevenues.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnViewRevenuesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVoiceMailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/voicemails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/voicemails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVoiceMailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/voicemails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/voicemails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVoiceMailsRead(ref IQueryable<Destination.Models.destinationTest.VoiceMail> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VoiceMail>> GetVoiceMails(Query query = null)
        {
            var items = Context.VoiceMails.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVoiceMailsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVonageTsheetsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vonagetsheets/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vonagetsheets/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVonageTsheetsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vonagetsheets/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vonagetsheets/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVonageTsheetsRead(ref IQueryable<Destination.Models.destinationTest.VonageTsheet> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VonageTsheet>> GetVonageTsheets(Query query = null)
        {
            var items = Context.VonageTsheets.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVonageTsheetsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnVonageTsheetGet(Destination.Models.destinationTest.VonageTsheet item);
        partial void OnGetVonageTsheetById(ref IQueryable<Destination.Models.destinationTest.VonageTsheet> items);


        public async Task<Destination.Models.destinationTest.VonageTsheet> GetVonageTsheetById(int id)
        {
            var items = Context.VonageTsheets
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetVonageTsheetById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnVonageTsheetGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnVonageTsheetCreated(Destination.Models.destinationTest.VonageTsheet item);
        partial void OnAfterVonageTsheetCreated(Destination.Models.destinationTest.VonageTsheet item);

        public async Task<Destination.Models.destinationTest.VonageTsheet> CreateVonageTsheet(Destination.Models.destinationTest.VonageTsheet vonagetsheet)
        {
            OnVonageTsheetCreated(vonagetsheet);

            var existingItem = Context.VonageTsheets
                              .Where(i => i.Id == vonagetsheet.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.VonageTsheets.Add(vonagetsheet);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(vonagetsheet).State = EntityState.Detached;
                throw;
            }

            OnAfterVonageTsheetCreated(vonagetsheet);

            return vonagetsheet;
        }

        public async Task<Destination.Models.destinationTest.VonageTsheet> CancelVonageTsheetChanges(Destination.Models.destinationTest.VonageTsheet item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnVonageTsheetUpdated(Destination.Models.destinationTest.VonageTsheet item);
        partial void OnAfterVonageTsheetUpdated(Destination.Models.destinationTest.VonageTsheet item);

        public async Task<Destination.Models.destinationTest.VonageTsheet> UpdateVonageTsheet(int id, Destination.Models.destinationTest.VonageTsheet vonagetsheet)
        {
            OnVonageTsheetUpdated(vonagetsheet);

            var itemToUpdate = Context.VonageTsheets
                              .Where(i => i.Id == vonagetsheet.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(vonagetsheet);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterVonageTsheetUpdated(vonagetsheet);

            return vonagetsheet;
        }

        partial void OnVonageTsheetDeleted(Destination.Models.destinationTest.VonageTsheet item);
        partial void OnAfterVonageTsheetDeleted(Destination.Models.destinationTest.VonageTsheet item);

        public async Task<Destination.Models.destinationTest.VonageTsheet> DeleteVonageTsheet(int id)
        {
            var itemToDelete = Context.VonageTsheets
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnVonageTsheetDeleted(itemToDelete);


            Context.VonageTsheets.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterVonageTsheetDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportVrboErrorLogForBookingRequestsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboerrorlogforbookingrequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboerrorlogforbookingrequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVrboErrorLogForBookingRequestsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboerrorlogforbookingrequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboerrorlogforbookingrequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVrboErrorLogForBookingRequestsRead(ref IQueryable<Destination.Models.destinationTest.VrboErrorLogForBookingRequest> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VrboErrorLogForBookingRequest>> GetVrboErrorLogForBookingRequests(Query query = null)
        {
            var items = Context.VrboErrorLogForBookingRequests.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVrboErrorLogForBookingRequestsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVrboauditsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboaudits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboaudits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVrboauditsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboaudits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboaudits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVrboauditsRead(ref IQueryable<Destination.Models.destinationTest.Vrboaudit> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Vrboaudit>> GetVrboaudits(Query query = null)
        {
            var items = Context.Vrboaudits.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVrboauditsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnVrboauditGet(Destination.Models.destinationTest.Vrboaudit item);
        partial void OnGetVrboauditById(ref IQueryable<Destination.Models.destinationTest.Vrboaudit> items);


        public async Task<Destination.Models.destinationTest.Vrboaudit> GetVrboauditById(int id)
        {
            var items = Context.Vrboaudits
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetVrboauditById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnVrboauditGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnVrboauditCreated(Destination.Models.destinationTest.Vrboaudit item);
        partial void OnAfterVrboauditCreated(Destination.Models.destinationTest.Vrboaudit item);

        public async Task<Destination.Models.destinationTest.Vrboaudit> CreateVrboaudit(Destination.Models.destinationTest.Vrboaudit vrboaudit)
        {
            OnVrboauditCreated(vrboaudit);

            var existingItem = Context.Vrboaudits
                              .Where(i => i.Id == vrboaudit.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Vrboaudits.Add(vrboaudit);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(vrboaudit).State = EntityState.Detached;
                throw;
            }

            OnAfterVrboauditCreated(vrboaudit);

            return vrboaudit;
        }

        public async Task<Destination.Models.destinationTest.Vrboaudit> CancelVrboauditChanges(Destination.Models.destinationTest.Vrboaudit item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnVrboauditUpdated(Destination.Models.destinationTest.Vrboaudit item);
        partial void OnAfterVrboauditUpdated(Destination.Models.destinationTest.Vrboaudit item);

        public async Task<Destination.Models.destinationTest.Vrboaudit> UpdateVrboaudit(int id, Destination.Models.destinationTest.Vrboaudit vrboaudit)
        {
            OnVrboauditUpdated(vrboaudit);

            var itemToUpdate = Context.Vrboaudits
                              .Where(i => i.Id == vrboaudit.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(vrboaudit);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterVrboauditUpdated(vrboaudit);

            return vrboaudit;
        }

        partial void OnVrboauditDeleted(Destination.Models.destinationTest.Vrboaudit item);
        partial void OnAfterVrboauditDeleted(Destination.Models.destinationTest.Vrboaudit item);

        public async Task<Destination.Models.destinationTest.Vrboaudit> DeleteVrboaudit(int id)
        {
            var itemToDelete = Context.Vrboaudits
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnVrboauditDeleted(itemToDelete);


            Context.Vrboaudits.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterVrboauditDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportVrboimagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboimages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboimages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVrboimagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboimages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboimages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVrboimagesRead(ref IQueryable<Destination.Models.destinationTest.Vrboimage> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Vrboimage>> GetVrboimages(Query query = null)
        {
            var items = Context.Vrboimages.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVrboimagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnVrboimageGet(Destination.Models.destinationTest.Vrboimage item);
        partial void OnGetVrboimageById(ref IQueryable<Destination.Models.destinationTest.Vrboimage> items);


        public async Task<Destination.Models.destinationTest.Vrboimage> GetVrboimageById(int id)
        {
            var items = Context.Vrboimages
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetVrboimageById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnVrboimageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnVrboimageCreated(Destination.Models.destinationTest.Vrboimage item);
        partial void OnAfterVrboimageCreated(Destination.Models.destinationTest.Vrboimage item);

        public async Task<Destination.Models.destinationTest.Vrboimage> CreateVrboimage(Destination.Models.destinationTest.Vrboimage vrboimage)
        {
            OnVrboimageCreated(vrboimage);

            var existingItem = Context.Vrboimages
                              .Where(i => i.Id == vrboimage.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Vrboimages.Add(vrboimage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(vrboimage).State = EntityState.Detached;
                throw;
            }

            OnAfterVrboimageCreated(vrboimage);

            return vrboimage;
        }

        public async Task<Destination.Models.destinationTest.Vrboimage> CancelVrboimageChanges(Destination.Models.destinationTest.Vrboimage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnVrboimageUpdated(Destination.Models.destinationTest.Vrboimage item);
        partial void OnAfterVrboimageUpdated(Destination.Models.destinationTest.Vrboimage item);

        public async Task<Destination.Models.destinationTest.Vrboimage> UpdateVrboimage(int id, Destination.Models.destinationTest.Vrboimage vrboimage)
        {
            OnVrboimageUpdated(vrboimage);

            var itemToUpdate = Context.Vrboimages
                              .Where(i => i.Id == vrboimage.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(vrboimage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterVrboimageUpdated(vrboimage);

            return vrboimage;
        }

        partial void OnVrboimageDeleted(Destination.Models.destinationTest.Vrboimage item);
        partial void OnAfterVrboimageDeleted(Destination.Models.destinationTest.Vrboimage item);

        public async Task<Destination.Models.destinationTest.Vrboimage> DeleteVrboimage(int id)
        {
            var itemToDelete = Context.Vrboimages
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnVrboimageDeleted(itemToDelete);


            Context.Vrboimages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterVrboimageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportVrboImage1SToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboimage1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboimage1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVrboImage1SToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboimage1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboimage1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVrboImage1SRead(ref IQueryable<Destination.Models.destinationTest.VrboImage1> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VrboImage1>> GetVrboImage1S(Query query = null)
        {
            var items = Context.VrboImage1S.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVrboImage1SRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnVrboImage1Get(Destination.Models.destinationTest.VrboImage1 item);
        partial void OnGetVrboImage1ById(ref IQueryable<Destination.Models.destinationTest.VrboImage1> items);


        public async Task<Destination.Models.destinationTest.VrboImage1> GetVrboImage1ById(int id)
        {
            var items = Context.VrboImage1S
                              .AsNoTracking()
                              .Where(i => i.Id == id);

 
            OnGetVrboImage1ById(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnVrboImage1Get(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnVrboImage1Created(Destination.Models.destinationTest.VrboImage1 item);
        partial void OnAfterVrboImage1Created(Destination.Models.destinationTest.VrboImage1 item);

        public async Task<Destination.Models.destinationTest.VrboImage1> CreateVrboImage1(Destination.Models.destinationTest.VrboImage1 vrboimage1)
        {
            OnVrboImage1Created(vrboimage1);

            var existingItem = Context.VrboImage1S
                              .Where(i => i.Id == vrboimage1.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.VrboImage1S.Add(vrboimage1);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(vrboimage1).State = EntityState.Detached;
                throw;
            }

            OnAfterVrboImage1Created(vrboimage1);

            return vrboimage1;
        }

        public async Task<Destination.Models.destinationTest.VrboImage1> CancelVrboImage1Changes(Destination.Models.destinationTest.VrboImage1 item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnVrboImage1Updated(Destination.Models.destinationTest.VrboImage1 item);
        partial void OnAfterVrboImage1Updated(Destination.Models.destinationTest.VrboImage1 item);

        public async Task<Destination.Models.destinationTest.VrboImage1> UpdateVrboImage1(int id, Destination.Models.destinationTest.VrboImage1 vrboimage1)
        {
            OnVrboImage1Updated(vrboimage1);

            var itemToUpdate = Context.VrboImage1S
                              .Where(i => i.Id == vrboimage1.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(vrboimage1);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterVrboImage1Updated(vrboimage1);

            return vrboimage1;
        }

        partial void OnVrboImage1Deleted(Destination.Models.destinationTest.VrboImage1 item);
        partial void OnAfterVrboImage1Deleted(Destination.Models.destinationTest.VrboImage1 item);

        public async Task<Destination.Models.destinationTest.VrboImage1> DeleteVrboImage1(int id)
        {
            var itemToDelete = Context.VrboImage1S
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnVrboImage1Deleted(itemToDelete);


            Context.VrboImage1S.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterVrboImage1Deleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportVrboimageDetailsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboimagedetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboimagedetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVrboimageDetailsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboimagedetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboimagedetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVrboimageDetailsRead(ref IQueryable<Destination.Models.destinationTest.VrboimageDetail> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VrboimageDetail>> GetVrboimageDetails(Query query = null)
        {
            var items = Context.VrboimageDetails.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVrboimageDetailsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnVrboimageDetailGet(Destination.Models.destinationTest.VrboimageDetail item);
        partial void OnGetVrboimageDetailByImageId(ref IQueryable<Destination.Models.destinationTest.VrboimageDetail> items);


        public async Task<Destination.Models.destinationTest.VrboimageDetail> GetVrboimageDetailByImageId(int imageid)
        {
            var items = Context.VrboimageDetails
                              .AsNoTracking()
                              .Where(i => i.ImageId == imageid);

 
            OnGetVrboimageDetailByImageId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnVrboimageDetailGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnVrboimageDetailCreated(Destination.Models.destinationTest.VrboimageDetail item);
        partial void OnAfterVrboimageDetailCreated(Destination.Models.destinationTest.VrboimageDetail item);

        public async Task<Destination.Models.destinationTest.VrboimageDetail> CreateVrboimageDetail(Destination.Models.destinationTest.VrboimageDetail vrboimagedetail)
        {
            OnVrboimageDetailCreated(vrboimagedetail);

            var existingItem = Context.VrboimageDetails
                              .Where(i => i.ImageId == vrboimagedetail.ImageId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.VrboimageDetails.Add(vrboimagedetail);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(vrboimagedetail).State = EntityState.Detached;
                throw;
            }

            OnAfterVrboimageDetailCreated(vrboimagedetail);

            return vrboimagedetail;
        }

        public async Task<Destination.Models.destinationTest.VrboimageDetail> CancelVrboimageDetailChanges(Destination.Models.destinationTest.VrboimageDetail item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnVrboimageDetailUpdated(Destination.Models.destinationTest.VrboimageDetail item);
        partial void OnAfterVrboimageDetailUpdated(Destination.Models.destinationTest.VrboimageDetail item);

        public async Task<Destination.Models.destinationTest.VrboimageDetail> UpdateVrboimageDetail(int imageid, Destination.Models.destinationTest.VrboimageDetail vrboimagedetail)
        {
            OnVrboimageDetailUpdated(vrboimagedetail);

            var itemToUpdate = Context.VrboimageDetails
                              .Where(i => i.ImageId == vrboimagedetail.ImageId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(vrboimagedetail);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterVrboimageDetailUpdated(vrboimagedetail);

            return vrboimagedetail;
        }

        partial void OnVrboimageDetailDeleted(Destination.Models.destinationTest.VrboimageDetail item);
        partial void OnAfterVrboimageDetailDeleted(Destination.Models.destinationTest.VrboimageDetail item);

        public async Task<Destination.Models.destinationTest.VrboimageDetail> DeleteVrboimageDetail(int imageid)
        {
            var itemToDelete = Context.VrboimageDetails
                              .Where(i => i.ImageId == imageid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnVrboimageDetailDeleted(itemToDelete);


            Context.VrboimageDetails.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterVrboimageDetailDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportVrboImageDetailBackupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboimagedetailbackups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboimagedetailbackups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVrboImageDetailBackupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboimagedetailbackups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboimagedetailbackups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVrboImageDetailBackupsRead(ref IQueryable<Destination.Models.destinationTest.VrboImageDetailBackup> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VrboImageDetailBackup>> GetVrboImageDetailBackups(Query query = null)
        {
            var items = Context.VrboImageDetailBackups.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVrboImageDetailBackupsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnVrboImageDetailBackupGet(Destination.Models.destinationTest.VrboImageDetailBackup item);
        partial void OnGetVrboImageDetailBackupByImageId(ref IQueryable<Destination.Models.destinationTest.VrboImageDetailBackup> items);


        public async Task<Destination.Models.destinationTest.VrboImageDetailBackup> GetVrboImageDetailBackupByImageId(int imageid)
        {
            var items = Context.VrboImageDetailBackups
                              .AsNoTracking()
                              .Where(i => i.ImageId == imageid);

 
            OnGetVrboImageDetailBackupByImageId(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnVrboImageDetailBackupGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnVrboImageDetailBackupCreated(Destination.Models.destinationTest.VrboImageDetailBackup item);
        partial void OnAfterVrboImageDetailBackupCreated(Destination.Models.destinationTest.VrboImageDetailBackup item);

        public async Task<Destination.Models.destinationTest.VrboImageDetailBackup> CreateVrboImageDetailBackup(Destination.Models.destinationTest.VrboImageDetailBackup vrboimagedetailbackup)
        {
            OnVrboImageDetailBackupCreated(vrboimagedetailbackup);

            var existingItem = Context.VrboImageDetailBackups
                              .Where(i => i.ImageId == vrboimagedetailbackup.ImageId)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.VrboImageDetailBackups.Add(vrboimagedetailbackup);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(vrboimagedetailbackup).State = EntityState.Detached;
                throw;
            }

            OnAfterVrboImageDetailBackupCreated(vrboimagedetailbackup);

            return vrboimagedetailbackup;
        }

        public async Task<Destination.Models.destinationTest.VrboImageDetailBackup> CancelVrboImageDetailBackupChanges(Destination.Models.destinationTest.VrboImageDetailBackup item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnVrboImageDetailBackupUpdated(Destination.Models.destinationTest.VrboImageDetailBackup item);
        partial void OnAfterVrboImageDetailBackupUpdated(Destination.Models.destinationTest.VrboImageDetailBackup item);

        public async Task<Destination.Models.destinationTest.VrboImageDetailBackup> UpdateVrboImageDetailBackup(int imageid, Destination.Models.destinationTest.VrboImageDetailBackup vrboimagedetailbackup)
        {
            OnVrboImageDetailBackupUpdated(vrboimagedetailbackup);

            var itemToUpdate = Context.VrboImageDetailBackups
                              .Where(i => i.ImageId == vrboimagedetailbackup.ImageId)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(vrboimagedetailbackup);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterVrboImageDetailBackupUpdated(vrboimagedetailbackup);

            return vrboimagedetailbackup;
        }

        partial void OnVrboImageDetailBackupDeleted(Destination.Models.destinationTest.VrboImageDetailBackup item);
        partial void OnAfterVrboImageDetailBackupDeleted(Destination.Models.destinationTest.VrboImageDetailBackup item);

        public async Task<Destination.Models.destinationTest.VrboImageDetailBackup> DeleteVrboImageDetailBackup(int imageid)
        {
            var itemToDelete = Context.VrboImageDetailBackups
                              .Where(i => i.ImageId == imageid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnVrboImageDetailBackupDeleted(itemToDelete);


            Context.VrboImageDetailBackups.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterVrboImageDetailBackupDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportVrboPropertiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboproperties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboproperties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVrboPropertiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vrboproperties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vrboproperties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVrboPropertiesRead(ref IQueryable<Destination.Models.destinationTest.VrboProperty> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VrboProperty>> GetVrboProperties(Query query = null)
        {
            var items = Context.VrboProperties.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVrboPropertiesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnVrboPropertyGet(Destination.Models.destinationTest.VrboProperty item);
        partial void OnGetVrboPropertyByPid(ref IQueryable<Destination.Models.destinationTest.VrboProperty> items);


        public async Task<Destination.Models.destinationTest.VrboProperty> GetVrboPropertyByPid(int pid)
        {
            var items = Context.VrboProperties
                              .AsNoTracking()
                              .Where(i => i.Pid == pid);

 
            OnGetVrboPropertyByPid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnVrboPropertyGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnVrboPropertyCreated(Destination.Models.destinationTest.VrboProperty item);
        partial void OnAfterVrboPropertyCreated(Destination.Models.destinationTest.VrboProperty item);

        public async Task<Destination.Models.destinationTest.VrboProperty> CreateVrboProperty(Destination.Models.destinationTest.VrboProperty vrboproperty)
        {
            OnVrboPropertyCreated(vrboproperty);

            var existingItem = Context.VrboProperties
                              .Where(i => i.Pid == vrboproperty.Pid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.VrboProperties.Add(vrboproperty);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(vrboproperty).State = EntityState.Detached;
                throw;
            }

            OnAfterVrboPropertyCreated(vrboproperty);

            return vrboproperty;
        }

        public async Task<Destination.Models.destinationTest.VrboProperty> CancelVrboPropertyChanges(Destination.Models.destinationTest.VrboProperty item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnVrboPropertyUpdated(Destination.Models.destinationTest.VrboProperty item);
        partial void OnAfterVrboPropertyUpdated(Destination.Models.destinationTest.VrboProperty item);

        public async Task<Destination.Models.destinationTest.VrboProperty> UpdateVrboProperty(int pid, Destination.Models.destinationTest.VrboProperty vrboproperty)
        {
            OnVrboPropertyUpdated(vrboproperty);

            var itemToUpdate = Context.VrboProperties
                              .Where(i => i.Pid == vrboproperty.Pid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(vrboproperty);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterVrboPropertyUpdated(vrboproperty);

            return vrboproperty;
        }

        partial void OnVrboPropertyDeleted(Destination.Models.destinationTest.VrboProperty item);
        partial void OnAfterVrboPropertyDeleted(Destination.Models.destinationTest.VrboProperty item);

        public async Task<Destination.Models.destinationTest.VrboProperty> DeleteVrboProperty(int pid)
        {
            var itemToDelete = Context.VrboProperties
                              .Where(i => i.Pid == pid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnVrboPropertyDeleted(itemToDelete);


            Context.VrboProperties.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterVrboPropertyDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportVwCleanedStatusCheckOutTodaysToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwcleanedstatuscheckouttodays/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwcleanedstatuscheckouttodays/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwCleanedStatusCheckOutTodaysToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwcleanedstatuscheckouttodays/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwcleanedstatuscheckouttodays/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwCleanedStatusCheckOutTodaysRead(ref IQueryable<Destination.Models.destinationTest.VwCleanedStatusCheckOutToday> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwCleanedStatusCheckOutToday>> GetVwCleanedStatusCheckOutTodays(Query query = null)
        {
            var items = Context.VwCleanedStatusCheckOutTodays.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwCleanedStatusCheckOutTodaysRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwCurrentlyOccupiedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwcurrentlyoccupieds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwcurrentlyoccupieds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwCurrentlyOccupiedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwcurrentlyoccupieds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwcurrentlyoccupieds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwCurrentlyOccupiedsRead(ref IQueryable<Destination.Models.destinationTest.VwCurrentlyOccupied> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwCurrentlyOccupied>> GetVwCurrentlyOccupieds(Query query = null)
        {
            var items = Context.VwCurrentlyOccupieds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwCurrentlyOccupiedsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwFutureBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwfuturebookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwfuturebookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwFutureBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwfuturebookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwfuturebookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwFutureBookingsRead(ref IQueryable<Destination.Models.destinationTest.VwFutureBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwFutureBooking>> GetVwFutureBookings(Query query = null)
        {
            var items = Context.VwFutureBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwFutureBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetCommMaxesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetcommmaxes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetcommmaxes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetCommMaxesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetcommmaxes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetcommmaxes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetCommMaxesRead(ref IQueryable<Destination.Models.destinationTest.VwGetCommMax> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetCommMax>> GetVwGetCommMaxes(Query query = null)
        {
            var items = Context.VwGetCommMaxes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetCommMaxesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetMinuteDifferencesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetminutedifferences/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetminutedifferences/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetMinuteDifferencesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetminutedifferences/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetminutedifferences/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetMinuteDifferencesRead(ref IQueryable<Destination.Models.destinationTest.VwGetMinuteDifference> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetMinuteDifference>> GetVwGetMinuteDifferences(Query query = null)
        {
            var items = Context.VwGetMinuteDifferences.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetMinuteDifferencesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetTrackedUsersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettrackedusers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettrackedusers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetTrackedUsersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettrackedusers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettrackedusers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetTrackedUsersRead(ref IQueryable<Destination.Models.destinationTest.VwGetTrackedUser> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetTrackedUser>> GetVwGetTrackedUsers(Query query = null)
        {
            var items = Context.VwGetTrackedUsers.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetTrackedUsersRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetAirbnbDepositsInfosToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetairbnbdepositsinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetairbnbdepositsinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetAirbnbDepositsInfosToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetairbnbdepositsinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetairbnbdepositsinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetAirbnbDepositsInfosRead(ref IQueryable<Destination.Models.destinationTest.VwGetAirbnbDepositsInfo> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetAirbnbDepositsInfo>> GetVwGetAirbnbDepositsInfos(Query query = null)
        {
            var items = Context.VwGetAirbnbDepositsInfos.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetAirbnbDepositsInfosRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetAllPropertyStatusesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetallpropertystatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetallpropertystatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetAllPropertyStatusesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetallpropertystatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetallpropertystatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetAllPropertyStatusesRead(ref IQueryable<Destination.Models.destinationTest.VwGetAllPropertyStatus> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetAllPropertyStatus>> GetVwGetAllPropertyStatuses(Query query = null)
        {
            var items = Context.VwGetAllPropertyStatuses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetAllPropertyStatusesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetClosestBookingWithCleaningStatusesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetclosestbookingwithcleaningstatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetclosestbookingwithcleaningstatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetClosestBookingWithCleaningStatusesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetclosestbookingwithcleaningstatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetclosestbookingwithcleaningstatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetClosestBookingWithCleaningStatusesRead(ref IQueryable<Destination.Models.destinationTest.VwGetClosestBookingWithCleaningStatus> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetClosestBookingWithCleaningStatus>> GetVwGetClosestBookingWithCleaningStatuses(Query query = null)
        {
            var items = Context.VwGetClosestBookingWithCleaningStatuses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetClosestBookingWithCleaningStatusesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetclosestwithCleanersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetclosestwithcleaners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetclosestwithcleaners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetclosestwithCleanersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetclosestwithcleaners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetclosestwithcleaners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetclosestwithCleanersRead(ref IQueryable<Destination.Models.destinationTest.VwGetclosestwithCleaner> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetclosestwithCleaner>> GetVwGetclosestwithCleaners(Query query = null)
        {
            var items = Context.VwGetclosestwithCleaners.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetclosestwithCleanersRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetclosestwithDatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetclosestwithdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetclosestwithdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetclosestwithDatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetclosestwithdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetclosestwithdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetclosestwithDatesRead(ref IQueryable<Destination.Models.destinationTest.VwGetclosestwithDate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetclosestwithDate>> GetVwGetclosestwithDates(Query query = null)
        {
            var items = Context.VwGetclosestwithDates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetclosestwithDatesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetCommMaxes1ToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetcommmaxes1/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetcommmaxes1/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetCommMaxes1ToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetcommmaxes1/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetcommmaxes1/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetCommMaxes1Read(ref IQueryable<Destination.Models.destinationTest.VwGetCommMax1> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetCommMax1>> GetVwGetCommMaxes1(Query query = null)
        {
            var items = Context.VwGetCommMaxes1.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetCommMaxes1Read(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetDoorCodeLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetdoorcodelogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetdoorcodelogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetDoorCodeLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetdoorcodelogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetdoorcodelogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetDoorCodeLogsRead(ref IQueryable<Destination.Models.destinationTest.VwGetDoorCodeLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetDoorCodeLog>> GetVwGetDoorCodeLogs(Query query = null)
        {
            var items = Context.VwGetDoorCodeLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetDoorCodeLogsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetInquiryDatesForBookingsDashboardQueriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetinquirydatesforbookingsdashboardqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetinquirydatesforbookingsdashboardqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetInquiryDatesForBookingsDashboardQueriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetinquirydatesforbookingsdashboardqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetinquirydatesforbookingsdashboardqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetInquiryDatesForBookingsDashboardQueriesRead(ref IQueryable<Destination.Models.destinationTest.VwGetInquiryDatesForBookingsDashboardQuery> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetInquiryDatesForBookingsDashboardQuery>> GetVwGetInquiryDatesForBookingsDashboardQueries(Query query = null)
        {
            var items = Context.VwGetInquiryDatesForBookingsDashboardQueries.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetInquiryDatesForBookingsDashboardQueriesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetInspectionDateMgtForAllActivePropsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetinspectiondatemgtforallactiveprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetinspectiondatemgtforallactiveprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetInspectionDateMgtForAllActivePropsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetinspectiondatemgtforallactiveprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetinspectiondatemgtforallactiveprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetInspectionDateMgtForAllActivePropsRead(ref IQueryable<Destination.Models.destinationTest.VwGetInspectionDateMgtForAllActiveProp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetInspectionDateMgtForAllActiveProp>> GetVwGetInspectionDateMgtForAllActiveProps(Query query = null)
        {
            var items = Context.VwGetInspectionDateMgtForAllActiveProps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetInspectionDateMgtForAllActivePropsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetlast3MonthsTotalsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlast3monthstotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlast3monthstotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetlast3MonthsTotalsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlast3monthstotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlast3monthstotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetlast3MonthsTotalsRead(ref IQueryable<Destination.Models.destinationTest.VwGetlast3MonthsTotal> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetlast3MonthsTotal>> GetVwGetlast3MonthsTotals(Query query = null)
        {
            var items = Context.VwGetlast3MonthsTotals.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetlast3MonthsTotalsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetlast3MonthsTotalPiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlast3monthstotalpies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlast3monthstotalpies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetlast3MonthsTotalPiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlast3monthstotalpies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlast3monthstotalpies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetlast3MonthsTotalPiesRead(ref IQueryable<Destination.Models.destinationTest.VwGetlast3MonthsTotalPy> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetlast3MonthsTotalPy>> GetVwGetlast3MonthsTotalPies(Query query = null)
        {
            var items = Context.VwGetlast3MonthsTotalPies.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetlast3MonthsTotalPiesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetlast6MonthsTotalsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlast6monthstotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlast6monthstotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetlast6MonthsTotalsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlast6monthstotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlast6monthstotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetlast6MonthsTotalsRead(ref IQueryable<Destination.Models.destinationTest.VwGetlast6MonthsTotal> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetlast6MonthsTotal>> GetVwGetlast6MonthsTotals(Query query = null)
        {
            var items = Context.VwGetlast6MonthsTotals.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetlast6MonthsTotalsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetlast6MonthsTotalPiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlast6monthstotalpies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlast6monthstotalpies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetlast6MonthsTotalPiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlast6monthstotalpies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlast6monthstotalpies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetlast6MonthsTotalPiesRead(ref IQueryable<Destination.Models.destinationTest.VwGetlast6MonthsTotalPy> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetlast6MonthsTotalPy>> GetVwGetlast6MonthsTotalPies(Query query = null)
        {
            var items = Context.VwGetlast6MonthsTotalPies.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetlast6MonthsTotalPiesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetLastCleanedDateForAllActivePropsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastcleaneddateforallactiveprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastcleaneddateforallactiveprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetLastCleanedDateForAllActivePropsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastcleaneddateforallactiveprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastcleaneddateforallactiveprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetLastCleanedDateForAllActivePropsRead(ref IQueryable<Destination.Models.destinationTest.VwGetLastCleanedDateForAllActiveProp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetLastCleanedDateForAllActiveProp>> GetVwGetLastCleanedDateForAllActiveProps(Query query = null)
        {
            var items = Context.VwGetLastCleanedDateForAllActiveProps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetLastCleanedDateForAllActivePropsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetLastCleanersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastcleaners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastcleaners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetLastCleanersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastcleaners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastcleaners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetLastCleanersRead(ref IQueryable<Destination.Models.destinationTest.VwGetLastCleaner> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetLastCleaner>> GetVwGetLastCleaners(Query query = null)
        {
            var items = Context.VwGetLastCleaners.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetLastCleanersRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetLastDateCompletedFromExpensesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastdatecompletedfromexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastdatecompletedfromexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetLastDateCompletedFromExpensesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastdatecompletedfromexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastdatecompletedfromexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetLastDateCompletedFromExpensesRead(ref IQueryable<Destination.Models.destinationTest.VwGetLastDateCompletedFromExpense> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetLastDateCompletedFromExpense>> GetVwGetLastDateCompletedFromExpenses(Query query = null)
        {
            var items = Context.VwGetLastDateCompletedFromExpenses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetLastDateCompletedFromExpensesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetLastInspectedDateForAllActivePropsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastinspecteddateforallactiveprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastinspecteddateforallactiveprops/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetLastInspectedDateForAllActivePropsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastinspecteddateforallactiveprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastinspecteddateforallactiveprops/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetLastInspectedDateForAllActivePropsRead(ref IQueryable<Destination.Models.destinationTest.VwGetLastInspectedDateForAllActiveProp> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetLastInspectedDateForAllActiveProp>> GetVwGetLastInspectedDateForAllActiveProps(Query query = null)
        {
            var items = Context.VwGetLastInspectedDateForAllActiveProps.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetLastInspectedDateForAllActivePropsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetLastRateChangedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastratechangeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastratechangeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetLastRateChangedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastratechangeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastratechangeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetLastRateChangedsRead(ref IQueryable<Destination.Models.destinationTest.VwGetLastRateChanged> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetLastRateChanged>> GetVwGetLastRateChangeds(Query query = null)
        {
            var items = Context.VwGetLastRateChangeds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetLastRateChangedsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetlastyearTotalsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastyeartotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastyeartotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetlastyearTotalsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastyeartotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastyeartotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetlastyearTotalsRead(ref IQueryable<Destination.Models.destinationTest.VwGetlastyearTotal> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetlastyearTotal>> GetVwGetlastyearTotals(Query query = null)
        {
            var items = Context.VwGetlastyearTotals.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetlastyearTotalsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetlastyearTotalPiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastyeartotalpies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastyeartotalpies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetlastyearTotalPiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetlastyeartotalpies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetlastyeartotalpies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetlastyearTotalPiesRead(ref IQueryable<Destination.Models.destinationTest.VwGetlastyearTotalPy> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetlastyearTotalPy>> GetVwGetlastyearTotalPies(Query query = null)
        {
            var items = Context.VwGetlastyearTotalPies.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetlastyearTotalPiesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetNetSumsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetnetsums/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetnetsums/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetNetSumsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetnetsums/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetnetsums/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetNetSumsRead(ref IQueryable<Destination.Models.destinationTest.VwGetNetSum> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetNetSum>> GetVwGetNetSums(Query query = null)
        {
            var items = Context.VwGetNetSums.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetNetSumsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetNextBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetnextbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetnextbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetNextBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetnextbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetnextbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetNextBookingsRead(ref IQueryable<Destination.Models.destinationTest.VwGetNextBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetNextBooking>> GetVwGetNextBookings(Query query = null)
        {
            var items = Context.VwGetNextBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetNextBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetNextOwnerBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetnextownerbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetnextownerbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetNextOwnerBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetnextownerbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetnextownerbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetNextOwnerBookingsRead(ref IQueryable<Destination.Models.destinationTest.VwGetNextOwnerBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetNextOwnerBooking>> GetVwGetNextOwnerBookings(Query query = null)
        {
            var items = Context.VwGetNextOwnerBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetNextOwnerBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetPropClosestDatewithCleanersToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropclosestdatewithcleaners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropclosestdatewithcleaners/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetPropClosestDatewithCleanersToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropclosestdatewithcleaners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropclosestdatewithcleaners/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetPropClosestDatewithCleanersRead(ref IQueryable<Destination.Models.destinationTest.VwGetPropClosestDatewithCleaner> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetPropClosestDatewithCleaner>> GetVwGetPropClosestDatewithCleaners(Query query = null)
        {
            var items = Context.VwGetPropClosestDatewithCleaners.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetPropClosestDatewithCleanersRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetPropertiesWithoutSpacesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropertieswithoutspaces/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropertieswithoutspaces/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetPropertiesWithoutSpacesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropertieswithoutspaces/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropertieswithoutspaces/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetPropertiesWithoutSpacesRead(ref IQueryable<Destination.Models.destinationTest.VwGetPropertiesWithoutSpace> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetPropertiesWithoutSpace>> GetVwGetPropertiesWithoutSpaces(Query query = null)
        {
            var items = Context.VwGetPropertiesWithoutSpaces.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetPropertiesWithoutSpacesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetPropertyExpensesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropertyexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropertyexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetPropertyExpensesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropertyexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropertyexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetPropertyExpensesRead(ref IQueryable<Destination.Models.destinationTest.VwGetPropertyExpense> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetPropertyExpense>> GetVwGetPropertyExpenses(Query query = null)
        {
            var items = Context.VwGetPropertyExpenses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetPropertyExpensesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetPropertyStatusesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropertystatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropertystatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetPropertyStatusesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropertystatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropertystatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetPropertyStatusesRead(ref IQueryable<Destination.Models.destinationTest.VwGetPropertyStatus> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetPropertyStatus>> GetVwGetPropertyStatuses(Query query = null)
        {
            var items = Context.VwGetPropertyStatuses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetPropertyStatusesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetPropertyStatusOnlyMaintenanceDeptsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropertystatusonlymaintenancedepts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropertystatusonlymaintenancedepts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetPropertyStatusOnlyMaintenanceDeptsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropertystatusonlymaintenancedepts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropertystatusonlymaintenancedepts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetPropertyStatusOnlyMaintenanceDeptsRead(ref IQueryable<Destination.Models.destinationTest.VwGetPropertyStatusOnlyMaintenanceDept> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetPropertyStatusOnlyMaintenanceDept>> GetVwGetPropertyStatusOnlyMaintenanceDepts(Query query = null)
        {
            var items = Context.VwGetPropertyStatusOnlyMaintenanceDepts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetPropertyStatusOnlyMaintenanceDeptsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetPropListWithControlLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetproplistwithcontrollogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetproplistwithcontrollogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetPropListWithControlLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetproplistwithcontrollogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetproplistwithcontrollogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetPropListWithControlLogsRead(ref IQueryable<Destination.Models.destinationTest.VwGetPropListWithControlLog> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetPropListWithControlLog>> GetVwGetPropListWithControlLogs(Query query = null)
        {
            var items = Context.VwGetPropListWithControlLogs.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetPropListWithControlLogsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetPropReviewCountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropreviewcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropreviewcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetPropReviewCountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetpropreviewcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetpropreviewcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetPropReviewCountsRead(ref IQueryable<Destination.Models.destinationTest.VwGetPropReviewCount> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetPropReviewCount>> GetVwGetPropReviewCounts(Query query = null)
        {
            var items = Context.VwGetPropReviewCounts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetPropReviewCountsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetPrpertiesHotOpensToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetprpertieshotopens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetprpertieshotopens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetPrpertiesHotOpensToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetprpertieshotopens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetprpertieshotopens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetPrpertiesHotOpensRead(ref IQueryable<Destination.Models.destinationTest.VwGetPrpertiesHotOpen> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetPrpertiesHotOpen>> GetVwGetPrpertiesHotOpens(Query query = null)
        {
            var items = Context.VwGetPrpertiesHotOpens.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetPrpertiesHotOpensRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetSnapshotTotalsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetsnapshottotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetsnapshottotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetSnapshotTotalsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetsnapshottotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetsnapshottotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetSnapshotTotalsRead(ref IQueryable<Destination.Models.destinationTest.VwGetSnapshotTotal> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetSnapshotTotal>> GetVwGetSnapshotTotals(Query query = null)
        {
            var items = Context.VwGetSnapshotTotals.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetSnapshotTotalsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetSnapshotTotalPiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetsnapshottotalpies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetsnapshottotalpies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetSnapshotTotalPiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetsnapshottotalpies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetsnapshottotalpies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetSnapshotTotalPiesRead(ref IQueryable<Destination.Models.destinationTest.VwGetSnapshotTotalPy> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetSnapshotTotalPy>> GetVwGetSnapshotTotalPies(Query query = null)
        {
            var items = Context.VwGetSnapshotTotalPies.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetSnapshotTotalPiesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetTotalBkngsForBookingsDashboardQueriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalbkngsforbookingsdashboardqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalbkngsforbookingsdashboardqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetTotalBkngsForBookingsDashboardQueriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalbkngsforbookingsdashboardqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalbkngsforbookingsdashboardqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetTotalBkngsForBookingsDashboardQueriesRead(ref IQueryable<Destination.Models.destinationTest.VwGetTotalBkngsForBookingsDashboardQuery> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetTotalBkngsForBookingsDashboardQuery>> GetVwGetTotalBkngsForBookingsDashboardQueries(Query query = null)
        {
            var items = Context.VwGetTotalBkngsForBookingsDashboardQueries.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetTotalBkngsForBookingsDashboardQueriesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetTotalExpensesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetTotalExpensesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetTotalExpensesRead(ref IQueryable<Destination.Models.destinationTest.VwGetTotalExpense> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetTotalExpense>> GetVwGetTotalExpenses(Query query = null)
        {
            var items = Context.VwGetTotalExpenses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetTotalExpensesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetTotalExpensesOnlyMaintenanceDeptsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalexpensesonlymaintenancedepts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalexpensesonlymaintenancedepts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetTotalExpensesOnlyMaintenanceDeptsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalexpensesonlymaintenancedepts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalexpensesonlymaintenancedepts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetTotalExpensesOnlyMaintenanceDeptsRead(ref IQueryable<Destination.Models.destinationTest.VwGetTotalExpensesOnlyMaintenanceDept> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetTotalExpensesOnlyMaintenanceDept>> GetVwGetTotalExpensesOnlyMaintenanceDepts(Query query = null)
        {
            var items = Context.VwGetTotalExpensesOnlyMaintenanceDepts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetTotalExpensesOnlyMaintenanceDeptsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetTotalExpensesFilteredsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalexpensesfiltereds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalexpensesfiltereds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetTotalExpensesFilteredsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalexpensesfiltereds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalexpensesfiltereds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetTotalExpensesFilteredsRead(ref IQueryable<Destination.Models.destinationTest.VwGetTotalExpensesFiltered> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetTotalExpensesFiltered>> GetVwGetTotalExpensesFiltereds(Query query = null)
        {
            var items = Context.VwGetTotalExpensesFiltereds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetTotalExpensesFilteredsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetTotalInquiriesForBookingsDashboardQueriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalinquiriesforbookingsdashboardqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalinquiriesforbookingsdashboardqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetTotalInquiriesForBookingsDashboardQueriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettotalinquiriesforbookingsdashboardqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettotalinquiriesforbookingsdashboardqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetTotalInquiriesForBookingsDashboardQueriesRead(ref IQueryable<Destination.Models.destinationTest.VwGetTotalInquiriesForBookingsDashboardQuery> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetTotalInquiriesForBookingsDashboardQuery>> GetVwGetTotalInquiriesForBookingsDashboardQueries(Query query = null)
        {
            var items = Context.VwGetTotalInquiriesForBookingsDashboardQueries.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetTotalInquiriesForBookingsDashboardQueriesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetTrackedUsers1ToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettrackedusers1/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettrackedusers1/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetTrackedUsers1ToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgettrackedusers1/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgettrackedusers1/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetTrackedUsers1Read(ref IQueryable<Destination.Models.destinationTest.VwGetTrackedUser1> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetTrackedUser1>> GetVwGetTrackedUsers1(Query query = null)
        {
            var items = Context.VwGetTrackedUsers1.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetTrackedUsers1Read(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetUniqueTenantsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetuniquetenants/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetuniquetenants/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetUniqueTenantsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetuniquetenants/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetuniquetenants/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetUniqueTenantsRead(ref IQueryable<Destination.Models.destinationTest.VwGetUniqueTenant> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetUniqueTenant>> GetVwGetUniqueTenants(Query query = null)
        {
            var items = Context.VwGetUniqueTenants.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetUniqueTenantsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetWorkingBookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetworkingbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetworkingbookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetWorkingBookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetworkingbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetworkingbookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetWorkingBookingsRead(ref IQueryable<Destination.Models.destinationTest.VwGetWorkingBooking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetWorkingBooking>> GetVwGetWorkingBookings(Query query = null)
        {
            var items = Context.VwGetWorkingBookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetWorkingBookingsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwGetYearWiseTotalsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetyearwisetotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetyearwisetotals/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwGetYearWiseTotalsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwgetyearwisetotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwgetyearwisetotals/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwGetYearWiseTotalsRead(ref IQueryable<Destination.Models.destinationTest.VwGetYearWiseTotal> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwGetYearWiseTotal>> GetVwGetYearWiseTotals(Query query = null)
        {
            var items = Context.VwGetYearWiseTotals.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwGetYearWiseTotalsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwLastBookedOnsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwlastbookedons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwlastbookedons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwLastBookedOnsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwlastbookedons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwlastbookedons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwLastBookedOnsRead(ref IQueryable<Destination.Models.destinationTest.VwLastBookedOn> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwLastBookedOn>> GetVwLastBookedOns(Query query = null)
        {
            var items = Context.VwLastBookedOns.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwLastBookedOnsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwLastDateChangedOfLockBoxesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwlastdatechangedoflockboxes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwlastdatechangedoflockboxes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwLastDateChangedOfLockBoxesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwlastdatechangedoflockboxes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwlastdatechangedoflockboxes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwLastDateChangedOfLockBoxesRead(ref IQueryable<Destination.Models.destinationTest.VwLastDateChangedOfLockBox> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwLastDateChangedOfLockBox>> GetVwLastDateChangedOfLockBoxes(Query query = null)
        {
            var items = Context.VwLastDateChangedOfLockBoxes.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwLastDateChangedOfLockBoxesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwLastDoorCodeChangedPerPropertiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwlastdoorcodechangedperproperties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwlastdoorcodechangedperproperties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwLastDoorCodeChangedPerPropertiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwlastdoorcodechangedperproperties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwlastdoorcodechangedperproperties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwLastDoorCodeChangedPerPropertiesRead(ref IQueryable<Destination.Models.destinationTest.VwLastDoorCodeChangedPerProperty> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwLastDoorCodeChangedPerProperty>> GetVwLastDoorCodeChangedPerProperties(Query query = null)
        {
            var items = Context.VwLastDoorCodeChangedPerProperties.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwLastDoorCodeChangedPerPropertiesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwLastRecordedOwnerCommunicationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwlastrecordedownercommunications/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwlastrecordedownercommunications/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwLastRecordedOwnerCommunicationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwlastrecordedownercommunications/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwlastrecordedownercommunications/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwLastRecordedOwnerCommunicationsRead(ref IQueryable<Destination.Models.destinationTest.VwLastRecordedOwnerCommunication> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwLastRecordedOwnerCommunication>> GetVwLastRecordedOwnerCommunications(Query query = null)
        {
            var items = Context.VwLastRecordedOwnerCommunications.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwLastRecordedOwnerCommunicationsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwMaintenanceNextDateFromsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwmaintenancenextdatefroms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwmaintenancenextdatefroms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwMaintenanceNextDateFromsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwmaintenancenextdatefroms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwmaintenancenextdatefroms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwMaintenanceNextDateFromsRead(ref IQueryable<Destination.Models.destinationTest.VwMaintenanceNextDateFrom> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwMaintenanceNextDateFrom>> GetVwMaintenanceNextDateFroms(Query query = null)
        {
            var items = Context.VwMaintenanceNextDateFroms.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwMaintenanceNextDateFromsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwNetPaymentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwnetpayments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwnetpayments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwNetPaymentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwnetpayments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwnetpayments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwNetPaymentsRead(ref IQueryable<Destination.Models.destinationTest.VwNetPayment> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwNetPayment>> GetVwNetPayments(Query query = null)
        {
            var items = Context.VwNetPayments.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwNetPaymentsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwPaymentSummariesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwpaymentsummaries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwpaymentsummaries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwPaymentSummariesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwpaymentsummaries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwpaymentsummaries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwPaymentSummariesRead(ref IQueryable<Destination.Models.destinationTest.VwPaymentSummary> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwPaymentSummary>> GetVwPaymentSummaries(Query query = null)
        {
            var items = Context.VwPaymentSummaries.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwPaymentSummariesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwPropertyOccupiedStatusesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwpropertyoccupiedstatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwpropertyoccupiedstatuses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwPropertyOccupiedStatusesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwpropertyoccupiedstatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwpropertyoccupiedstatuses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwPropertyOccupiedStatusesRead(ref IQueryable<Destination.Models.destinationTest.VwPropertyOccupiedStatus> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwPropertyOccupiedStatus>> GetVwPropertyOccupiedStatuses(Query query = null)
        {
            var items = Context.VwPropertyOccupiedStatuses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwPropertyOccupiedStatusesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwRptGetLastCleanedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwrptgetlastcleaneds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwrptgetlastcleaneds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwRptGetLastCleanedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwrptgetlastcleaneds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwrptgetlastcleaneds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwRptGetLastCleanedsRead(ref IQueryable<Destination.Models.destinationTest.VwRptGetLastCleaned> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwRptGetLastCleaned>> GetVwRptGetLastCleaneds(Query query = null)
        {
            var items = Context.VwRptGetLastCleaneds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwRptGetLastCleanedsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwSpringCleaningsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwspringcleanings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwspringcleanings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwSpringCleaningsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwspringcleanings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwspringcleanings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwSpringCleaningsRead(ref IQueryable<Destination.Models.destinationTest.VwSpringCleaning> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwSpringCleaning>> GetVwSpringCleanings(Query query = null)
        {
            var items = Context.VwSpringCleanings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwSpringCleaningsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwSumPropertyExpensesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwsumpropertyexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwsumpropertyexpenses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwSumPropertyExpensesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwsumpropertyexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwsumpropertyexpenses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwSumPropertyExpensesRead(ref IQueryable<Destination.Models.destinationTest.VwSumPropertyExpense> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwSumPropertyExpense>> GetVwSumPropertyExpenses(Query query = null)
        {
            var items = Context.VwSumPropertyExpenses.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwSumPropertyExpensesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwTenantCountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwtenantcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwtenantcounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwTenantCountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwtenantcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwtenantcounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwTenantCountsRead(ref IQueryable<Destination.Models.destinationTest.VwTenantCount> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwTenantCount>> GetVwTenantCounts(Query query = null)
        {
            var items = Context.VwTenantCounts.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwTenantCountsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportVwUnbalancedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwunbalanceds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwunbalanceds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportVwUnbalancedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/vwunbalanceds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/vwunbalanceds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnVwUnbalancedsRead(ref IQueryable<Destination.Models.destinationTest.VwUnbalanced> items);

        public async Task<IQueryable<Destination.Models.destinationTest.VwUnbalanced>> GetVwUnbalanceds(Query query = null)
        {
            var items = Context.VwUnbalanceds.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnVwUnbalancedsRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportWarrrantiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/warrranties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/warrranties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportWarrrantiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/warrranties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/warrranties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnWarrrantiesRead(ref IQueryable<Destination.Models.destinationTest.Warrranty> items);

        public async Task<IQueryable<Destination.Models.destinationTest.Warrranty>> GetWarrranties(Query query = null)
        {
            var items = Context.Warrranties.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnWarrrantiesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnWarrrantyGet(Destination.Models.destinationTest.Warrranty item);
        partial void OnGetWarrrantyByWarrantyid(ref IQueryable<Destination.Models.destinationTest.Warrranty> items);


        public async Task<Destination.Models.destinationTest.Warrranty> GetWarrrantyByWarrantyid(int warrantyid)
        {
            var items = Context.Warrranties
                              .AsNoTracking()
                              .Where(i => i.Warrantyid == warrantyid);

 
            OnGetWarrrantyByWarrantyid(ref items);

            var itemToReturn = items.FirstOrDefault();

            OnWarrrantyGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnWarrrantyCreated(Destination.Models.destinationTest.Warrranty item);
        partial void OnAfterWarrrantyCreated(Destination.Models.destinationTest.Warrranty item);

        public async Task<Destination.Models.destinationTest.Warrranty> CreateWarrranty(Destination.Models.destinationTest.Warrranty warrranty)
        {
            OnWarrrantyCreated(warrranty);

            var existingItem = Context.Warrranties
                              .Where(i => i.Warrantyid == warrranty.Warrantyid)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Warrranties.Add(warrranty);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(warrranty).State = EntityState.Detached;
                throw;
            }

            OnAfterWarrrantyCreated(warrranty);

            return warrranty;
        }

        public async Task<Destination.Models.destinationTest.Warrranty> CancelWarrrantyChanges(Destination.Models.destinationTest.Warrranty item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnWarrrantyUpdated(Destination.Models.destinationTest.Warrranty item);
        partial void OnAfterWarrrantyUpdated(Destination.Models.destinationTest.Warrranty item);

        public async Task<Destination.Models.destinationTest.Warrranty> UpdateWarrranty(int warrantyid, Destination.Models.destinationTest.Warrranty warrranty)
        {
            OnWarrrantyUpdated(warrranty);

            var itemToUpdate = Context.Warrranties
                              .Where(i => i.Warrantyid == warrranty.Warrantyid)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(warrranty);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterWarrrantyUpdated(warrranty);

            return warrranty;
        }

        partial void OnWarrrantyDeleted(Destination.Models.destinationTest.Warrranty item);
        partial void OnAfterWarrrantyDeleted(Destination.Models.destinationTest.Warrranty item);

        public async Task<Destination.Models.destinationTest.Warrranty> DeleteWarrranty(int warrantyid)
        {
            var itemToDelete = Context.Warrranties
                              .Where(i => i.Warrantyid == warrantyid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnWarrrantyDeleted(itemToDelete);


            Context.Warrranties.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterWarrrantyDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportWebPageTemplatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/webpagetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/webpagetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportWebPageTemplatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/webpagetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/webpagetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnWebPageTemplatesRead(ref IQueryable<Destination.Models.destinationTest.WebPageTemplate> items);

        public async Task<IQueryable<Destination.Models.destinationTest.WebPageTemplate>> GetWebPageTemplates(Query query = null)
        {
            var items = Context.WebPageTemplates.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnWebPageTemplatesRead(ref items);

            return await Task.FromResult(items);
        }

        public async Task ExportRdzVwGet2024BookingsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/rdzvwget2024bookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/rdzvwget2024bookings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportRdzVwGet2024BookingsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/destinationtest/rdzvwget2024bookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/destinationtest/rdzvwget2024bookings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnRdzVwGet2024BookingsRead(ref IQueryable<Destination.Models.destinationTest.RdzVwGet2024Booking> items);

        public async Task<IQueryable<Destination.Models.destinationTest.RdzVwGet2024Booking>> GetRdzVwGet2024Bookings(Query query = null)
        {
            var items = Context.RdzVwGet2024Bookings.AsQueryable();


            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                ApplyQuery(ref items, query);
            }

            OnRdzVwGet2024BookingsRead(ref items);

            return await Task.FromResult(items);
        }
    }
}